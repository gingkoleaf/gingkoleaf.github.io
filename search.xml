<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nvme_pcie驱动</title>
      <link href="/2023/02/20/kernel/nvme-driver/"/>
      <url>/2023/02/20/kernel/nvme-driver/</url>
      
        <content type="html"><![CDATA[<blockquote><p>linux kernel version: 5.15.x</p></blockquote><h2 id="关键结构体"><a href="#关键结构体" class="headerlink" title="关键结构体"></a>关键结构体</h2><h3 id="nvme-dev"><a href="#nvme-dev" class="headerlink" title="nvme_dev"></a>nvme_dev</h3><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>unsigned int nr_write_queues</td><td>Number of queues to use for writes. If not set, reads and writes will share a queue set.<br>可以通过nvme.ko加载参数指定，默认为0</td></tr><tr><td>unsigned int nr_poll_queues</td><td>Number of queues to use for polled IO<br>可以通过nvme.ko加载参数指定，默认为0</td></tr><tr><td>unsigned int nr_allocated_queues</td><td>num_possible_cpus() + nr_write_queues + nr_poll_queues + 1</td></tr><tr><td>struct nvme_queue* queues</td><td>保存nvme_dev中的所有的sq和cq的队列信息的数组，index为0保存的时admin QP的信息<br>数组中的元素为struct nvme_queue结构体<br>数组的个数为nr_allocated_queues</td></tr><tr><td>unsigned online_queues</td><td>有效的队列数</td></tr><tr><td>unsigned long bar_mapped_size</td><td>bar空间ioremap的大小</td></tr><tr><td>void __iomem* bar</td><td>bar空间地址，内容为映射的ctrl的寄存器数据</td></tr><tr><td>void __iomem* dbs</td><td>队列的门铃寄存器的基地址，为bar空间地址+0x1000偏移地址</td></tr><tr><td>struct dma_pool* prp_page_pool</td><td>prp page页面管理结构体数组，元素为4K大小，地址要求4K对齐</td></tr><tr><td>struct dma_pool* prp_small_pool</td><td>prp small管理结构体数组，元素为256bytes大小，地址要求256bytes对齐</td></tr><tr><td>mempool_t* iod_mempool</td></tr></tbody></table><h3 id="nvme-ctrl"><a href="#nvme-ctrl" class="headerlink" title="nvme_ctrl"></a>nvme_ctrl</h3><h3 id="nvme-queue"><a href="#nvme-queue" class="headerlink" title="nvme_queue"></a>nvme_queue</h3><p>nvme_queue结构体对应一个QP（SQ + CQ）。</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>u16 qid</td><td>队列id，admin的队列id为0</td></tr><tr><td>u32 q_depth</td><td>队列深度，admin队列为32，io队列的值等于nvme_dev-&gt;q_depth，通常情况下，SQ和CQ的深度时一样的<br>驱动会将该信息同步到ctrl的AQA寄存器</td></tr><tr><td>u32 __iomem* q_db</td><td>队列对应doorbell的地址，按照顺序分别存放SQ Tail Doorbell和CQ Head Doorbell，均为4bytes大小<br>nvme_dev-&gt;dbs[qid <em> 2 </em> nvme_dev-&gt;db_stride]</td></tr><tr><td>u8 sqes</td><td>提交队列中命令（sqe）结构体的大小<br>admin的SQ队列为6，io的SQ队列的值等于nvme_dev-&gt;sqes（通常也是6），实际大小为2^6=64 bytes</td></tr><tr><td>void* sq_cmds</td><td>sqe的数组，保存了q_depth个sqes大小的元素<br>采用dma_alloc_coherent函数申请资源</td></tr><tr><td>dma_addr_t sq_dma_addr</td><td>sq的dma地址，，驱动会将该地址信息同步给ctrl的ASQ寄存器</td></tr><tr><td>u16 sq_tail</td><td>sq队列的尾指针位置</td></tr><tr><td>u16 last_sq_tail</td><td></td></tr><tr><td>struct nvme_completion* cqes</td><td>cqe的数组，保存了q_depth个nvme_completion结构体<br>使用dma_alloc_coherent函数申请资源</td></tr><tr><td>dma_addr_t cq_dma_addr</td><td>cq的dma地址，驱动会将该地址信息同步给ctrl的ACQ寄存器</td></tr><tr><td>u16 cq_head</td><td>cq队列的头指针位置</td></tr><tr><td>u8 cq_phase</td><td>通过该字段与cqe中的phase bit进行对比来判定当前cqe是否时有效的cqe</td></tr><tr><td>u16 cq_vector</td><td>队列对应的中断向量号</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> nvme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvme协议总结</title>
      <link href="/2023/02/12/kernel/nvme-spec/"/>
      <url>/2023/02/12/kernel/nvme-spec/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nvmexpress.org/specifications/" target="_blank" rel="noopener">NVMe spec 官网</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>NVMe(Non-Volatile Memory Express)，非易失性存储器标准。<br>NVMe接口是替代AHCI（Advanced Host Controller Interface）的，它定义了主机(host)软件与非易失性存储子系统(subsystem)通信的方式。<br>NVMe接口适用于采用不同传输方式（PCIe/ethernet/InfiniBand/Fibre Channel）的所有存储解决方案。</p><p>从NVMe 2.0版本开始，将协议分成了4部分：</p><ul><li>base: 定义主机软件通过各种基于内存传输（memory-based）和消息传输（message-based）与NVM subsystem通信的协议</li><li>command set: 定义扩展base spec的data structure / features / log pages / commands 和 status value</li><li>transport: define the binding of the NVMe protocol including controller properties to a specific transport</li><li>MI: management interface: 为所有的NVM subsystem定义的可选管理接口。</li></ul><h3 id="Command-Set分类"><a href="#Command-Set分类" class="headerlink" title="Command Set分类"></a>Command Set分类</h3><p>NVMe中的command set分类如下</p><ul><li>Admin Command Set</li><li>I/O Command Set<ul><li>NVM Command Set</li><li>Zoned Namespace Command Set</li><li>Key Value Command Set</li></ul></li><li>Fabrics Command Set</li></ul><p>NVMe采用一个Admin SQ和其对应的CQ，来管理和控制controller。只有Admin Command Set和Fabrics Command Set中的命令才能添加到Admin队列中。</p><p>I/O Command Set使用的是I/O的Queue Pair。Base spec中定义了common I/O commands，其他I/O commands都定义在对应的Command Set Spec中。</p><p>Fabrics Command Set是针对Nvme over Fabrics场景，它定义了NoF的一些特定命令，如建立链接(establishing a connection), 带内身份校验（NVMe in-band autherations），获取/设置属性（get or set a property）等。 所有的Fabrics commands都可以提交到Admin队列，部分Fabrics commands也可以提交到I/O队列中。与Admin和命令不同的时，处理Fabrics命令时无需关注controller是否enabled（CC.EN）。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><table><thead><tr><th>名词</th><th>说明</th></tr></thead><tbody><tr><td>Admin Queue</td><td>id为0的一组SQ和CQ。</td></tr><tr><td>Administrative Controller</td><td>控制器的一种类型，不实现I/O队列，它提供对存储介质中数据和元数据的访问能力；支持namespace附加到ctrl</td></tr><tr><td>arbitration burst</td><td>仲裁机制中每次可以从SQ中获取的最大命令数</td></tr><tr><td>arbitration mechanism</td><td>仲裁机制：用来确定接下来从哪个SQ中获取命令交给ctrl处理</td></tr><tr><td>association</td><td>特定主机和特定ctrl之前的独占通信关系，host独占ctrl的所有admin和I/O队列</td></tr><tr><td>capsule</td><td>NVMe over Frabics场景中表示信息交换单元，一个capsule中包含一个命令或响应，也可能包含命令或响应数据或SGLs</td></tr><tr><td>command completion</td><td>ctrl完成命令处理，在CQE(completion queue entry)中更新状态信息，并将CQE添加到对应的CQ中</td></tr><tr><td>command submission</td><td>对于memory-based传输（如pcie）实现，指的是host将SQE添加到SQ中，更新SQ指针，并设置SQ Tail Doorbell<br>对于message-based传输（如NVMe over Fabrics）实现，指host将capsule加入到SQ中</td></tr><tr><td>controller</td><td>host和NVM subsystem之间的接口。<br>有三种类型的ctrl: I/O controller；discovery controller；Administrative controller。<br>ctrl执行主机在SQ中提交的命令，post completion 到CQ中。所有控制器都实现一个管理SQ/CQ，有些控制器可以实现一个或多个SQ/CQ。<br>当PCIE作为传输协议时，controller时一个PCIE function</td></tr><tr><td>directive</td><td>host与NVM subsystem/contoller之间信息交换的一种方法。信息可以通过Directive send或Directive receive命令传输。</td></tr><tr><td>Discovery Service</td><td>只支持Discovery controller的一种NVM subsystem。它不支持namespace</td></tr><tr><td>namespace</td><td>可被host直接访问的，格式化好的NVM。（A formatted quantity of non-volatile memory that may be directly accessed by a host.）</td></tr><tr><td>NVM subsystem</td><td>NVM subsystem可以包含一个或多个domain，一个或多个controller，0个或多个namesapce以及一个或多个端口。</td></tr></tbody></table><h2 id="协议原理"><a href="#协议原理" class="headerlink" title="协议原理"></a>协议原理</h2><h3 id="控制器架构"><a href="#控制器架构" class="headerlink" title="控制器架构"></a>控制器架构</h3><h4 id="控制器模型"><a href="#控制器模型" class="headerlink" title="控制器模型"></a>控制器模型</h4><p>controller是host和NVM subsystem之间的接口。</p><p>协议定义了两种控制器模型：静态模型（static）和动态模型（dynamic）。NVM subsystem中的所有控制器都应该遵循同一种模型。</p><p>静态控制器模型中，控制器与主机建立链接时可能具有不同的状态，通过控制器ID来区分NVM subsystem中的不同控制器。host会基于控制器ID请求特定的控制器，控制器的状态来自上一次建立关联时的状态。</p><p>动态控制器模型中，控制器由NVM subsystem根据需要动态分配，所有控制器与主机建立链接时具有相同的状态（包含ctrl中的ns，以及feature settings）（不会保留之前建立关联时状态的修改）。建立链接后，对某个控制器的修改（如ns，feature setting）不会影响其他控制。</p><table><tr><th colspan="2" style="text-align: center;">场景</th><th>是否支持静态控制器</th><th>是否支持动态控制器</th></tr><tr><td rowspan="2">Transport Model</td><td>memory-based</td><td>Y</td><td>N</td></tr><tr><td>message-based</td><td>Y</td><td>Y</td></tr><tr><td rowspan="3">Controller Type</td><td>I/O Controller</td><td></td><td></td></tr><tr><td>Administrative Controller</td><td></td><td></td></tr><tr><td>Discovery Controller</td><td>N</td><td>Y</td></tr></table><h4 id="控制器类型"><a href="#控制器类型" class="headerlink" title="控制器类型"></a>控制器类型</h4><blockquote><p><code>Identify命令（CNS:01h）</code>的结果<code>Identify Controller data Structure</code>中有一个属性<code>Controller Type(CNTRLTYPE)</code>标识了控制器的类型。</p></blockquote><blockquote><p>所有的控制器类型都必须实现Admin Queue Pair</p></blockquote><ul><li><p>I/O Controller</p><p>I/O控制器支持使用I/O command set访问存储在NVM subsystem中的非易失性存储介质，也可能会提供管理capabilites的命令。</p><p>一个I/O控制器可以同时支持多种I/O Command Set。控制器具体支持哪些I/O Command Set可以通过<code>Identify命令（CNS:1Ch）</code>的结果<code>Identify I/O Command Set data structure</code>中获取。</p></li></ul><ul><li><p>Administrative Controller</p><p>Administrative控制器的目的是为了给NVM subsystem提供管理功能。虽然I/O控制器可能也能提供这些管理功能，但Administrative控制器必须实现的强制性要求要比I/O控制器少。</p><p>Administrative控制器不支持I/O commands，但是可以支持I/O command set中特定的管理命令，这些管理命令下发时时通过Admin的队列。</p><p>Administrative控制器不支持I/O队列，也不允许添加namespace。</p></li><li><p>Discovery Controller</p><p>Discovery控制器只实现与<code>Discovery Log Pages</code>相关的feature。不支持I/O队列，I/O命令和namespace。</p></li></ul><h3 id="控制器属性"><a href="#控制器属性" class="headerlink" title="控制器属性"></a>控制器属性</h3><p>控制器属性通常时dword(4bytes)或qword(8bytes)大小。这些属性可能具有RO/RW权限。</p><p>读写这些属性时，只能根据它的偏移(offset)和大小进行读写，不能一次多多个属性或跨属性的地址进行访问。</p><p>说有的保留(reserved)属性和属性中的保留字段都是只读的，读取只写内容时返回值都是0.</p><p>message-based的场景中，可以通过<code>Property Get</code>和<code>Property Set</code>命令对属性进行读写。</p><p>memory-based的场景中，通常时将这些属性映射（ioremap）到主机的内存，然后采用<code>readl</code>和<code>writel</code>等相关命令进行读写。</p><blockquote><p>具体的属性内容，参见base协议(2.0b版本)的 3.1.3章节。</p></blockquote><blockquote><p>在memory-base(pcie)场景中，控制器属性就是指控制器寄存器</p></blockquote><h2 id="队列模型"><a href="#队列模型" class="headerlink" title="队列模型"></a>队列模型</h2><p>NVMe的实现是基于配对的Submission和Completion队列。命令由host软件提交到SQ，controller处理完后会将Completion添加到命令关联的CQ中。</p><p>memory-based传输场景中，SQ与CQ的对应关系时n:1(n&gt;=1)。message-based传输场景中，SQ和CQ的对应关系时1:1。</p><h3 id="Memory-Based-Transport-Model"><a href="#Memory-Based-Transport-Model" class="headerlink" title="Memory-Based Transport Model"></a>Memory-Based Transport Model</h3><h4 id="I-O-SQ和CQ的创建流程"><a href="#I-O-SQ和CQ的创建流程" class="headerlink" title="I/O SQ和CQ的创建流程"></a>I/O SQ和CQ的创建流程</h4><ul><li>初始化Admin队列的属性: Admin Queue Attributes (SQ size, CQ size), Admin SQ Base Address 和 Admin CQ Base Address。</li><li>通过Controller Configuration属性配置I/O SQ entry大小（CC.IOSQES）和 I/O CQ entry大小（CC.IOCQES）。</li><li>下发<code>Set Feature</code>命令（feature: number of queue）请求I/O SQ和CQ的队列数量，该命令返回控制器分配的SQ和CQ的队列数。</li><li>读取CAP.MQES(maximum Queue Entry Size)，并确定队列深度的大小；读取CAP.CQR(Contiguous Queues Required)确定队列是否需要连续的物理地址。</li><li>下发<code>create i/o cq</code>命令创建I/O 的CQ队列，下发命令时会指定队列深度，队列dma地址等信息</li><li>下发<code>create i/o sq</code>命令创建I/O 的SQ队列</li></ul><h4 id="队列使用"><a href="#队列使用" class="headerlink" title="队列使用"></a>队列使用</h4><h3 id="Message-Based-Transport-Model"><a href="#Message-Based-Transport-Model" class="headerlink" title="Message-Based Transport Model"></a>Message-Based Transport Model</h3>]]></content>
      
      
      
        <tags>
            
            <tag> nvme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kvm虚拟化</title>
      <link href="/2023/02/04/ubuntu/kvm-config/"/>
      <url>/2023/02/04/ubuntu/kvm-config/</url>
      
        <content type="html"><![CDATA[<blockquote><p>测试环境 Ubuntu 22.04 (Ubuntu 5.15.0-58.64-generic 5.15.74) server版本</p></blockquote><p><a href="https://ubuntu.com/server/docs/virtualization-introduction" target="_blank" rel="noopener">ubuntu server虚拟化官方文档</a><br><a href="https://documentation.suse.com/zh-cn/sles/15-SP2/html/SLES-all/cha-kvm.html" target="_blank" rel="noopener">suse 15sp2 虚拟化官方文档</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>KVM: Kernel-based Virtual Machine，基于内核的虚拟机，是全虚拟化的解决方案。</p><h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h2><ul><li><p>X86_64体系架构：</p><ul><li><p>AMD系列中支持AMD-V（svm） 和 Intel系列中支持VT-x（vmx）的处理器 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~$ cat /proc/cpuinfo |grep -Eoc &quot;(svm|vmx)&quot;</span><br><span class="line">8</span><br><span class="line">baoze@baoze:~$</span><br></pre></td></tr></table></figure></li><li><p>BIOS中未禁用虚拟化功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~$ sudo apt install cpu-checker</span><br><span class="line">baoze@baoze:~$ kvm-ok</span><br><span class="line">INFO: /dev/kvm exists</span><br><span class="line">KVM acceleration can be used</span><br><span class="line">baoze@baoze:~$</span><br></pre></td></tr></table></figure></li></ul></li><li><p>arm体系架构：最初是从 Arm Cortex-A15 开始向 Armv7-A 处理器添加虚拟化支持的，其中包括 Cortex-A7 和 Cortex-A17。Armv8-A 处理器包含虚拟化支持</p></li></ul><h2 id="kvm相关组件"><a href="#kvm相关组件" class="headerlink" title="kvm相关组件"></a>kvm相关组件</h2><p>包括两个主要组件：</p><ul><li>一组内核模块（kvm.ko、kvm-intel.ko 和 kvm-amd.ko），提供核心虚拟化基础结构和特定于处理器的驱动程序。</li><li>一个用户空间程序 (qemu-system-ARCH/libvirt)，提供虚拟设备模拟以及用于管理 VM Guest（虚拟机）的控制机制。 </li></ul><p>可以直接使用 QEMU 工具或使用基于 libvirt 的堆栈来管理 VM Guest（虚拟机）、虚拟储存和虚拟网络。</p><ul><li>QEMU 工具包括 qemu-system-ARCH、QEMU 监视器、qemu-img 和 qemu-ndb。</li><li>基于 libvirt 的堆栈包括 libvirt 本身，以及 virsh、virt-manager、virt-install 和 virt-viewer 等基于 libvirt 的应用程序。 </li></ul><h3 id="libvirt"><a href="#libvirt" class="headerlink" title="libvirt"></a>libvirt</h3><p>libvirt 是一个库，提供用于管理 KVM、LXC、Xen 等流行虚拟化解决方案的通用 API。该库为这些虚拟化解决方案提供规范化管理 API，以便为更高层级的管理工具提供一个跨超级管理程序的稳定接口。该库还提供用于管理 VM 主机服务器上的虚拟网络和储存的 API。每个 VM Guest 的配置都储存在 XML 文件中。 </p><ul><li><p>virsh (libvirt-clients包)<br>用于管理 VM Guest 的命令行工具，其功能与虚拟机管理器类似。可让您更改 VM Guest 的状态（启动、停止、暂停等）、设置新的 Guest 和设备，或编辑现有配置。virsh 还可用于编写 VM Guest 管理操作的脚本。</p></li><li><p>virt-manager<br>用于管理 VM Guest 的桌面工具，通常成为虚拟机管理器。</p></li></ul><ul><li><p>virt-install<br>用于通过 libvirt 库创建新 VM Guest 的命令行工具。virt-install 是虚拟机管理器使用的默认安装工具。</p></li><li><p>virt-viewer<br>VM Guest 图形控制器的查看器。</p></li></ul><h3 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h3><p>QEMU 是快速的跨平台开源计算机模拟器，可为您模拟数量庞大的硬件体系结构。QEMU 可让您在现有系统（VM 主机服务器）之上运行未经修改的完整操作系统 (VM Guest)。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> qemu </tag>
            
            <tag> kvm </tag>
            
            <tag> ubuntu </tag>
            
            <tag> libvirt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux设备驱动</title>
      <link href="/2023/01/29/kernel/linux-devices/"/>
      <url>/2023/01/29/kernel/linux-devices/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kernel.org/doc/html/v5.15/driver-api/index.html" target="_blank" rel="noopener">The Linux driver implementer’s API guide</a></p><p>内核驱动模型提供了一个通用的、统一的数据模型，用于描述总线和总线下可能出现的设备。统一总线模型包括总线的公共属性，以及一组公共回调，如探测期间的设备发现、关机、电源管理等。</p><p>通用设备和桥接接口反映了现代计算机的目标:即能够做到设备“即插即用”、电源管理和热插拔。特别是，Intel和Microsoft指定的模型(ACPI)确保x86兼容系统上几乎任何总线上的几乎所有设备都可以正常工作。并不是每个总线都能够支持所有这些操作，尽管大多数总线支持这些操作中的大部分。</p><h2 id="kobject与kset"><a href="#kobject与kset" class="headerlink" title="kobject与kset"></a>kobject与kset</h2><p>### </p><p>### </p>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> device </tag>
            
            <tag> driver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux文件系统</title>
      <link href="/2023/01/14/kernel/filesystem/"/>
      <url>/2023/01/14/kernel/filesystem/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内核版本 5.15</p></blockquote><p><a href="https://kernel.org/doc/html/v5.15/filesystems/index.html" target="_blank" rel="noopener">官方文档 Filesystems in the Linux kernel</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>VFS(Virtual File System / Virtual Filesystem Switch)是内核中对用户空间的程序提供文件系统接口的一个抽象的软件层，它对用户空间的程序屏蔽了不同的具体文件系统的实现差异。</p><p>VFS的系统调用都是在进程上下文中调用的。</p><table><thead><tr><th>源文件</th><th>包含的系统调用</th></tr></thead><tbody><tr><td>fs/d_path.c</td><td>getcwd</td></tr><tr><td>fs/exec.c</td><td>execve, execveat</td></tr><tr><td>fs/fcntl.c</td><td>fcntl</td></tr><tr><td>fs/file.c</td><td>dup</td></tr><tr><td>fs/filesystems.c</td><td>sysfs</td></tr><tr><td>fs/ioctl.c</td><td>ioctl</td></tr><tr><td>fs/locks.c</td><td>flock</td></tr><tr><td>fs/namei.c</td><td>mknod, mkdir, rmdir, unlink, link, syslink, rename</td></tr><tr><td>fs/namespace.c</td><td>mount, umount</td></tr><tr><td>fs/open.c</td><td>truncate, acess, chdir, chroot, chmod, open, create, close</td></tr><tr><td>fs/pipe.c</td><td>pipe</td></tr><tr><td>fs/read_write.c</td><td>lseek, read, write,</td></tr><tr><td>fs/select.c</td><td>select, poll</td></tr><tr><td>fs/stat.c</td><td>stat, fstat, lstat</td></tr><tr><td>fs/sync.c</td><td>sync</td></tr><tr><td>fs/utimes.c</td><td>utime, utimes, futimes, lutimes</td></tr></tbody></table><h2 id="关键全局变量"><a href="#关键全局变量" class="headerlink" title="关键全局变量"></a>关键全局变量</h2><table><thead><tr><th>全局变量</th><th>所在文件</th><th>说明</th></tr></thead><tbody><tr><td>struct list_head super_blocks</td><td>fs/super.c</td><td>保存系统中所有的super_block</td></tr><tr><td>struct file_system_type* file_systems</td><td>fs/filesystem.c</td><td>保存了系统中所有的file_system_type信息</td></tr></tbody></table><h2 id="关键数据结构"><a href="#关键数据结构" class="headerlink" title="关键数据结构"></a>关键数据结构</h2><table><thead><tr><th>数据结构</th><th>所在文件</th></tr></thead><tbody><tr><td>struct super_block</td><td>include/linux/fs.h</td></tr><tr><td>struct dentry</td><td>include/linux/dcache.h</td></tr><tr><td>struct inode</td><td>include/linux/fs.h</td></tr><tr><td>strucr file</td><td>include/linux/fs.h</td></tr><tr><td>struct file_system_type</td><td>include/linux/fs.h</td></tr><tr><td>struct vfsmount</td><td>include/linux/mount.h</td></tr><tr><td>struct mount</td><td>include/linux/mount.h</td></tr></tbody></table><p>数据结构之间的关联关系(相同颜色表示指向同一个对象)<br><img src="/img/vfs_数据结构关系图.svg" alt="example_1"></p><h3 id="super-block"><a href="#super-block" class="headerlink" title="super_block"></a>super_block</h3><p>存储一个已挂载的文件系统的相关信息，实例在文件系统挂载的时候产生。</p><p>对于磁盘类文件系统，相关信息会持久化到磁盘中。superblock保存了一个文件系统的最基础的元信息，一般都保存在底层存储设备的开头；文件系统挂载之后会读取文件系统的superblock并常驻内存，部分字段是动态创建时设置的。</p><p>同一个文件系统可能会有多个super_block。</p><p>super_block存在于两个链表中,一个是系统所有super_block的链表（全局变量super_blocks）, 一个是对于特定的文件系统的super_block链表(file_system_type.fs_supers).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">s_list</span>;</span>                <span class="comment">/* Keep this first --- 挂在全局变量 struct list_head super_blocks链表上*/</span></span><br><span class="line">    <span class="keyword">dev_t</span>            s_dev;                    <span class="comment">/* search index; _not_ kdev_t  对应的设备描述符 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>        s_blocksize_bits;   <span class="comment">/* 以位为单位的块的大小 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>        s_blocksize;        <span class="comment">/* 以字节为单位的块大小 */</span></span><br><span class="line">    <span class="keyword">loff_t</span>            s_maxbytes;                <span class="comment">/* 文件大小的上限 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span>    *<span class="title">s_type</span>;</span>        <span class="comment">/* 文件系统类型 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span>    *<span class="title">s_op</span>;</span>  <span class="comment">/* super_block的操作函数 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dquot_operations</span>    *<span class="title">dq_op</span>;</span> <span class="comment">/* 磁盘限额方法 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">quotactl_ops</span>    *<span class="title">s_qcop</span>;</span>    <span class="comment">/* 限额控制方法 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">export_operations</span> *<span class="title">s_export_op</span>;</span>    <span class="comment">/* 导出方法 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>        s_flags;    <span class="comment">/* 文件系统的mount标记 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>        s_magic;    <span class="comment">/* 文件系统的魔术字 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dentry</span>        *<span class="title">s_root</span>;</span>        <span class="comment">/* 根目录的dentry */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_head</span>    <span class="title">s_roots</span>;</span>    <span class="comment">/* alternate root dentries for NFS */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">s_mounts</span>;</span>    <span class="comment">/* list of mounts; _not_ for fs use */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>    *<span class="title">s_bdev</span>;</span>    <span class="comment">/* 相关的块设备 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>    <span class="title">s_instances</span>;</span>    <span class="comment">/* 挂在对应的文件系统结构体 file_system_type 的fs_supers链表 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指向具体文件系统私有结构体，如 xfs_mount, ramfs_fs_info, ext4_sb_info, proc_fs_info等</span></span><br><span class="line">    <span class="keyword">void</span>            *s_fs_info;    <span class="comment">/* Filesystem private info  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> *<span class="title">s_d_op</span>;</span>     <span class="comment">/* default d_op for dentries */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Owning user namespace and default context in which to</span></span><br><span class="line"><span class="comment">     * interpret filesystem uids, gids, quotas, device nodes,</span></span><br><span class="line"><span class="comment">     * xattrs and security labels.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">s_user_ns</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The list_lru structure is essentially just a pointer to a table</span></span><br><span class="line"><span class="comment">     * of per-node lru lists, each of which has its own spinlock.</span></span><br><span class="line"><span class="comment">     * There is no need to put them into separate cachelines.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_lru</span>        <span class="title">s_dentry_lru</span>;</span>       <span class="comment">// 未使用的dentry列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_lru</span>        <span class="title">s_inode_lru</span>;</span>        <span class="comment">// 未使用的inode列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>        <span class="title">rcu</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span>    <span class="title">destroy_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">s_inodes</span>;</span>    <span class="comment">/* all inodes   所有的inode列表*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">s_inodes_wb</span>;</span>    <span class="comment">/* writeback inodes 需要回写的inode列表*/</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="dentry"><a href="#dentry" class="headerlink" title="dentry"></a>dentry</h3><p>目录项（directory entry），保存了文件（目录）名称和具体的inode的对应关系，同时也实现目录与其包含的文件/目录之间的映射关系；引入dentry的概念主要是为了方便查找文件/目录，path中的每个目录和文件都有对应的dentry。</p><p>用来保存文件路径和inode之间的映射，从而支持在文件系统中移动。dentry 由 VFS 维护，所有文件系统共享，不和具体的进程关联。</p><p>dentry没有在磁盘等底层持久化存储设备上存储，是一个动态创建的内存数据结构，主要是为了构建出树状组织结构而设计，用来进行文件、目录的查找。</p><p>通过从文件系统根开始的目录项进行连接，所有的目录项会形成一个树状结构；查找时通过这个树状结构来找到对应的文件/目录。</p><p>虚拟文件系统维护了一个 DEntry Cache缓存（全局变量 struct hlist_bl_head *dentry_hashtable），用来保存最近使用的 dentry，加速查询操作。当调用open()<br>函数打开一个文件时，内核会第一时间根据文件路径到 DEntry Cache里面寻找相应的dentry，找到了就直接构造一个struct file对象并返回。如果该文件不在缓存中，那么 VFS 会根据找到的最近目录一级一级地向下加载，直到找到相应的文件。期间 VFS 会缓存所有被加载生成的dentry。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> &#123;</span></span><br><span class="line">    <span class="comment">/* RCU lookup touched fields */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> d_flags;        <span class="comment">/* protected by d_lock */</span></span><br><span class="line">    <span class="keyword">seqcount_spinlock_t</span> d_seq;    <span class="comment">/* per dentry seqlock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_node</span> <span class="title">d_hash</span>;</span>    <span class="comment">/* lookup hash list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">d_parent</span>;</span>    <span class="comment">/* parent directory */</span>      reserve</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">qstr</span> <span class="title">d_name</span>;</span>     reserve</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">d_inode</span>;</span>        <span class="comment">/* Where the name belongs to - NULL is negative */</span> reserve</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> d_iname[DNAME_INLINE_LEN];    <span class="comment">/* small names */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Ref lookup also touches following */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lockref</span> <span class="title">d_lockref</span>;</span>    <span class="comment">/* per-dentry lock and refcount */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dentry_operations</span> *<span class="title">d_op</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">d_sb</span>;</span>    <span class="comment">/* The root of the dentry tree */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> d_time;        <span class="comment">/* used by d_revalidate */</span></span><br><span class="line">    <span class="keyword">void</span> *d_fsdata;            <span class="comment">/* fs-specific data */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_lru</span>;</span>        <span class="comment">/* LRU list */</span></span><br><span class="line">        <span class="keyword">wait_queue_head_t</span> *d_wait;    <span class="comment">/* in-lookup ones only */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_child</span>;</span>    <span class="comment">/* child of parent list 链到d_parent的d_subdirs链表中 */</span> reserve</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">d_subdirs</span>;</span>    <span class="comment">/* our children  当前dentry中的子dentry链表 */</span>  reserve</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * d_alias and d_rcu can share memory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">d_alias</span>;</span>    <span class="comment">/* inode alias list */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hlist_bl_node</span> <span class="title">d_in_lookup_hash</span>;</span>    <span class="comment">/* only for in-lookup ones */</span></span><br><span class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">d_rcu</span>;</span></span><br><span class="line">    &#125; d_u;</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h3><p>索引节点（index node）记录了文件或目录的属性信息。文件和inode是一一对应的。一个 inode可能被多个 dentry 所关联（通常是为文件建立硬连接）。</p><p>当创建一个文件时会对应的生成一个struct inode实例，并且该信息会持久化保存到磁盘中，由具体的文件系统进行组织。 </p><p>当磁盘上的文件被访问时，才会由文件系统从磁盘上加载相应的数据并构造inode。虚拟文件系统维护了一个 Inode-cache缓存（全局变量 struct hlist_head *inode_hashtable），用来保存最近使用的inode，加速查询操作。</p><p>inode存在于两个双向链表, inode所在文件系统的 super_block 的 s_inodes 和 s_inodes_wb 链表中。</p><p><code>ls -li</code> 命令结果的第一列就是文件的 inode 号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace$ ls -li</span><br><span class="line">total 1281244</span><br><span class="line">1444216 drwxrwxr-x  2 baoze baoze       4096 Jan 14 04:28 c</span><br><span class="line"> 524309 -rw-rw-r--  1 baoze baoze   59243820 Jan  6 22:58 compile_commands.json</span><br><span class="line"> 533495 drwxrwxr-x 28 baoze baoze       4096 Jan  7 00:26 linux-5.15.86</span><br><span class="line"> 533494 -rw-rw-r--  1 baoze baoze  195477769 Jan  5 15:40 linux-5.15.86.tar.gz</span><br><span class="line"> 557446 -rw-rw-r--  1 baoze baoze 1057254056 Jan 14 01:07 linux-image-unsigned-5.15.0-58-generic-dbgsym_5.15.0-58.64_amd64.ddeb</span><br></pre></td></tr></table></figure><p>硬链接与软连接</p><p>硬链接： 指向原始文件 inode 的指针，系统不为它分配新的inode。我们每添加一个硬链接，该文件的 innode 连接数就会增加 1 ； 而且只有当该文件的 inode 连接数为 0 时，才算彻底被将它删除。因此即便删除原始文件，依然可以通过硬链接文件来访问。需要注意的是，我们不能跨分区对文件进行链接。<br>软链接： 链接文件会生成新的inode。因此能链接目录，也能跨文件系统链接。但是，当删除原始文件后，链接文件也将失效。</p><p>inode的状态通常有三种</p><ul><li>存在内存中，未关联到任何文件，也不处于活动使用状态;</li><li>存在内存中，正在由一个或多个进程使用，正在由一个或多个进程使用，通常表示一个文件。两个计数器（i_count和i_nlink）的值都必须大于0。文件内容和inode元数据都与底层块设备上的信息相同。也就是表示从上一次与介质同步依赖，该inode没有改变过;</li><li>处于活动使用状态。其数据内容已经改变，与存储介质上的内容不同。这种状态的inode被称作脏的。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line">    <span class="keyword">umode_t</span>            i_mode;     <span class="comment">//访问权限控制</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>        i_flags;    <span class="comment">//文件系统标志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode_operations</span>    *<span class="title">i_op</span>;</span>  <span class="comment">//指向索引结点操作结构体的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">super_block</span>    *<span class="title">i_sb</span>;</span>      <span class="comment">//指向inode所属文件系统的超级块的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个结构目的是缓存文件的内容，对文件的读写操作首先要在i_mapping包含的缓存里寻找文件的内容。</span></span><br><span class="line">    <span class="comment">// 如果有缓存，对文件的读就可以直接从缓存中获得，而不用再去物理硬盘读取，从而大大加速了文件的读操作。</span></span><br><span class="line">    <span class="comment">// 写操作也要首先访问缓存，写入到文件的缓存。然后等待合适的机会，再从缓存写入硬盘</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    *<span class="title">i_mapping</span>;</span>     <span class="comment">//相关的地址映射</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>        i_ino;      <span class="comment">//索引结点号。通过ls -i命令可以查看文件的索引节点号</span></span><br><span class="line">    <span class="keyword">dev_t</span>            i_rdev;</span><br><span class="line">    <span class="keyword">loff_t</span>            i_size;       <span class="comment">/* 以字节为单位的文件长度 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span>    <span class="title">i_atime</span>;</span>    <span class="comment">//最后访问时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span>    <span class="title">i_mtime</span>;</span>    <span class="comment">//最后修改时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span>    <span class="title">i_ctime</span>;</span>    <span class="comment">//最后改变时间</span></span><br><span class="line">    <span class="keyword">blkcnt_t</span>        i_blocks;    <span class="comment">//文件的块数</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>    <span class="title">i_hash</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">i_io_list</span>;</span>    <span class="comment">/* backing dev IO list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">i_lru</span>;</span>        <span class="comment">/* inode LRU list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">i_sb_list</span>;</span>      <span class="comment">/* 链接到 super_block 中的 inode 链表 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">i_wb_list</span>;</span>    <span class="comment">/* backing dev writeback list */</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span>    <span class="title">i_dentry</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>        <span class="title">i_rcu</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>    *<span class="title">i_fop</span>;</span>    <span class="comment">/* former -&gt;i_op-&gt;default_file_ops */</span></span><br><span class="line">        <span class="keyword">void</span> (*free_inode)(struct inode *);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    <span class="title">i_data</span>;</span>     <span class="comment">//设备地址映射</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">i_devices</span>;</span>      <span class="comment">//块设备链表</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span>    *<span class="title">i_pipe</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span>        *<span class="title">i_cdev</span>;</span></span><br><span class="line">        <span class="keyword">char</span>            *i_link;</span><br><span class="line">        <span class="keyword">unsigned</span>        i_dir_seq;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>            *i_private; <span class="comment">/* fs or device private pointer */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>file是内核中的数据结构，描述的是进程已经打开的文件，和进程是关联的。</p><p>因为一个文件可以被多个进程打开，所以一个文件可以存在多个文件对象，但多个文件对象其对应的索引节点和目录项对象肯定是唯一的。</p><p>每个进程都持有一个fd[]数组，数组里面存放的是指向file结构体的指针，同一进程的不同fd可以指向同一个file对象。</p><p>当应用程序调用open()函数的时候，VFS就会创建相应的file对象，打开文件的过程也就是对file结构体的初始化的过程。<br>在打开文件的过程中会将inode部分关键信息填充到file中，特别是文件操作的函数指针。<br>在task_struct中保存着一个file类型的数组，而用户态的文件描述符其实就是数组的下标。这样通过文件描述符就可以很容易到找到file，然后通过其中的函数指针访问数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span>       <span class="meta"># <span class="meta-keyword">include</span>/linux/fs.h</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// f_path.dentry 指向该file对应的dentry</span></span><br><span class="line">    <span class="comment">// f_path.mnt指向该file对应的vfsmount</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">path</span>        <span class="title">f_path</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span>        *<span class="title">f_inode</span>;</span>    <span class="comment">/* cached value */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span>    *<span class="title">f_op</span>;</span>      <span class="comment">//指向文件操作表的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">atomic_long_t</span>        f_count;        <span class="comment">//文件对象的使用计数</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>         f_flags;        <span class="comment">//打开文件时所指定的标志</span></span><br><span class="line">    <span class="keyword">fmode_t</span>            f_mode;     <span class="comment">//文件的访问模式</span></span><br><span class="line">    <span class="keyword">loff_t</span>            f_pos;      <span class="comment">//文件当前的位移量</span></span><br><span class="line"></span><br><span class="line">    u64            f_version;</span><br><span class="line">    <span class="keyword">void</span>            *private_data;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    *<span class="title">f_mapping</span>;</span>     <span class="comment">//页缓存映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filesystem"><a href="#filesystem" class="headerlink" title="filesystem"></a>filesystem</h3><p>fs/filesystem.c 文件中定义了全局变量 static struct file_system_type *file_systems，保存了系统中所有的file_system_type信息。</p><ul><li>对file_systems全局变量list的遍历必须要通过 file_systems_lock 来进行保护</li><li>文件系统module卸载时，必须调用 unregister_filesystem()接口</li><li>访问list中的某一个成员时，可以在加锁（file_systems_lock）的代码段中进行，或者获取file_system_type-&gt;owner的引用计数。获取引用计数可以通过try_module_get()函数实现，该函数返回0表示获取失败。</li></ul><p>如下面代码示例<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fs_name</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> index, <span class="keyword">char</span> __user * buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> * <span class="title">tmp</span>;</span></span><br><span class="line">    <span class="keyword">int</span> len, res;</span><br><span class="line"></span><br><span class="line">    read_lock(&amp;file_systems_lock);  # 加锁</span><br><span class="line">    <span class="keyword">for</span> (tmp = file_systems; tmp; tmp = tmp-&gt;next, index--)</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span> &amp;&amp; try_module_get(tmp-&gt;owner))  # 获取引用计数</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    read_unlock(&amp;file_systems_lock); # 解锁</span><br><span class="line">    <span class="keyword">if</span> (!tmp)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* OK, we got the reference, so we can safely block */</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(tmp-&gt;name) + <span class="number">1</span>;</span><br><span class="line">    res = copy_to_user(buf, tmp-&gt;name, len) ? -EFAULT : <span class="number">0</span>;</span><br><span class="line">    put_filesystem(tmp);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>file_system_type结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;       <span class="comment">// 文件系统名称</span></span><br><span class="line">    <span class="keyword">int</span> fs_flags;</span><br><span class="line">    <span class="keyword">int</span> (*init_fs_context)(struct fs_context *);</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_parameter_spec</span> *<span class="title">parameters</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *(*<span class="title">mount</span>) (<span class="title">struct</span> <span class="title">file_system_type</span> *, <span class="title">int</span>, <span class="title">const</span> <span class="title">char</span> *, <span class="title">void</span> *);</span></span><br><span class="line">    <span class="keyword">void</span> (*kill_sb) (struct super_block *);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> * <span class="title">next</span>;</span>     <span class="comment">/* 挂在全局变量 file_systems链表上 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">fs_supers</span>;</span>    <span class="comment">/* 表示给定类型的已安装文件系统所对应的super_block链表的头 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="vfsmount"><a href="#vfsmount" class="headerlink" title="vfsmount"></a>vfsmount</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> &#123;</span>       <span class="comment">// include/linux/mount.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_root</span>;</span><span class="comment">/* root of the mounted tree */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">mnt_sb</span>;</span><span class="comment">/* pointer to superblock */</span></span><br><span class="line"><span class="keyword">int</span> mnt_flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">mnt_userns</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> &#123;</span>          <span class="comment">// fs/mount.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">mnt_hash</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">mnt_parent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">mnt_mountpoint</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> <span class="title">mnt</span>;</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">mnt_rcu</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> <span class="title">mnt_llist</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_mounts</span>;</span><span class="comment">/* list of children, anchored here */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_child</span>;</span><span class="comment">/* and going through their mnt_child */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_instance</span>;</span><span class="comment">/* mount instance on sb-&gt;s_mounts */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *mnt_devname;<span class="comment">/* Name of device e.g. /dev/dsk/hda1 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_expire</span>;</span><span class="comment">/* link in fs-specific expiry list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_share</span>;</span><span class="comment">/* circular list of shared mounts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_slave_list</span>;</span><span class="comment">/* list of slave mounts */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_slave</span>;</span><span class="comment">/* slave list entry */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">mnt_master</span>;</span><span class="comment">/* slave is on master-&gt;mnt_slave_list */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_namespace</span> *<span class="title">mnt_ns</span>;</span><span class="comment">/* containing namespace */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mountpoint</span> *<span class="title">mnt_mp</span>;</span><span class="comment">/* where is it mounted */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">mnt_mp_list</span>;</span><span class="comment">/* list mounts with the same mountpoint */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">mnt_umount</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mnt_umounting</span>;</span> <span class="comment">/* list entry for umount propagation */</span></span><br><span class="line"><span class="keyword">int</span> mnt_id;<span class="comment">/* mount identifier */</span></span><br><span class="line"><span class="keyword">int</span> mnt_group_id;<span class="comment">/* peer group identifier */</span></span><br><span class="line"><span class="keyword">int</span> mnt_expiry_mark;<span class="comment">/* true if marked for expiry */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">mnt_pins</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">mnt_stuck_children</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mnt-namespace"><a href="#mnt-namespace" class="headerlink" title="mnt_namespace"></a>mnt_namespace</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_namespace</span> &#123;</span>      <span class="comment">// fs/mount.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ns_common</span><span class="title">ns</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">root</span>;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Traversal and modification of .list is protected by either</span></span><br><span class="line"><span class="comment"> * - taking namespace_sem for write, OR</span></span><br><span class="line"><span class="comment"> * - taking namespace_sem for read AND taking .ns_lock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">spinlock_t</span>ns_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span>*<span class="title">user_ns</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ucounts</span>*<span class="title">ucounts</span>;</span></span><br><span class="line">u64seq;<span class="comment">/* Sequence number to prevent loops */</span></span><br><span class="line"><span class="keyword">wait_queue_head_t</span> poll;</span><br><span class="line">u64 event;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>mounts; <span class="comment">/* # of mounts in the namespace */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>pending_mounts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mountpoint"><a href="#mountpoint" class="headerlink" title="mountpoint"></a>mountpoint</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mountpoint</span> &#123;</span>     <span class="comment">// fs/mount.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">m_hash</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">m_dentry</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">m_list</span>;</span></span><br><span class="line"><span class="keyword">int</span> m_count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="nameidata"><a href="#nameidata" class="headerlink" title="nameidata"></a>nameidata</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nameidata</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span><span class="title">path</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qstr</span><span class="title">last</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span><span class="title">root</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*<span class="title">inode</span>;</span> <span class="comment">/* path.dentry.d_inode */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flags, state;</span><br><span class="line"><span class="keyword">unsigned</span>seq, m_seq, r_seq;</span><br><span class="line"><span class="keyword">int</span>last_type;</span><br><span class="line"><span class="keyword">unsigned</span>depth;</span><br><span class="line"><span class="keyword">int</span>total_link_count;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">saved</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">link</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">delayed_call</span> <span class="title">done</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">unsigned</span> seq;</span><br><span class="line">&#125; *<span class="built_in">stack</span>, internal[EMBEDDED_LEVELS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">filename</span>*<span class="title">name</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nameidata</span> *<span class="title">saved</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span>root_seq;</span><br><span class="line"><span class="keyword">int</span>dfd;</span><br><span class="line"><span class="keyword">kuid_t</span>dir_uid;</span><br><span class="line"><span class="keyword">umode_t</span>dir_mode;</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h2 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h2><table><thead><tr><th>全局变量</th><th>缓存池名称</th><th>对象</th><th>说明</th></tr></thead><tbody><tr><td>dentry_hashtable</td><td>Dentry Cache</td><td>struct hlist_bl_head</td><td>alloc_large_system_hash</td></tr><tr><td>inode_hashtable</td><td>Inode-cache</td><td>struct hlist_head</td><td>alloc_large_system_hash</td></tr><tr><td>names_cachep</td><td>names_cache</td><td>4K的char(path_name)</td><td>slab</td></tr><tr><td>dentry_cache</td><td>dentry</td><td>struct dentry</td><td>slab</td></tr><tr><td>inode_cache</td><td>inode_cache</td><td>struct inode</td><td>slab</td></tr><tr><td>filp_cachep</td><td>filep</td><td>struct file</td><td>slab</td></tr><tr><td>mnt_cache</td><td>mnt_cache</td><td>struct mount</td><td>slab</td></tr><tr><td>mount_hashtable</td><td>Mount-cache</td><td>struct hlist_head</td><td>alloc_large_system_hash</td></tr><tr><td>mountpoint_hashtable</td><td>Mountpoint-cache</td><td>struct hlist_head</td><td>alloc_large_system_hash</td></tr><tr><td>kernfs_node_cache</td><td>kernfs_node_cache</td><td>struct kernfs_node</td><td>slab</td></tr><tr><td>kernfs_iattrs_cache</td><td>kernfs_iattrs_cache</td><td>struct kernfs_iattrs</td><td>slab</td></tr><tr><td>shmem_inode_cachep</td><td>shmem_inode_cache</td><td>struct shmem_inode_info</td><td>slab</td></tr><tr><td>bdev_cachep</td><td>bdev_cache</td><td>struct bdev_inode</td><td>slab</td></tr></tbody></table><p>在<code>dcache_init</code>，<code>inode_init</code>同<code>dcache_init_early</code>， <code>inode_init_early</code>函数中分别创建<code>struct entry</code> 和 <code>struct inode</code>的slab cache和hash table<br>在slab cache中保存数据，使用hash table为其建立索引表，典型的以空间换时间方式<br>这里使用有early后缀和没有early后缀的函数是根据hash是否分布在NUMA上来选择hash table的创建时机是否推迟到vmalloc空间可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">start_kernel()</span><br><span class="line">  |--- vfs_caches_init_early()  # fs/dcache.c</span><br><span class="line">  |      |--- dcache_init_early()</span><br><span class="line">  |      |      |--- # fs/dcache.c</span><br><span class="line">  |      |      |--- # 全局变量 struct hlist_bl_head *dentry_hashtable 分配内存(alloc_large_system_hash)</span><br><span class="line">  |      |      |--- # table name: Dentry cache,   对象 struct hlist_bl_head</span><br><span class="line">  |      |--- inode_init_early()</span><br><span class="line">  |      |      |--- # fs/inode.c </span><br><span class="line">  |      |      |--- # 全局变量 struct hlist_head *inode_hashtable 分配内存(alloc_large_system_hash)</span><br><span class="line">  |      |      |--- # table name: Inode-cache,   对象 struct hlist_head</span><br><span class="line">  |--- mm_init()    # 内存初始化，kmem_cache_init</span><br><span class="line">  |--- vfs_caches_init()    </span><br><span class="line">  |      |--- # fs/dentry.c</span><br><span class="line">  |      |--- # 全局变量 struct kmem_cache *names_cachep 分配内存, slab name: names_cache,   对象 4K的char(path_name)</span><br><span class="line">  |      |--- dcache_init()</span><br><span class="line">  |      |      |--- # fs/dcache.c </span><br><span class="line">  |      |      |--- # 全局变量 struct kmem_cache *dentry_cache 分配内存, slab name: dentry,   对象 struct dentry</span><br><span class="line">  |      |--- inode_init()</span><br><span class="line">  |      |      |--- # fs/inode.c</span><br><span class="line">  |      |      |--- # 全局变量 struct kmem_cache *inode_cache 分配内存, slab name: inode_cache,   对象 struct inode</span><br><span class="line">  |      |--- files_init() </span><br><span class="line">  |      |      |--- # fs/file_table.c </span><br><span class="line">  |      |      |--- # 全局变量 struct kmem_cache *filp_cachep 分配内存, slab name: filp,  对象 struct file</span><br><span class="line">  |      |      |--- # 全局变量 struct percpu_counter nr_files初始化</span><br><span class="line">  |      |--- files_maxfiles_init()</span><br><span class="line">  |      |      |--- # fs/file_table.c</span><br><span class="line">  |      |      |--- # 全局变量 struct files_stat_struct files_stat.max_files 初始化</span><br><span class="line">  |      |--- mnt_init()</span><br><span class="line">  |      |      |--- # fs/namespace.c</span><br><span class="line">  |      |      |--- # 全局变量 struct kmem_cache *mnt_cache 分配内存，slab name: mnt_cache, 对象 struct mount</span><br><span class="line">  |      |      |--- # 全局变量 struct hlist_head *mount_hashtable 分配内存(alloc_large_system_hash), name: Mount-cache, 对象 struct hlist_head</span><br><span class="line">  |      |      |--- # 全局变量 struct hlist_head *mountpoint_hashtable 分配内存(alloc_large_system_hash), name: Mountpoint-cache, 对象 struct hlist_head</span><br><span class="line">  |      |      |--- kernfs_init()</span><br><span class="line">  |      |      |      |--- # fs/kernfs/mount.c</span><br><span class="line">  |      |      |      |--- # 全局变量  kernfs_node_cache 分配slab内存，name: kernfs_node_cache, 对象 struct kernfs_node</span><br><span class="line">  |      |      |      |--- # 全局变量  kernfs_iattrs_cache 分配slab内存，name: kernfs_iattrs_cache, 对象 struct kernfs_iattrs</span><br><span class="line">  |      |      |--- sysfs_init()</span><br><span class="line">  |      |      |      |--- # fs/sysfs/mount.c</span><br><span class="line">  |      |      |      |--- kernfs_create_root()  # 创建一个新的kernfs层次结构，返回值保存在全局变量 struct kernfs_root *sysfs_root</span><br><span class="line">  |      |      |      |--- # 全局变量 struct kernfs_node *sysfs_root_kn 初始化为 sysfs_root-&gt;kn </span><br><span class="line">  |      |      |      |--- register_filesystem(&amp;sysfs_fs_type)  # 注册文件系统，名称 sysfs</span><br><span class="line">  |      |      |--- kobject_create_and_add(&quot;fs&quot;, NULL)</span><br><span class="line">  |      |      |      |--- # lib/kobject.c</span><br><span class="line">  |      |      |      |--- # 创建一个结构kobject，并将其注册到sysfs中，呈现为fs目录，返回值保存在全局变量struct kobject *fs_kobj中</span><br><span class="line">  |      |      |--- shmem_init()</span><br><span class="line">  |      |      |      |--- # mm/shmem.c</span><br><span class="line">  |      |      |      |--- # 全局变量 shmem_inode_cachep 分配slab内存， name: shmem_inode_cache, 对象 struct shmem_inode_info</span><br><span class="line">  |      |      |      |--- register_filesystem(&amp;shmem_fs_type)</span><br><span class="line">  |      |      |      |--- kern_mount(&amp;shmem_fs_type)</span><br><span class="line">  |      |      |      |      |--- # fs/namespace.c</span><br><span class="line">  |      |      |      |      |--- # 返回值保存在全局变量 struct vfsmount *shm_mnt 中</span><br><span class="line">  |      |      |--- init_rootfs()</span><br><span class="line">  |      |      |      |--- # init/do_mounts.c</span><br><span class="line">  |      |      |      |--- # 根据条件设置全局变量 bool is_tmpfs的值是否为ture， 该变量在 rootfs_init_fs_context 中使用</span><br><span class="line">  |      |      |--- init_mount_tree()  # 安装rootfs文件系统， 见下面单独展开</span><br><span class="line">  |      |--- bdev_cache_init()</span><br><span class="line">  |      |      |--- # block/bdev.c</span><br><span class="line">  |      |      |--- # 全局变量 bdev_cachep 分配slab内存， name： bdev_cache， 对象 struct bdev_inode</span><br><span class="line">  |      |      |--- register_filesystem(&amp;bd_type)</span><br><span class="line">  |      |--- chdev_init()  # fs/char_dev.c  全局变量 struct kobj_map *cdev_map 分配内存（kmalloc）并初始化</span><br><span class="line">  |--- arch_call_rest_init()</span><br><span class="line">         |--- rest_init()</span><br><span class="line">         |      |--- kernel_thread(kernel_init, NULL, CLONE_FS)</span><br><span class="line">         |      |      |--- kernel_init()</span><br><span class="line">         |      |      |      |--- kernel_init_freeable()</span><br><span class="line">         |      |      |      |      |--- do_basic_setup()</span><br><span class="line">         |      |      |      |      |      |--- driver_init()</span><br><span class="line">         |      |      |      |      |      |--- do_initcalls()</span><br><span class="line">         |      |      |      |      |      |      |--- rootfs_initcall(populate_rootfs)</span><br><span class="line">         |      |      |      |      |      |      |      |--- do_populate_rootfs()</span><br><span class="line">         |      |      |      |      |      |      |      |      |--- # init/initramfs.c unpack_to_rootfs 解压initrd到rootfs </span><br><span class="line">         |      |      |      |--- run_init_process(ramdisk_execute_command) # 执行rootfs中的 /init 程序</span><br></pre></td></tr></table></figure><p>init_mount_tree()函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function">init <span class="title">init_mount_tree</span><span class="params">(<span class="keyword">void</span>)</span>        <span class="meta"># fs/namespace.c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vfsmount</span> *<span class="title">mnt</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mount</span> *<span class="title">m</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mnt_namespace</span> *<span class="title">ns</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">root</span>;</span></span><br><span class="line"></span><br><span class="line">    # 挂在rootfs文件系统，期间会创建super_block</span><br><span class="line">    mnt = vfs_kern_mount(&amp;rootfs_fs_type, <span class="number">0</span>, <span class="string">"rootfs"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(mnt))</span><br><span class="line">        panic(<span class="string">"Can't create rootfs"</span>);</span><br><span class="line"></span><br><span class="line">    # 创建<span class="keyword">namespace</span></span><br><span class="line">    ns = alloc_mnt_ns(&amp;init_user_ns, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(ns))</span><br><span class="line">        panic(<span class="string">"Can't allocate initial namespace"</span>);</span><br><span class="line">    m = real_mount(mnt);</span><br><span class="line">    m-&gt;mnt_ns = ns;</span><br><span class="line">    ns-&gt;root = m;</span><br><span class="line">    ns-&gt;mounts = <span class="number">1</span>;</span><br><span class="line">    list_add(&amp;m-&gt;mnt_list, &amp;ns-&gt;<span class="built_in">list</span>);</span><br><span class="line">    init_task.nsproxy-&gt;mnt_ns = ns;</span><br><span class="line">    get_mnt_ns(ns);</span><br><span class="line"></span><br><span class="line">    root.mnt = mnt;</span><br><span class="line">    root.dentry = mnt-&gt;mnt_root;</span><br><span class="line">    mnt-&gt;mnt_flags |= MNT_LOCKED;</span><br><span class="line"></span><br><span class="line">    # 将根目录和当前工作目录都设为rootfs文件系统根目录，即init_task进程可以看见整个内核根文件系统。</span><br><span class="line">    # init_task进程创建子进程时，其根目录和当前工作目录信息会传递给子进程。</span><br><span class="line">    set_fs_pwd(current-&gt;fs, &amp;root);     <span class="meta"># current-&gt;fs-&gt;pwd = root</span></span><br><span class="line">    set_fs_root(current-&gt;fs, &amp;root);    <span class="meta"># current-&gt;fs-&gt;root = root</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vfs_kern_mount()的主要流程 创建fs_context -&gt; 创建super_block -&gt; 创建inode -&gt; 创建dentry -&gt; 创建vfs_mount/mount<br>此时内核还不存在根文件系统，因此无法关联挂载点。<br>实际上此时创建的rootfs文件系统根目录项，就是初始内核根文件系统的根目录项。<br>此时rootfs文件系统的内容为空，内核在启动后期，初始化子系统时调用<strong><code>populate_rootfs()</code></strong>函数将initramfs中的内容解压至rootfs文件系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vfs_kern_mount(type: &amp;rootfs_fs_type, flags: 0, name: &quot;rootfs&quot;, data: NULL)</span><br><span class="line">  |--- struct fs_context *fc;</span><br><span class="line">  |--- struct vfsmount *mnt;</span><br><span class="line">  |--- fc = fs_context_for_mount(rootfs_fs_type, 0);</span><br><span class="line">  |       |--- alloc_fs_context(rootfs_fs_type, reference: NULL, 0, 0, FS_CONTEXT_FOR_MOUNT);</span><br><span class="line">  |       |      |--- fc-&gt;fs_type-&gt;init_fs_context(fc);  //rootfs_init_fs_context</span><br><span class="line">  |       |      |      |--- ramfs_init_fs_context(fc);</span><br><span class="line">  |       |      |      |      |--- fc-&gt;ops = &amp;ramfs_context_ops;</span><br><span class="line">  |--- mnt = fc_mount(fc);</span><br><span class="line">  |       |--- vfs_get_tree(fc);</span><br><span class="line">  |       |      |--- fc-&gt;ops-&gt;get_tree(fc); // ramfs_context_ops-&gt;get_tree -&gt; ramfs_get_tree</span><br><span class="line">  |       |      |      |--- ramfs_get_tree(fc);</span><br><span class="line">  |       |      |      |      |--- get_tree_nodev(fc, ramfs_fill_super);</span><br><span class="line">  |       |      |      |      |      |--- vfs_get_super(fc, vfs_get_independent_super, fill_super);</span><br><span class="line">  |       |      |      |      |      |      |--- struct super_block *sb = sget_fc(fc, test, set_anon_super_fc);</span><br><span class="line">  |       |      |      |      |      |      |      |--- # fs/super.c 根据fs_context 创建super_block</span><br><span class="line">  |       |      |      |      |      |      |--- fill_super(sb, fc); -&gt; ramfs_fill_super(sb, fc);</span><br><span class="line">  |       |      |      |      |      |      |      |--- struct inode *inode = ramfs_get_inode()  # fs/ramfs/inode 创建inode</span><br><span class="line">  |       |--- vfs_create_mount(fc);</span><br><span class="line">  |       |      |--- struct mount *mnt = alloc_vfsmnt(fc-&gt;source ?: &quot;none&quot;);</span><br><span class="line">  |       |      |--- return &amp;mnt-&gt;mnt;</span><br><span class="line">  |--- return mnt;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_context_operations</span> <span class="title">ramfs_context_ops</span> = &#123;</span>   <span class="meta"># fs/ramfs/inode.c</span></span><br><span class="line">    .<span class="built_in">free</span>        = ramfs_free_fc,</span><br><span class="line">    .parse_param    = ramfs_parse_param,</span><br><span class="line">    .get_tree    = ramfs_get_tree,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rootfs_init_fs_context</span><span class="params">(struct fs_context *fc)</span>    <span class="meta"># init/do_mounts.c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (IS_ENABLED(CONFIG_TMPFS) &amp;&amp; is_tmpfs)</span><br><span class="line">        <span class="keyword">return</span> shmem_init_fs_context(fc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ramfs_init_fs_context(fc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> <span class="title">rootfs_fs_type</span> = &#123;</span>      <span class="meta"># init/do_mounts.c</span></span><br><span class="line">    .name        = <span class="string">"rootfs"</span>,</span><br><span class="line">    .init_fs_context = rootfs_init_fs_context,</span><br><span class="line">    .kill_sb    = kill_litter_super,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>系统日志中可以看到相关的初始化打印信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[    0.123936] Dentry cache hash table entries: 1048576 (order: 11, 8388608 bytes, linear)</span><br><span class="line">[    0.123936] Inode-cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)</span><br><span class="line">[    0.811286] Mount-cache hash table entries: 16384 (order: 5, 131072 bytes, linear)</span><br><span class="line">[    0.815888] Mountpoint-cache hash table entries: 16384 (order: 5, 131072 bytes, linear)</span><br><span class="line">[    1.150965] devtmpfs: initialized</span><br><span class="line">[   10.327085] VFS: Disk quotas dquot_6.6.0</span><br><span class="line">[   10.328635] VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)</span><br><span class="line">[   11.294724] Trying to unpack rootfs image as initramfs...</span><br><span class="line">[   15.765063] Freeing initrd memory: 104932K</span><br><span class="line">[   16.347904] Run /init as init process</span><br></pre></td></tr></table></figure></p><h2 id="常用的文件系统"><a href="#常用的文件系统" class="headerlink" title="常用的文件系统"></a>常用的文件系统</h2><h3 id="ramfs"><a href="#ramfs" class="headerlink" title="ramfs"></a>ramfs</h3><p>基于内存的简易文件系统类型，是完全基于虚拟文件系统数据结构实例的文件系统，文件系统没有大小限制，文件内容不能交换至外部交换区</p><h3 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h3><p>ramfs文件系统类型的增强版，对文件大小进行限制，文件内容可交换至交换区。需选择<code>CONFIG_TMPFS</code>配置选项，不仅可用于内核根文件系统，还可用于进程间通信的共享内存机制等</p><h3 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h3><p>内核启动时的初始根文件系统类型，可以是ramfs或tmpfs其中之一。内核在以下条件同时都成立时选择tmpfs作为初始根文件系统类型，否则选用ramfs文件系统类型：<br>（1）选择了<code>CONFIG_TMPFS</code>配置选项，支持tmpfs文件系统<br>（2）命令行参数<code>rootfstype=tmpfs</code>或未定义<br>（3）命令行参数<code>root=</code>未定义</p><blockquote><p>该判断逻辑在 init_rootfs() 函数中<br>命令行参数可以通过/proc/cmdline 或 /boot/grub/grub.cfg 文件中查看</p></blockquote><h3 id="initramfs"><a href="#initramfs" class="headerlink" title="initramfs"></a>initramfs</h3><p>保存初始根文件系统内容，它是一个.cpio类型的文件，链接内核时保存在内核镜像的初始化段中。内核在do_basic_setup()函数中，初始化子系统时调用populate_rootfs()函数（/init/initramfs.c）将initramfs的内容解压至根文件系统中。initramf具有默认的内容（/usr/），用户可通过配置选项指定编入其中的文件夹，编译内核时会将指文件夹的内容编译入initramfs内，目标文件格式为.cpio。使用initramfs传递根文件系统内容需要选择<code>BLK_DEV_INITRD</code>配置选项，并指定”initrd=    xxx”。</p><h3 id="procfs"><a href="#procfs" class="headerlink" title="procfs"></a>procfs</h3><h3 id="sysfs"><a href="#sysfs" class="headerlink" title="sysfs"></a>sysfs</h3><p>sysfs是一个基于内存的文件系统，它的作用是将内核信息以文件的方式提供给用户程序使用。sysfs 文件系统被挂载在 /sys 挂载点上。</p><h3 id="devtmpfs"><a href="#devtmpfs" class="headerlink" title="devtmpfs"></a>devtmpfs</h3><h3 id="xfs"><a href="#xfs" class="headerlink" title="xfs"></a>xfs</h3><h3 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h3><h2 id="进程与文件系统的关联"><a href="#进程与文件系统的关联" class="headerlink" title="进程与文件系统的关联"></a>进程与文件系统的关联</h2><p>每个进程有一个根目录和当前工作目录（由fs_struct结构体表示），这两个目录指向内核根文件系统中的一个目录。根目录是进程能看见内核根文件系统的起点，也就是说此目录以上的部分对进程不可见，进程只能看到此目录以下的部分。进程能看到的文件系统是内核根文件系统的一部分。当前工作目录，即在不指定的情况下，进程在当前工作目录下搜索、打开文件等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> filesystem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crash</title>
      <link href="/2023/01/14/kernel/crash/"/>
      <url>/2023/01/14/kernel/crash/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ubuntu 版本: Ubuntu 22.04.1 LTS   5.15.0-58.64-generic 5.15.74</p></blockquote><h2 id="crash白皮书"><a href="#crash白皮书" class="headerlink" title="crash白皮书"></a><a href="https://crash-utility.github.io/crash_whitepaper.html" target="_blank" rel="noopener">crash白皮书</a></h2><h2 id="crash-github"><a href="#crash-github" class="headerlink" title="crash github"></a><a href="https://github.com/crash-utility/crash" target="_blank" rel="noopener">crash github</a></h2><h2 id="Ubuntu安装Kernel-debuginfo"><a href="#Ubuntu安装Kernel-debuginfo" class="headerlink" title="Ubuntu安装Kernel-debuginfo"></a>Ubuntu安装Kernel-debuginfo</h2><h3 id="配置安装源"><a href="#配置安装源" class="headerlink" title="配置安装源"></a>配置安装源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace$ cat &lt;&lt;EOF | sudo tee /etc/apt/sources.list.d/ddebs.list</span><br><span class="line">deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse</span><br><span class="line">#deb http://ddebs.ubuntu.com $(lsb_release -cs)-security main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse</span><br><span class="line">EOF</span><br><span class="line">baoze@baoze:~/workspace$ sudo apt update   #### 更新时提示没有公钥无法验证签名，需要添加公钥信息</span><br><span class="line">......</span><br><span class="line">W: GPG error: http://ddebs.ubuntu.com jammy Release: The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY C8CAB6595FDFF622</span><br><span class="line">E: The repository &apos;http://ddebs.ubuntu.com jammy Release&apos; is not signed.</span><br><span class="line">N: Updating from such a repository can&apos;t be done securely, and is therefore disabled by default.</span><br><span class="line">N: See apt-secure(8) manpage for repository creation and user configuration details.</span><br><span class="line">......</span><br><span class="line">baoze@baoze:~/workspace$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622</span><br><span class="line">baoze@baoze:~/workspace$ sudo apt update</span><br><span class="line">baoze@baoze:~/workspace$ sudo apt install linux-image-unsigned-$(uname -r)-dbgsym</span><br></pre></td></tr></table></figure><h3 id="直接下载安装"><a href="#直接下载安装" class="headerlink" title="直接下载安装"></a>直接下载安装</h3><p>到网站 <code>http://ddebs.ubuntu.com/pool/main/l/linux/</code> 下载对应的debug-info包，然后进行安装，<code>vmlinux</code>默认安装在<code>/usr/lib/debug/boot/vmlinux-5.15.0-58-generic</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace$ wget http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-unsigned-5.15.0-58-generic-dbgsym_5.15.0-58.64_amd64.ddeb</span><br><span class="line">baoze@baoze:~/workspace$ sudo dpkg -i linux-image-unsigned-5.15.0-58-generic-dbgsym_5.15.0-58.64_amd64.ddeb</span><br><span class="line">baoze@baoze:~/workspace$ sudo crash /usr/lib/debug/boot/vmlinux-5.15.0-58-generic </span><br><span class="line"></span><br><span class="line">crash 8.0.0</span><br><span class="line">Copyright (C) 2002-2021  Red Hat, Inc.</span><br><span class="line">Copyright (C) 2004, 2005, 2006, 2010  IBM Corporation</span><br><span class="line">Copyright (C) 1999-2006  Hewlett-Packard Co</span><br><span class="line">Copyright (C) 2005, 2006, 2011, 2012  Fujitsu Limited</span><br><span class="line">Copyright (C) 2006, 2007  VA Linux Systems Japan K.K.</span><br><span class="line">Copyright (C) 2005, 2011, 2020-2021  NEC Corporation</span><br><span class="line">Copyright (C) 1999, 2002, 2007  Silicon Graphics, Inc.</span><br><span class="line">Copyright (C) 1999, 2000, 2001, 2002  Mission Critical Linux, Inc.</span><br><span class="line">Copyright (C) 2015, 2021  VMware, Inc.</span><br><span class="line">This program is free software, covered by the GNU General Public License,</span><br><span class="line">and you are welcome to change it and/or distribute copies of it under</span><br><span class="line">certain conditions.  Enter &quot;help copying&quot; to see the conditions.</span><br><span class="line">This program has absolutely no warranty.  Enter &quot;help warranty&quot; for details.</span><br><span class="line"> </span><br><span class="line">GNU gdb (GDB) 10.2</span><br><span class="line">Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-pc-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      KERNEL: /usr/lib/debug/boot/vmlinux-5.15.0-58-generic</span><br><span class="line">    DUMPFILE: /proc/kcore</span><br><span class="line">        CPUS: 2</span><br><span class="line">        DATE: Sat Jan 14 03:00:56 UTC 2023</span><br><span class="line">      UPTIME: 00:33:55</span><br><span class="line">LOAD AVERAGE: 0.77, 0.64, 0.56</span><br><span class="line">       TASKS: 441</span><br><span class="line">    NODENAME: baoze</span><br><span class="line">     RELEASE: 5.15.0-58-generic</span><br><span class="line">     VERSION: #64-Ubuntu SMP Thu Jan 5 11:43:13 UTC 2023</span><br><span class="line">     MACHINE: x86_64  (2399 Mhz)</span><br><span class="line">      MEMORY: 8 GB</span><br><span class="line">         PID: 3333</span><br><span class="line">     COMMAND: &quot;crash&quot;</span><br><span class="line">        TASK: ffff9a01d1994b00  [THREAD_INFO: ffff9a01d1994b00]</span><br><span class="line">         CPU: 1</span><br><span class="line">       STATE: TASK_RUNNING (ACTIVE)</span><br><span class="line"></span><br><span class="line">crash&gt;</span><br></pre></td></tr></table></figure><h2 id="安装crash"><a href="#安装crash" class="headerlink" title="安装crash"></a>安装crash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace$ sudo apt install crash</span><br><span class="line">baoze@baoze:~/workspace$ sudo crash /usr/lib/debug/boot/vmlinux-5.15.0-58-generic </span><br><span class="line"></span><br><span class="line">crash 8.0.0</span><br><span class="line">Copyright (C) 2002-2021  Red Hat, Inc.</span><br><span class="line">Copyright (C) 2004, 2005, 2006, 2010  IBM Corporation</span><br><span class="line">Copyright (C) 1999-2006  Hewlett-Packard Co</span><br><span class="line">Copyright (C) 2005, 2006, 2011, 2012  Fujitsu Limited</span><br><span class="line">Copyright (C) 2006, 2007  VA Linux Systems Japan K.K.</span><br><span class="line">Copyright (C) 2005, 2011, 2020-2021  NEC Corporation</span><br><span class="line">Copyright (C) 1999, 2002, 2007  Silicon Graphics, Inc.</span><br><span class="line">Copyright (C) 1999, 2000, 2001, 2002  Mission Critical Linux, Inc.</span><br><span class="line">Copyright (C) 2015, 2021  VMware, Inc.</span><br><span class="line">This program is free software, covered by the GNU General Public License,</span><br><span class="line">and you are welcome to change it and/or distribute copies of it under</span><br><span class="line">certain conditions.  Enter &quot;help copying&quot; to see the conditions.</span><br><span class="line">This program has absolutely no warranty.  Enter &quot;help warranty&quot; for details.</span><br><span class="line"> </span><br><span class="line">GNU gdb (GDB) 10.2</span><br><span class="line">Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-pc-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      KERNEL: /usr/lib/debug/boot/vmlinux-5.15.0-58-generic</span><br><span class="line">    DUMPFILE: /proc/kcore</span><br><span class="line">        CPUS: 2</span><br><span class="line">        DATE: Sat Jan 14 03:00:56 UTC 2023</span><br><span class="line">      UPTIME: 00:33:55</span><br><span class="line">LOAD AVERAGE: 0.77, 0.64, 0.56</span><br><span class="line">       TASKS: 441</span><br><span class="line">    NODENAME: baoze</span><br><span class="line">     RELEASE: 5.15.0-58-generic</span><br><span class="line">     VERSION: #64-Ubuntu SMP Thu Jan 5 11:43:13 UTC 2023</span><br><span class="line">     MACHINE: x86_64  (2399 Mhz)</span><br><span class="line">      MEMORY: 8 GB</span><br><span class="line">         PID: 3333</span><br><span class="line">     COMMAND: &quot;crash&quot;</span><br><span class="line">        TASK: ffff9a01d1994b00  [THREAD_INFO: ffff9a01d1994b00]</span><br><span class="line">         CPU: 1</span><br><span class="line">       STATE: TASK_RUNNING (ACTIVE)</span><br><span class="line"></span><br><span class="line">crash&gt;</span><br></pre></td></tr></table></figure><h2 id="crash常用调试命令"><a href="#crash常用调试命令" class="headerlink" title="crash常用调试命令"></a>crash常用调试命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>help <command></td><td>查看&lt;某个命令&gt;帮助信息</td></tr><tr><td>log</td><td>查看系统的日志</td></tr><tr><td>bt</td><td>查看堆栈信息</td></tr><tr><td>set <pid></pid></td><td>切换调试进程</td></tr><tr><td>struct task_struct ffff8b7df3cdae00 -x</td><td>把指定地址的内容以task_struct结构体解析打印，如果不带地址会显示结构体定义和大小</td></tr><tr><td>dis -r ffffffff9a6010ae</td><td>dis命令进行返汇编，查看对应地址的代码逻辑</td></tr><tr><td>ps</td><td>查看所有进程信息</td></tr><tr><td>mod</td><td>查看当前加载的module，通过其他参数也可以加载对应的module</td></tr><tr><td>files</td><td>查看打开的文件信息</td></tr><tr><td>p init_task</td><td>查看init_task变量的值</td></tr><tr><td>vm</td><td>查看虚拟内存</td></tr><tr><td>list</td><td>查看链表信息，可以遍历数据结构中的链表数据</td></tr></tbody></table><h3 id="list命令使用"><a href="#list命令使用" class="headerlink" title="list命令使用"></a>list命令使用</h3><blockquote><p>list [[-o] offset][-e end][-[s|S] struct[.member[,member] [-l offset]] -[x|d]] [-r|-B] [-h [-O head_offset]|-H] start</p></blockquote><p>list命令解析链表的内容。内核中链表的方式通常有两种</p><ul><li>包含<code>next</code>指针的单链表</li><li>使用<code>struct list_head</code>的双链表</li></ul><p><code>-o</code>参数： 结构体中执行<code>next</code>指针的偏移量（默认为0），通常可以采用<code>struct.member</code>来表示。<code>-o</code>可以省略输入<br><code>-e</code>参数： list的结束地址，通常情况下crash根据链表的规则自动结束<br><code>-s</code>参数： 需要输出的结构体中的成员，采用<code>struct.member1,member2</code>来表示，需要输出多个成员时，用<code>,</code>隔开。如果不输入该参数，则只打印地址信息。<br><code>-S</code>参数： 类似于<code>-s</code>，但不是解析gdb输出，而是直接从内存中读取成员值，因此该命令对于1-、2-、4-和8字节成员的工作速度要快得多<br><code>-x</code>参数： 将默认输出格式改为十六进制格式<br><code>-d</code>参数： 使用十进制格式覆盖默认输出格式<br><code>-r</code>参数： 对于一个链接到list_head结构的列表，使用“prev”指针而不是“next”，以相反的顺序遍历列表<br><code>start</code>参数： 第一个数据结构的地址。可以用十六进制的形式表示，也可以用表达式求值为一个地址，它取决于-h或-h选项是否在前面<br><code>-h start</code>参数： 包含嵌入list_head的数据结构的地址。<br><code>-H start</code>参数： list_head结构的地址，通常是外部独立的list_head()的地址。</p><p>示例一</p><p>全局变量<code>struct file_system_type file_systems</code>通过<code>next</code>指针来保存下一个文件系统的类型的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct file_system_type &#123;</span><br><span class="line">  struct file_system_type * next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; p file_systems</span><br><span class="line">file_systems = $5 = (struct file_system_type *) 0xffffffffa3065620 &lt;sysfs_fs_type&gt;</span><br><span class="line">crash&gt; list file_system_type.next -s file_system_type.name,fs_flags 0xffffffffa3065620</span><br><span class="line">ffffffffa3065620</span><br><span class="line">  name = 0xffffffffa264a1c8 &quot;sysfs&quot;,</span><br><span class="line">  fs_flags = 8,</span><br><span class="line">ffffffffa300b760</span><br><span class="line">  name = 0xffffffffa267e0ef &quot;tmpfs&quot;,</span><br><span class="line">  fs_flags = 8200,</span><br><span class="line">ffffffffa30aebc0</span><br><span class="line">  name = 0xffffffffa260b14a &quot;bdev&quot;,</span><br><span class="line">  fs_flags = 0,</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>示例二：</p><p>全局变量<code>super_blocks</code>是<code>struct list_head</code>类型，链表中保存的是<code>struct super_block</code>类型的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static LIST_HEAD(super_blocks);</span><br><span class="line">struct super_block &#123;</span><br><span class="line">struct list_heads_list;</span><br><span class="line">  struct file_system_type*s_type;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; p super_blocks</span><br><span class="line">super_blocks = $7 = &#123;</span><br><span class="line">  next = 0xffff9a01c004b800,</span><br><span class="line">  prev = 0xffff9a01cbe74800</span><br><span class="line">&#125;</span><br><span class="line">crash&gt; list super_block.s_list -s super_block.s_type -H super_blocks</span><br><span class="line">ffff9a01c004b800</span><br><span class="line">  s_type = 0xffffffffa300b760 &lt;shmem_fs_type&gt;,</span><br><span class="line">ffff9a01c004c000</span><br><span class="line">  s_type = 0xffffffffa2e1aea0 &lt;rootfs_fs_type&gt;,</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>示例三：</p><p>struct super_block中有个成员 <code>struct list_head s_mounts</code>，该成员作为链表头，通过<code>struct mount-&gt;mnt_instance</code>成员挂了<code>struct mount</code>结构体。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">crash&gt;</span><span class="bash"> list -o mount.mnt_instance -s mount.mnt_mp,mnt_mountpoint -O super_block.s_mounts -h 0xffff90ab00b06800</span></span><br><span class="line">ffff90ab001ff3c0</span><br><span class="line">  mnt_mp = 0x0,</span><br><span class="line">  mnt_mountpoint = 0xffff90ab00440240,</span><br><span class="line">ffff90ab00b2cc80</span><br><span class="line">  mnt_mp = 0xffff90ab00b30d00,</span><br><span class="line">  mnt_mountpoint = 0xffff90ab00440840,</span><br><span class="line">ffff90ab00b2c640</span><br><span class="line">  mnt_mp = 0xffff90ab01293640,</span><br><span class="line">  mnt_mountpoint = 0xffff90ab1bb3e600,</span><br><span class="line">ffff90ab1ac48280</span><br><span class="line">  mnt_mp = 0xffff90ab01293640,</span><br><span class="line">  mnt_mountpoint = 0xffff90ab1bb3e600,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> crash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu系统使用总结</title>
      <link href="/2023/01/14/ubuntu/ubuntu/"/>
      <url>/2023/01/14/ubuntu/ubuntu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ubuntu 版本: Ubuntu 22.04.1 LTS   5.15.0-58.64-generic 5.15.74</p></blockquote><h2 id="官网wiki"><a href="#官网wiki" class="headerlink" title="官网wiki"></a><a href="https://wiki.ubuntu.com/" target="_blank" rel="noopener">官网wiki</a></h2><h2 id="crash调试"><a href="#crash调试" class="headerlink" title="crash调试"></a><a href="/2023/01/14/kernel/crash">crash调试</a></h2><h2 id="查看包内容"><a href="#查看包内容" class="headerlink" title="查看包内容"></a>查看包内容</h2><p>ddeb包: <code>dpkg-deb -c xxx.deb</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace$ dpkg-deb -c ./linux-image-unsigned-5.15.0-58-generic-dbgsym_5.15.0-58.64_amd64.ddeb </span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/boot/</span><br><span class="line">-rw-r--r-- root/root 737158008 2023-01-05 11:07 ./usr/lib/debug/boot/vmlinux-5.15.0-58-generic</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/modules/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/modules/5.15.0-58-generic/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/modules/5.15.0-58-generic/kernel/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/modules/5.15.0-58-generic/kernel/arch/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/modules/5.15.0-58-generic/kernel/arch/x86/</span><br><span class="line">drwxr-xr-x root/root         0 2023-01-05 11:07 ./usr/lib/debug/lib/modules/5.15.0-58-generic/kernel/arch/x86/crypto/</span><br><span class="line">-rw-r--r-- root/root    258513 2023-01-05 11:07 ./usr/lib/debug/lib/modules/5.15.0-58-generic/kernel/arch/x86/crypto/aegis128-aesni.ko</span><br></pre></td></tr></table></figure></p><h2 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h2><p>修改 <code>/etc/apt/apt.conf.d/10periodic</code> 和 <code>/etc/apt/apt.conf.d/20auto-upgrades</code> 文件，将所有值修改为 0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~$ cat /etc/apt/apt.conf.d/20auto-upgrades </span><br><span class="line">APT::Periodic::Update-Package-Lists &quot;1&quot;;</span><br><span class="line">APT::Periodic::Unattended-Upgrade &quot;1&quot;;</span><br><span class="line">baoze@baoze:~$ cat /etc/apt/apt.conf.d/10periodic </span><br><span class="line">APT::Periodic::Update-Package-Lists &quot;1&quot;;</span><br><span class="line">APT::Periodic::Download-Upgradeable-Packages &quot;0&quot;;</span><br><span class="line">APT::Periodic::AutocleanInterval &quot;0&quot;;</span><br></pre></td></tr></table></figure><h2 id="确认ubuntu使用的上游内核版本"><a href="#确认ubuntu使用的上游内核版本" class="headerlink" title="确认ubuntu使用的上游内核版本"></a>确认ubuntu使用的上游内核版本</h2><p>方法一：<br>查看 <code>/proc/verison_signature</code> 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~$ cat /proc/version_signature </span><br><span class="line">Ubuntu 5.15.0-58.64-generic 5.15.74</span><br></pre></td></tr></table></figure></p><p>第一个字段总是<code>Ubuntu</code>，第二个字段表示 <code>Ubuntu kernel version</code>，第三个字段表示 <code>Ubuntu依赖的上游kernel主干版本</code> </p><p>方法二：<br>在ubuntu的kernel git中查看对应tag的Makefile文件<br><a href="https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/jammy/tree/Makefile?h=Ubuntu-5.15.0-58.64" target="_blank" rel="noopener">https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/jammy/tree/Makefile?h=Ubuntu-5.15.0-58.64</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># SPDX-License-Identifier: GPL-2.0</span><br><span class="line">VERSION = 5</span><br><span class="line">PATCHLEVEL = 15</span><br><span class="line">SUBLEVEL = 74</span><br><span class="line">EXTRAVERSION =</span><br><span class="line">NAME = Trick or Treat</span><br></pre></td></tr></table></figure><h2 id="apt常用命令"><a href="#apt常用命令" class="headerlink" title="apt常用命令"></a>apt常用命令</h2><p>apt remove –auto-remove gcc-aarch64-linux-gnu 自动卸载gcc-aarch64-linux-gnu软件及依赖gcc-aarch64-linux-gnu的软件</p><h2 id="kvm环境配置"><a href="#kvm环境配置" class="headerlink" title="kvm环境配置"></a><a href="/2023/02/04/ubuntu/kvm-config">kvm环境配置</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel 进程初始化</title>
      <link href="/2023/01/05/kernel/kernel-thread-init/"/>
      <url>/2023/01/05/kernel/kernel-thread-init/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内核版本： 5.15.86</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> init </tag>
            
            <tag> processing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内核代码阅读与调试</title>
      <link href="/2022/12/18/kernel/kernel-read-tool/"/>
      <url>/2022/12/18/kernel/kernel-read-tool/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境: Ubuntu 22.04.1<br>编译kernel版本: 5.15.86</p></blockquote><h2 id="官网资料"><a href="#官网资料" class="headerlink" title="官网资料"></a>官网资料</h2><h3 id="clangd官网"><a href="#clangd官网" class="headerlink" title="clangd官网"></a><a href="https://clangd.llvm.org/" target="_blank" rel="noopener">clangd官网</a></h3><h3 id="busybox官网"><a href="#busybox官网" class="headerlink" title="busybox官网"></a><a href="https://busybox.net/" target="_blank" rel="noopener">busybox官网</a></h3><h3 id="qemu官网最新文档"><a href="#qemu官网最新文档" class="headerlink" title="qemu官网最新文档"></a><a href="https://www.qemu.org/docs/master/" target="_blank" rel="noopener">qemu官网最新文档</a></h3><h3 id="qemu-6-2-0文档"><a href="#qemu-6-2-0文档" class="headerlink" title="qemu 6.2.0文档"></a><a href="https://qemu.readthedocs.io/en/v6.2.0/about/index.html" target="_blank" rel="noopener">qemu 6.2.0文档</a></h3><h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><p>vscode + RemoteSSH插件/WSL插件 + clangd插件 + 编译数据库</p><p>编译数据库采用bear工具，在执行内核编译的make命令前添加bear命令即可（编译kernel前，先使用make menuconfig选择各种特性）。</p><p>注意clangd与vscode默认推荐的microsoft的c/c++插件<code>C/C++ Extension Pack</code>有冲突，如果有安装该插件，请先禁用。<br>clangd依赖后台的<code>clangd server</code>，通常情况下vscode会自动提示下载。</p><p>clangd配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--compile-commands-dir=$&#123;workspaceFolder&#125;</span><br><span class="line">--background-index</span><br><span class="line">--completion-style=detailed</span><br><span class="line">--header-insertion=never</span><br><span class="line">-log=info</span><br></pre></td></tr></table></figure></p><h2 id="qemu模拟内核启动"><a href="#qemu模拟内核启动" class="headerlink" title="qemu模拟内核启动"></a>qemu模拟内核启动</h2><h3 id="安装交叉编译工具链"><a href="#安装交叉编译工具链" class="headerlink" title="安装交叉编译工具链"></a>安装交叉编译工具链</h3><p><code>apt install gcc-aarch64-linux-gnu</code> (x86环境编译kernel的arm64版本需要)</p><blockquote><p>在下面编译 busybox 和 kernel的 arm64版本时，在编译前要先配置<code>ARCH</code>和<code>CROSS_COMPILE</code>环境变量<br>export ARCH=arm64<br>export CROSS_COMPILE=aarch64-linux-gnu-</p></blockquote><h3 id="busybox的编译"><a href="#busybox的编译" class="headerlink" title="busybox的编译"></a>busybox的编译</h3><p>busybox官网下载稳定版本，如<a href="https://busybox.net/downloads/busybox-1.33.2.tar.bz2" target="_blank" rel="noopener">https://busybox.net/downloads/busybox-1.33.2.tar.bz2</a> ，解压后执行 <code>make menuconfig</code>，并修改为编译静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Settings  ---&gt;</span><br><span class="line">    [*] Build BusyBox as a static binary (no shared libs)</span><br></pre></td></tr></table></figure><p>然后执行<code>make</code>和<code>make install</code>命令，会在busybox根目录下生成 <code>_install</code> 目录，rootfs就是基于该目录制作。</p><h3 id="x86-64的rootfs制作"><a href="#x86-64的rootfs制作" class="headerlink" title="x86_64的rootfs制作"></a>x86_64的rootfs制作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86$ dd if=/dev/zero of=rootfs.img bs=1M count=10</span><br><span class="line">10+0 records in</span><br><span class="line">10+0 records out</span><br><span class="line">10485760 bytes (10 MB, 10 MiB) copied, 0.00630844 s, 1.7 GB/s</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86$ mkfs.ext4 rootfs.img </span><br><span class="line">mke2fs 1.46.5 (30-Dec-2021)</span><br><span class="line">Discarding device blocks: done                            </span><br><span class="line">Creating filesystem with 2560 4k blocks and 2560 inodes</span><br><span class="line"></span><br><span class="line">Allocating group tables: done                            </span><br><span class="line">Writing inode tables: done                            </span><br><span class="line">Creating journal (1024 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br><span class="line"></span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86$ mkdir fs</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86$ sudo mount -o loop rootfs.img fs</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86$ cd fs</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ sudo cp -rf ../_install/* . -rf</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ sudo mkdir proc dev etc home mnt</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ sudo cp -r ../examples/bootfloppy/etc/* etc/</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ cat etc/fstab </span><br><span class="line">proc/procprocdefaults    00</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ cat etc/inittab </span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::respawn:-/bin/sh</span><br><span class="line">tty2::askfirst:-/bin/sh</span><br><span class="line">::ctrlaltdel:/bin/umount -a -r</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ cat etc/profile </span><br><span class="line"># /etc/profile: system-wide .profile file for the Bourne shells</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line">echo -n &quot;Processing /etc/profile... &quot;</span><br><span class="line"># no-op</span><br><span class="line">echo &quot;Done&quot;</span><br><span class="line">echo</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ cat etc/init.d/rcS </span><br><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">/bin/mount -a</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ sudo chmod 777 ./* -R</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ cat &lt;&lt; EOF &gt; etc/profile</span><br><span class="line">#!/bin/sh</span><br><span class="line">export HOSTNAME=qemu</span><br><span class="line">export USER=root</span><br><span class="line">export HOME=/root</span><br><span class="line">export PS1=&quot;[$USER@$HOSTNAME \W]# &quot;</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line">LD_LIBRARY_PATH=/lib:/usr/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH LD_LIBRARY_PATH</span><br><span class="line">EOF</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86/fs$ cd ..</span><br><span class="line">baoze@baoze:~/workspace/debug/busybox-1.33.2-x86$ sudo umount fs</span><br></pre></td></tr></table></figure><p>rootfs.imag就是x86的rootfs文件</p><h3 id="arm64的rootfs制作"><a href="#arm64的rootfs制作" class="headerlink" title="arm64的rootfs制作"></a>arm64的rootfs制作</h3><p>在busybox的<code>_install</code>目录中，创建 etc dev lib 目录</p><p>创建etc/profile文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">export HOSTNAME=qemu</span><br><span class="line">export USER=root</span><br><span class="line">export HOME=/root</span><br><span class="line">export PS1=&quot;[$USER@$HOSTNAME \W]# &quot;</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line">LD_LIBRARY_PATH=/lib:/usr/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure></p><p>创建etc/inittab文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::respawn:-/bin/sh</span><br><span class="line">::askfirst:-/bin/sh</span><br><span class="line">::ctrlaltdel:/bin/umount -a -r</span><br></pre></td></tr></table></figure></p><p>创建etc/fstab文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#device  mount-point    type     options   dump   fsck order</span><br><span class="line">proc /proc proc defaults 0 0</span><br><span class="line">tmpfs /tmp tmpfs defaults 0 0</span><br><span class="line">sysfs /sys sysfs defaults 0 0</span><br><span class="line">tmpfs /dev tmpfs defaults 0 0</span><br><span class="line">debugfs /sys/kernel/debug debugfs defaults 0 0</span><br><span class="line">kmod_mount /mnt 9p trans=virtio 0 0</span><br></pre></td></tr></table></figure></p><p>创建etc/init.d/rcS文件，并修改文件权限为<code>777</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /sys</span><br><span class="line">mkdir -p /tmp</span><br><span class="line">mkdir -p /proc</span><br><span class="line">mkdir -p /mnt</span><br><span class="line">/bin/mount -a</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line">echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br></pre></td></tr></table></figure></p><p>在<code>dev</code>目录下执行<code>mknod console c 5 1</code>命令</p><p>拷贝lib文件 <code>cp -a /usr/aarch64-linux-gnu/lib/*.so* lib/</code></p><blockquote><p>arm64的rootfs采用initramfs方式编译到内核文件中，剩余操作在内核时执行</p></blockquote><h3 id="x86-64内核编译"><a href="#x86-64内核编译" class="headerlink" title="x86_64内核编译"></a>x86_64内核编译</h3><p>拷贝ubuntu系统的config文件到内核根目录 <code>cp /boot/config-5.15.0-58-generic .config</code></p><p>执行 <code>make menuconfig</code> 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Processor type and features--&gt;</span><br><span class="line">  [ ]   Randomize the address of the kernel image (KASLR)  </span><br><span class="line">Kernel hacking  ---&gt;</span><br><span class="line">  [*] Kernel debugging</span><br><span class="line">  Compile-time checks and compiler options  ---&gt;</span><br><span class="line">      [*] Compile the kernel with debug info</span><br><span class="line">      [*] Provide GDB scripts for kernel debugging</span><br><span class="line">-*- Cryptographic API  ---&gt;</span><br><span class="line">  Certificates for signature checking  ---&gt; </span><br><span class="line">    ()    Additional X.509 keys for default system keyrin</span><br><span class="line">    ()    X.509 certificates to be preloaded into the system blacklist keyring</span><br></pre></td></tr></table></figure><p>执行 <code>make</code> 命令</p><h3 id="arm64内核编译"><a href="#arm64内核编译" class="headerlink" title="arm64内核编译"></a>arm64内核编译</h3><p>通过<code>make defconfig</code>获取arm64的默认配置</p><p>执行<code>make menuconfig</code>修改编译配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">General setup  ---&gt;</span><br><span class="line">  [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support</span><br><span class="line">  (./root) Initramfs source file(s)</span><br><span class="line">  (0)   User ID to map to 0 (user root)</span><br><span class="line">  (0)   Group ID to map to 0 (group root)</span><br><span class="line">Kernel Features  ---&gt;</span><br><span class="line">  [ ] Randomize the address of the kernel image</span><br><span class="line">Kernel hacking  ---&gt;</span><br><span class="line">  [*] Kernel debugging</span><br><span class="line">  Compile-time checks and compiler options  ---&gt;</span><br><span class="line">      [*] Compile the kernel with debug info</span><br><span class="line">      [*] Provide GDB scripts for kernel debugging</span><br></pre></td></tr></table></figure></p><p>在根目录创建<code>root</code>目录，将busybox中<code>_install</code>目录内容拷贝过来，然后执行<code>make</code>即可。</p><blockquote><p>如果dev目录下的conole文件copy失败，需要在root下重新创建。</p></blockquote><h3 id="qemu启动内核"><a href="#qemu启动内核" class="headerlink" title="qemu启动内核"></a>qemu启动内核</h3><ul><li><p>安装qemu，<code>apt install qemu-system-arm qemu-system-x86_64</code>，版本为6.2.0</p></li><li><p>qemu启动arm内核</p><p><code>qemu-system-aarch64 -m 2G -smp 1 -cpu cortex-a57 -machine virt --nographic -kernel arch/arm64/boot/Image -append &quot;rdinit=/linuxrc nokaslr console=ttyAMA0 loglevel=8&quot;</code></p></li><li><p>qemu启动x86_64内核</p><p><code>qemu-system-x86_64 -m 2G -smp 1 -kernel arch/x86_64/boot/bzImage -hda ./rootfs.img  -append &quot;root=/dev/sda console=ttyS0&quot; -nographic</code></p></li></ul><h2 id="内核调试"><a href="#内核调试" class="headerlink" title="内核调试"></a>内核调试</h2><p>安装多架构的gdb <code>apt install gdb-multiarch</code></p><h3 id="qemu启动内核时调试"><a href="#qemu启动内核时调试" class="headerlink" title="qemu启动内核时调试"></a>qemu启动内核时调试</h3><p>qemu启动内核时，添加 <code>-S</code> 和 <code>-s</code> 参数 <code>qemu-system-aarch64 -m 512M -smp 1 -cpu cortex-a57 -machine virt -kernel arch/arm64/boot/Image -append &quot;rdinit=/linuxrc nokaslr earlyprintk console=ttyAMA0 loglevel=8&quot; -nographic -S -s</code></p><blockquote><p>-s shorthand for -gdb tcp::1234<br>-S freeze CPU at startup (use ‘c’ to start execution)</p></blockquote><p>打开另外一个窗口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baoze@baoze:~/workspace/kernel/linux-5.15.86-arm64$ gdb-multiarch -tui ./vmlinux</span><br><span class="line">(gdb)target remote localhost:1234</span><br><span class="line">(gbd)b start_kernel</span><br><span class="line">(gdb)c</span><br></pre></td></tr></table></figure></p><p><img src="/img/gdb-multiarch-simple001.png" alt="gdb-multiarch-simple001"></p><h3 id="qemu正常启动内核后调试"><a href="#qemu正常启动内核后调试" class="headerlink" title="qemu正常启动内核后调试"></a>qemu正常启动内核后调试</h3><p>qemu根据命令（不带<code>-S</code> 和 <code>-s</code>）正常启动内核后，可以通过组合键 <code>ctrl + a -&gt; c</code> 进入qemu的monitor控制台，然后执行<code>gdbserver</code>命令</p><p>在另外一个窗口中执行gdb-multiarch命令，然后链接到qemu端就可以了，操作同前。</p><blockquote><p>从monitor控制台切换回终端也是 <code>ctrl + a -&gt; c</code>组合键</p></blockquote><h3 id="vscode调试"><a href="#vscode调试" class="headerlink" title="vscode调试"></a>vscode调试</h3><p>安装<code>C/C++</code>插件，在.vscode/launch.json中添加以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"configurations"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"kernel debug"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">          <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">          <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/vmlinux"</span>,</span><br><span class="line">          <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">          <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">          <span class="attr">"miDebuggerPath"</span>:<span class="string">"/usr/bin/gdb-multiarch"</span>,</span><br><span class="line">          <span class="attr">"miDebuggerServerAddress"</span>: <span class="string">"localhost:1234"</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vscode启动debug，打断点后，再执行qemu命令。</p><blockquote><p>C/C++ 插件与clangd插件冲突，使用C/C++插件的时候要先将clangd插件禁用。</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="手动在远端服务器安装clangd服务"><a href="#手动在远端服务器安装clangd服务" class="headerlink" title="手动在远端服务器安装clangd服务"></a>手动在远端服务器安装clangd服务</h3><p>下载<a href="https://github.com/clangd/clangd/releases/latest" target="_blank" rel="noopener">最新的clangd软件</a>，如clangd-linux-15.0.6.zip</p><p>在远端机器解压后，在vscode的clangd配置中，修改<code>Clangd: Path</code>到远端机器的解压目录，如/usr/local/clangd-15.0.6/bin/clangd。</p><h3 id="arm64版本编译数据库不生效，clangd日志打印E-02-47-40-208-Failed-to-prepare-a-compiler-instance-unknown-target-ABI-39-lp64-39"><a href="#arm64版本编译数据库不生效，clangd日志打印E-02-47-40-208-Failed-to-prepare-a-compiler-instance-unknown-target-ABI-39-lp64-39" class="headerlink" title="arm64版本编译数据库不生效，clangd日志打印E[02:47:40.208] Failed to prepare a compiler instance: unknown target ABI &#39;lp64&#39;"></a>arm64版本编译数据库不生效，clangd日志打印<code>E[02:47:40.208] Failed to prepare a compiler instance: unknown target ABI &#39;lp64&#39;</code></h3><p>修改compile_commands.json文件，删除<code>&quot;-mabi=lp64&quot;,</code>行，然后reload window。</p><h3 id="qemu模拟nvme设备"><a href="#qemu模拟nvme设备" class="headerlink" title="qemu模拟nvme设备"></a>qemu模拟nvme设备</h3><ul><li><p>添加nvme设备，并自动创建一个nvme namespace关联到nvme设备上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -drive file=nvm.img,if=none,id=nvm  -device nvme,serial=deadbeef,drive=nvm</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0n1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0</span><br></pre></td></tr></table></figure></li><li><p>添加nvme设备，创建两个namesapce关联到该设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -device nvme,id=nvme-ctrl-0,serial=deadbeef -drive file=nvm-1.img,if=none,id=nvm-1 -device nvme-ns,drive=nvm-1 -drive file=nvm-2.img,if=none,id=nvm-2 -device nvme-ns,drive=nvm-2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0n1</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0n2</span><br><span class="line">/sys/devices/virtual/nvme-subsystem</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0</span><br></pre></td></tr></table></figure></li><li><p>添加两个nvme设备，分别创建一个namespace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -device nvme,id=nvme-ctrl-0,serial=deadbeef-ctrl0 -drive file=nvm-1.img,if=none,id=nvm-1 -device nvme-ns,drive=nvm-1 -device nvme,id=nvme-ctrl-1,serial=deadbeef-ctrl1 -drive file=nvm-2.img,if=none,id=nvm-2 -device nvme-ns,drive=nvm-2</span><br></pre></td></tr></table></figure></li><li><p>添加两个nvme设备，其中一个nvme设备包含一个namespace，另一个包含两个namespace，两个nvme设备分属于两个subsystem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -device nvme,id=nvme-ctrl-0,serial=deadbeef-ctrl0 -drive file=nvm-1.img,if=none,id=nvm-1 -device nvme-ns,drive=nvm-1 -device nvme,id=nvme-ctrl-1,serial=deadbeef-ctrl1 -drive file=nvm-2.img,if=none,id=nvm-2 -device nvme-ns,drive=nvm-2  -drive file=nvm-3.img,if=none,id=nvm-3 -device nvme-ns,drive=nvm-3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0n1</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1/nvme1n2</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1/nvme1n1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys1/nvme1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0</span><br></pre></td></tr></table></figure></li><li><p>添加两个nvme设备，其中一个nvme设备包含一个namespace，另一个包含两个namespace，两个nvme设备属于同一个subsystem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -device nvme-subsys,id=nvme-subsys-0,nqn=subsys0 -device nvme,id=nvme-ctrl-0,serial=deadbeef-ctrl0,subsys=nvme-subsys-0 -drive file=nvm-1.img,if=none,id=nvm-1 -device nvme-ns,drive=nvm-1 -device nvme,id=nvme-ctrl-1,serial=deadbeef-ctrl1,subsys=nvme-subsys-0 -drive file=nvm-2.img,if=none,id=nvm-2 -device nvme-ns,drive=nvm-2  -drive file=nvm-3.img,if=none,id=nvm-3 -device nvme-ns,drive=nvm-3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0c0n1</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0c0n2</span><br><span class="line">/sys/devices/pci0000:00/0000:00:04.0/nvme/nvme0/nvme0c0n3</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1/nvme0c1n2</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1/nvme0c1n3</span><br><span class="line">/sys/devices/pci0000:00/0000:00:05.0/nvme/nvme1/nvme0c1n1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0n1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme1</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0n2</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0</span><br><span class="line">/sys/devices/virtual/nvme-subsystem/nvme-subsys0/nvme0n3</span><br></pre></td></tr></table></figure></li></ul><h3 id="qemu中添加fat用于共享目录"><a href="#qemu中添加fat用于共享目录" class="headerlink" title="qemu中添加fat用于共享目录"></a>qemu中添加fat用于共享目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -hdb fat:rw:path-to-shared/shared</span><br></pre></td></tr></table></figure><h3 id="qemu创建ubuntu启动镜像"><a href="#qemu创建ubuntu启动镜像" class="headerlink" title="qemu创建ubuntu启动镜像"></a>qemu创建ubuntu启动镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-img create -f qcow2 ubuntu.qcow2 10G</span><br><span class="line">$ qemu-system-x86_64 -accel kvm -smp 4 -m 8G -boot d -cdrom ../../../iso/ubuntu-22.04.1-live-server-amd64.iso -hda ./ubuntu.qcow2 -vnc :0</span><br><span class="line">$ qemu-system-x86_64 -accel kvm -smp 4 -m 8G -hda ./ubuntu.qcow2 -vnc :0</span><br><span class="line"></span><br><span class="line">#### 采用完整的ubuntu镜像来调试内核</span><br><span class="line">$ qemu-system-x86_64 -smp 4 -m 8G -kernel ./bzImage -initrd ./initrd.img -hda ./ubuntu.qcow2 -append &quot;console=ttyS0 root=/dev/sda2&quot; -nographic</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://howardlau.me/programming/debugging-linux-kernel-with-vscode-qemu.html" target="_blank" rel="noopener">参考0</a><br><a href="https://juejin.cn/post/7113120033324154911" target="_blank" rel="noopener">参考1</a><br><a href="https://cloud.tencent.com/developer/article/2121069" target="_blank" rel="noopener">参考2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> kernel </tag>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取linux系统限制</title>
      <link href="/2022/09/13/c/system-limits/"/>
      <url>/2022/09/13/c/system-limits/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OS: Ubuntu 22.04.1<br>gcc: 11.2.0<br>glibc: 2.35</p></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>资源是有限的，所以在程序运行时，操作系统会对程序的很多行为都做了限制，可以把这些限制内容硬编码到程序中，但是很明显会影响程序的可移植性。因为在不同的场景下，某些限制的大小可能是不一样的。</p><p>系统限制类型可以分为以下两种：</p><ul><li>编译时限制。例如，int类型的最大值取决于硬件和编译器的设计。这种限制通常都记录在头文件中（如&lt;limits.h&gt;）。</li><li>运行时限制。这类限制在程序运行时可能会变化，POSIX标准提供了sysconf()/pathconf()/fpathconf()三个函数来获取运行时限制。</li></ul><blockquote><p>在 shell 中，可以使用 getconf 命令获取特定 UNIX 系统中已然实现的限制和选项。参见<code>man getconf</code></p></blockquote><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">long sysconf(int name);</span><br><span class="line">long pathconf(const char* pathname, int name);</span><br><span class="line">long fpathconf(int fd, int name);</span><br></pre></td></tr></table></figure><ol><li>pathconf和fpathconf的区别: 前者以路径名为参数，后者以文件描述符为参数</li><li>三个函数中的name参数用于标识待查询的系统限制名称。sysconf函数中，name以<code>_SC_</code>开头，pathconf和fpathconf中name以<code>_PC_</code>开头</li><li>三个函数的返回值：<br> 1) 如果name参数无效，函数返回-1，并把errno设置为EINVAL。<br> 2) 如果返回-1，且不改变errno的值，表示该值是不确定的，因此在查询前最好先设置errno为0。<br> 3) 返回&gt;=0的值为正常返回。</li><li>通常情况下，POSIX要求调用sysconf()获取的值在调用进程的生命周期内应保持不变（在linux系统中，有些合理的例外，如进程能够使用setrlimit来修改进程的资源限制）；POSIX没有要求pathconf和fpathconf在进程的生命周期内保持不变。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">$ cat -n 006_sys_limits.c </span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;limits.h&gt;</span><br><span class="line">#include &quot;../util_err.h&quot;</span><br><span class="line"></span><br><span class="line">static void pr_sysconf(char* msg, int name) &#123;</span><br><span class="line">    long val;</span><br><span class="line"></span><br><span class="line">    fputs(msg, stdout);</span><br><span class="line">    errno = 0;</span><br><span class="line">    if ((val = sysconf(name)) &lt; 0) &#123;</span><br><span class="line">        if (errno != 0)&#123;</span><br><span class="line">    if (errno == EINVAL) &#123;</span><br><span class="line">        fputs(&quot; (not supported)\n&quot;, stdout);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        err_sys(&quot;sysconf error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    fputs(&quot; (no limit)\n&quot;, stdout);</span><br><span class="line">&#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot; %ld\n&quot;, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void pr_pathconf(char* msg, char* path, int name) &#123;</span><br><span class="line">    long val;</span><br><span class="line">    </span><br><span class="line">    fputs(msg, stdout);</span><br><span class="line">    errno = 0;</span><br><span class="line"></span><br><span class="line">    if ((val = pathconf(path, name)) &lt; 0) &#123;</span><br><span class="line">        if (errno != 0)&#123;</span><br><span class="line">    if (errno == EINVAL) &#123;</span><br><span class="line">        fputs(&quot; (not supported)\n&quot;, stdout);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        err_sys(&quot;pathconf error, path: %s&quot;, path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    fputs(&quot; (no limit)\n&quot;, stdout);</span><br><span class="line">&#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot; %ld\n&quot;, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    printf(&quot;_POSIX_ARG_MAX: %d\n&quot;, _POSIX_ARG_MAX);</span><br><span class="line">    printf(&quot;_POSIX_OPEN_MAX: %d\n&quot;, _POSIX_OPEN_MAX);</span><br><span class="line">    printf(&quot;_POSIX_CHILD_MAX: %d\n&quot;, _POSIX_CHILD_MAX);</span><br><span class="line">    printf(&quot;-------\n&quot;);</span><br><span class="line">    pr_sysconf(&quot;arg max:&quot;, _SC_ARG_MAX);</span><br><span class="line">    pr_sysconf(&quot;open max:&quot;, _SC_OPEN_MAX);</span><br><span class="line">    pr_sysconf(&quot;child max:&quot;, _SC_CHILD_MAX);</span><br><span class="line">    pr_sysconf(&quot;pagesize:&quot;, _SC_PAGESIZE);</span><br><span class="line">    pr_sysconf(&quot;clock ticks:&quot;, _SC_CLK_TCK);</span><br><span class="line">    pr_sysconf(&quot;phy pages:&quot;, _SC_PHYS_PAGES);</span><br><span class="line">    pr_sysconf(&quot;avphy pages:&quot;, _SC_AVPHYS_PAGES);</span><br><span class="line">    pr_sysconf(&quot;processor conf:&quot;, _SC_NPROCESSORS_CONF);</span><br><span class="line">    pr_sysconf(&quot;processor online:&quot;, _SC_NPROCESSORS_ONLN);</span><br><span class="line"></span><br><span class="line">    printf(&quot;===========\n&quot;);</span><br><span class="line">    pr_pathconf(&quot;name max:&quot;, &quot;.&quot;, _PC_NAME_MAX);</span><br><span class="line">    pr_pathconf(&quot;path max:&quot;, &quot;.&quot;, _PC_PATH_MAX);</span><br><span class="line">    pr_pathconf(&quot;pipe buff:&quot;, &quot;.&quot;, _PC_PIPE_BUF);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;_POSIX_NAME_MAX: %d\n&quot;, _POSIX_NAME_MAX);</span><br><span class="line">    printf(&quot;_POSIX_PATH_MAX: %d\n&quot;, _POSIX_PATH_MAX);</span><br><span class="line">    printf(&quot;_POSIX_PIPE_BUF: %d\n&quot;, _POSIX_PIPE_BUF);</span><br><span class="line">&#125;</span><br><span class="line">$ gcc 006_sys_limits.c ../util_err.c </span><br><span class="line">$ ./a.out </span><br><span class="line">_POSIX_ARG_MAX: 4096</span><br><span class="line">_POSIX_OPEN_MAX: 20</span><br><span class="line">_POSIX_CHILD_MAX: 25</span><br><span class="line">-------</span><br><span class="line">arg max: 2097152</span><br><span class="line">open max: 1024</span><br><span class="line">child max: 15114</span><br><span class="line">pagesize: 4096</span><br><span class="line">clock ticks: 100</span><br><span class="line">phy pages: 995797</span><br><span class="line">avphy pages: 686847</span><br><span class="line">processor conf: 2</span><br><span class="line">processor online: 2</span><br><span class="line">===========</span><br><span class="line">name max: 255</span><br><span class="line">path max: 4096</span><br><span class="line">pipe buff: 4096</span><br><span class="line">_POSIX_NAME_MAX: 14</span><br><span class="line">_POSIX_PATH_MAX: 256</span><br><span class="line">_POSIX_PIPE_BUF: 512</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="运行时限制选项说明"><a href="#运行时限制选项说明" class="headerlink" title="运行时限制选项说明"></a>运行时限制选项说明</h3><p>POSIX标准中，对于各选项定义了一个最小值，要求所有的实现都必须大于等于该值，这些宏定义通常以<code>_POSIX_</code>开头，通常包含在<code>&lt;limits.h&gt;</code>头文件中</p><table><thead><tr><th>限制名称</th><th>name参数</th><th>POSIX最小值</th><th>Ubuntu 22.04.1实际值</th><th>说明</th></tr></thead><tbody><tr><td>ARG_MAX</td><td>_SC_ARG_MAX</td><td>_POSIX_ARG_MAX(4096)</td><td>2097152</td><td>exec函数中argv和环境变量environ的最大字节数</td></tr><tr><td>CHILD_MAX</td><td>_SC_CHILD_MAX</td><td>_POSIX_CHILD_MAX(25)</td><td>15114</td><td>每个real user ID下的最大进程数</td></tr><tr><td>OPEN_MAX</td><td>_SC_OPEN_MAX</td><td>_POSIX_OPEN_MAX(20)</td><td>1024</td><td>每个进程可以同时打开的文件描述符的数量</td></tr><tr><td>PAGESIZE</td><td>_SC_PAGESIZE</td><td>NA</td><td>4096</td><td>系统的页大小，单位byte</td></tr><tr><td>时钟每秒滴答数</td><td>_SC_CLK_TCK</td><td>NA</td><td>100</td><td></td></tr><tr><td></td><td>_SC_NPROCESSORS_CONF</td><td>NA</td><td>无参考意义</td><td>配置的处理器个数</td></tr><tr><td></td><td>_SC_NPROCESSORS_ONLN</td><td>NA</td><td>无参考意义</td><td>当前可获得的处理器个数</td></tr><tr><td></td><td>_SC_PHYS_PAGES</td><td>NA</td><td>无参考意义</td><td>物理内存总page数</td></tr><tr><td></td><td>_SC_AVPHYS_PAGES</td><td>NA</td><td>无参考意义</td><td>当前可获得的物理内存page数</td></tr><tr><td>NAME_MAX</td><td>_PC_NAME_MAX</td><td>_POSIX_NAME_MAX(14)</td><td>255</td><td>针对目录有效，返回该目录下文件命名的最大长度，对于其他文件类型，则未作规定</td></tr><tr><td>PATH_MAX</td><td>_PC_PATH_MAX</td><td>_POSIX_PATH_MAX(256)</td><td>4096</td><td>针对目录有效，返回该目录中相对路径名的最大长度，对于其他文件类型，则未作规定</td></tr><tr><td>PIPE_BUF</td><td>_PC_PIPE_BUF</td><td>_POSIX_PIPE_BUF(512)</td><td>4096</td><td>针对目录、FIFO或管道有效，对于 FIFO 或者管道，返回一个应用于对应FIFO或管道的值。对于目录，返回的值应用于在该目录下创建的任一FIFO的限制值。对于其他文件类型，则未作规定</td></tr></tbody></table><h3 id="不确定的运行时限制"><a href="#不确定的运行时限制" class="headerlink" title="不确定的运行时限制"></a>不确定的运行时限制</h3>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> sysconf </tag>
            
            <tag> pathconf </tag>
            
            <tag> fpathconf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言blog列表</title>
      <link href="/2022/09/11/c/c/"/>
      <url>/2022/09/11/c/c/</url>
      
        <content type="html"><![CDATA[<p><a href="/2022/09/10/c/standard">C语言标准</a><br><a href="/2022/09/11/c/header-search">gcc头文件搜索</a><br><a href="/2022/09/13/c/system-limits">系统限制</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc头文件搜索</title>
      <link href="/2022/09/11/c/header-search/"/>
      <url>/2022/09/11/c/header-search/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OS: Ubuntu 22.04.1<br>gcc: 11.2.0<br>glibc: 2.35</p></blockquote><h3 id="include-“header-h”-与-include-lt-header-h-gt-区别"><a href="#include-“header-h”-与-include-lt-header-h-gt-区别" class="headerlink" title="#include “header.h” 与 #include &lt;header.h&gt; 区别"></a>#include “header.h” 与 #include &lt;header.h&gt; 区别</h3><p><b>#include “header.h” 引入的头文件，默认会首先在 .c 当前目录查找；而#include &lt;header.h&gt; 则不会。</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ cat 004_header_search.c </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;my_header.h&quot;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    printf(&quot;macro: %s\n&quot;, MY_TEST_MACRO_0911);</span><br><span class="line">&#125;</span><br><span class="line">$ cat my_header.h </span><br><span class="line">#ifndef __MY_HEADER__</span><br><span class="line">#define __MY_HEADER__</span><br><span class="line"></span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in current dir&quot;</span><br><span class="line"></span><br><span class="line">#endif //__MY_HEADER__</span><br><span class="line">$ gcc 004_header_search.c </span><br><span class="line">$ ./a.out </span><br><span class="line">macro: in current dir</span><br><span class="line">$ </span><br><span class="line">$ vim 004_header_search.c </span><br><span class="line">$ cat 004_header_search.c </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;my_header.h&gt;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    printf(&quot;macro: %s\n&quot;, MY_TEST_MACRO_0911);</span><br><span class="line">&#125;</span><br><span class="line">$ gcc 004_header_search.c </span><br><span class="line">004_header_search.c:2:10: fatal error: my_header.h: No such file or directory</span><br><span class="line">    2 | #include &lt;my_header.h&gt;</span><br><span class="line">      |          ^~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="头文件搜索相关的command-option-和环境变量"><a href="#头文件搜索相关的command-option-和环境变量" class="headerlink" title="头文件搜索相关的command option 和环境变量"></a>头文件搜索相关的command option 和环境变量</h3><ul><li>-I dir: 可以同时指定多个，优先级从左到右，可以使用.表示当前目录(-I. -I/special/include)</li><li>-iquota dir: 只适用于以引号 “” 导入的头文件</li><li>-isystem dir</li><li>-idirafter dir</li><li>CPATH: 可以指定多个，优先级从左到右，冒号分割，适用于C/C++/objc语言；可以包含空的元素(:/special/include)表示当前目录</li><li>C_INCLUDE_PATH: 只适用于C语言</li><li>CPLUS_INCLUDE_PATH: 只适用于C++语言</li><li>OBJC_INCLUDE_PATH: 只适用于objc语言</li></ul><p><strong>查找顺序为：</strong></p><ol><li>对于用 #include “” 引号形式引入的头文件，首先搜索当前程序文件所在的目录，其次再前往 -iquote 选项指定的目录中查找；</li><li>搜索 -I 选项指定的目录</li><li>搜索 CPATH 环境变量指定的目录</li><li>搜索 -isystem 选项指定的目录</li><li>搜索C_INCLUDE_PATH/CPLUS_INCLUDE_PATH/OBJC_INCLUDE_PATH 环境变量指定的目录</li><li>搜索默认的系统路径；<br>  1) /usr/lib/gcc/x86_64-linux-gnu/11/include<br>  2) /usr/local/include/x86_64-linux-gnu<br>  3) /usr/local/include<br>  4) /usr/lib/gcc/x86_64-linux-gnu/11/include-fixed<br>  5) /usr/x86_64-linux-gnu/include<br>  6) /usr/include/x86_64-linux-gnu<br>  7) /usr/include</li><li>搜索-idirafter 选项指定的目录。</li></ol><blockquote><p>如果默认的系统路径或-isystem指定的路径，也被指定在了-I的参数中时，-I里面的不生效。</p></blockquote><h3 id="gcc编译命令查看头文件查找顺序"><a href="#gcc编译命令查看头文件查找顺序" class="headerlink" title="gcc编译命令查看头文件查找顺序"></a>gcc编译命令查看头文件查找顺序</h3><p><strong>gcc 命令的-v参数可以显示编译过程中的调用的程序以及相关的日志信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ cat 004_header_search.c </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;my_header.h&quot;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    printf(&quot;macro: %s\n&quot;, MY_TEST_MACRO_0911);</span><br><span class="line">&#125;</span><br><span class="line">$ ls include |xargs -I dir -t cat include/dir/my_header.h |grep -i macro</span><br><span class="line">cat include/c_include_path/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in c_include_path  dir&quot;</span><br><span class="line">cat include/c_path/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in c_path  dir&quot;</span><br><span class="line">cat include/cplus_include_path/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in cplus_include_path  dir&quot;</span><br><span class="line">cat include/dirafter/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in dirafter dir&quot;</span><br><span class="line">cat include/include_1/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in -I dir1&quot;</span><br><span class="line">cat include/include_2/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in -I dir2&quot;</span><br><span class="line">cat include/objc_include_path/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in objc_include_path  dir&quot;</span><br><span class="line">cat include/quote/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in quote dir&quot;</span><br><span class="line">cat include/system/my_header.h</span><br><span class="line">#define MY_TEST_MACRO_0911   &quot;in system dir&quot;</span><br><span class="line">$ </span><br><span class="line">$ CPATH=./include/c_path/ C_INCLUDE_PATH=./include/c_include_path/ CPLUS_INCLUDE_PATH=./include/cplus_include_path/ OBJC_INCLUDE_PATH=./include/objc_include_path/ gcc 004_header_search.c  -I ./include/include_1/ -I ./include/include_2/ -iquote ./include/quote/ -isystem ./include/system/ -idirafter ./include/dirafter/ -v</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">#include &quot;...&quot; search starts here:</span><br><span class="line"> ./include/quote/</span><br><span class="line">#include &lt;...&gt; search starts here:</span><br><span class="line"> ./include/include_1/</span><br><span class="line"> ./include/include_2/</span><br><span class="line"> ./include/c_path/</span><br><span class="line"> ./include/system/</span><br><span class="line"> ./include/c_include_path/</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/11/include</span><br><span class="line"> /usr/local/include/x86_64-linux-gnu</span><br><span class="line"> /usr/local/include</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/11/include-fixed</span><br><span class="line"> /usr/x86_64-linux-gnu/include</span><br><span class="line"> /usr/include/x86_64-linux-gnu</span><br><span class="line"> /usr/include</span><br><span class="line"> ./include/dirafter/</span><br><span class="line">End of search list.</span><br><span class="line">......</span><br><span class="line">$ </span><br><span class="line">$ CPATH=./include/c_path/ gcc 004_header_search.c  -I ./include/system/ -isystem ./include/system/</span><br><span class="line">$ ./a.out </span><br><span class="line">macro: in c_path  dir</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux内核总结</title>
      <link href="/2022/09/11/kernel/kernel/"/>
      <url>/2022/09/11/kernel/kernel/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kernel.org/" target="_blank" rel="noopener">kernel官网</a><br><a href="https://makelinux.github.io/kernel/map/" target="_blank" rel="noopener">Linux Kernel Map</a><br><a href="https://kernel.org/doc/html/latest/" target="_blank" rel="noopener">The Linux Kernel Documentation(latest))</a><br><a href="https://kernel.org/doc/html/v5.15/" target="_blank" rel="noopener">The Linux Kernel Documentation(v5.15)</a><br><a href="/2022/12/18/kernel/kernel-read-tool">kernel代码阅读工具</a><br><a href="/2023/01/14/kernel/crash">crash调试</a><br><a href="/2023/01/14/kernel/filesystem">文件系统总结</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc的版本确认</title>
      <link href="/2022/09/11/GNU/glibc-version/"/>
      <url>/2022/09/11/GNU/glibc-version/</url>
      
        <content type="html"><![CDATA[<blockquote><p>运行环境为 Ubuntu 22.04</p></blockquote><h4 id="查看系统中安装的libc的软件包"><a href="#查看系统中安装的libc的软件包" class="headerlink" title="查看系统中安装的libc的软件包"></a>查看系统中安装的libc的软件包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -l |grep -i libc-bin</span><br><span class="line">ii  libc-bin      2.35-0ubuntu3.1              amd64        GNU C Library: Binaries</span><br></pre></td></tr></table></figure><h4 id="采用gnu的接口查询"><a href="#采用gnu的接口查询" class="headerlink" title="采用gnu的接口查询"></a>采用gnu的接口查询</h4><blockquote><p>可以通过man gnu_get_libc_version查看接口的详细信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat 003_glibc_verison.c -n</span><br><span class="line">     1#include &lt;stdio.h&gt;</span><br><span class="line">     2#include &lt;gnu/libc-version.h&gt;</span><br><span class="line">     3</span><br><span class="line">     4void main() &#123;</span><br><span class="line">     5    printf(&quot;GNU C library version: %s\n&quot;, gnu_get_libc_version());</span><br><span class="line">     6    printf(&quot;GNU C library release: %s\n&quot;, gnu_get_libc_release());</span><br><span class="line">     7&#125;</span><br><span class="line">$ gcc 003_glibc_verison.c </span><br><span class="line">$ ./a.out </span><br><span class="line">GNU C library version: 2.35</span><br><span class="line">GNU C library release: stable</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="ldd命令"><a href="#ldd命令" class="headerlink" title="ldd命令"></a>ldd命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ldd --version</span><br><span class="line">ldd (Ubuntu GLIBC 2.35-0ubuntu3.1) 2.35</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line">Written by Roland McGrath and Ulrich Drepper.</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="执行libc-so"><a href="#执行libc-so" class="headerlink" title="执行libc.so"></a>执行libc.so</h4><blockquote><p>libc.so是可以直接运行的，如果不能运行，chmod +x添加下执行权限<br>ldd 一个当前系统中 C 库编写的动态可执行程序，可以查找到使用的libc.so的位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ldd `which top`|grep -i libc.so</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f3a024b2000)</span><br><span class="line">$ /lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35.</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 11.2.0.</span><br><span class="line">libc ABIs: UNIQUE IFUNC ABSOLUTE</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> glibc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc总结</title>
      <link href="/2022/09/11/GNU/glibc/"/>
      <url>/2022/09/11/GNU/glibc/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.gnu.org/software/libc/libc.html" target="_blank" rel="noopener">glibc官网</a><br><a href="/2022/09/11/GNU/glibc-version">glibc版本确认</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> glibc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言标准</title>
      <link href="/2022/09/10/c/standard/"/>
      <url>/2022/09/10/c/standard/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.iso.org/standards.html" target="_blank" rel="noopener">ISO</a>: International Organization for Standardization，国际化标准组织<br>IEC: International Electrotechnical Commission，国际电子技术委员会<br>ANSI: American National Standards Institute，美国国家标准学会。ANSI是ISO中代表美国的成员。<br>IEEE: Institute of Electrical and Electronics Engineers，电子和电气工程师学会。<br>POSIX: Portable Operating System Interface，可移植操作系统接口。<br>SUS: Single UNIX Specification，单一UNIX规范。</p></blockquote><h2 id="ISO-C标准"><a href="#ISO-C标准" class="headerlink" title="ISO C标准"></a>ISO C标准</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>ISO C标准现在由ISO/IEC的C程序设计语言国际标准工作组维护和开发，该工作组称为ISO/IEC JTC1/SC22/WG14，简称WG14，<a href="https://open-std.org/jtc1/sc22/wg14/" target="_blank" rel="noopener">WG14项目官网</a>。</p><p>ISO C标准的目的是为了保证C程序的可移植性，使其可以运行在大量不同的操作系统（Unix/linux/windows等）</p><p>ISO C标准定义了C程序设计语言的语法、语义和标准库（见标准第7章）和相关的约束限制。其只定义了C标准函数库的函数原型、函数功能，而并未定义函数的具体实现。标准库的实现由其他组织实现，如<a href="https://www.gnu.org/software/libc/" target="_blank" rel="noopener">GNU C Library</a>(glibc，当然glibc还包含了除ISO C标准库之外的自己的扩展内容)。</p><h3 id="演进历史"><a href="#演进历史" class="headerlink" title="演进历史"></a>演进历史</h3><ul><li>ANSI X3.159-1989 (C89/ANSI C)：1983年ANSI成立了一个X3J11委员会，来创立C语言的标准，因为这个标准在1989年发布，所以也简称C89标准。有些人也把C89成为 ANSI C。</li><li>ISO/IEC 9899:1990 Programming languages — C (C90)：1990年，ISO采纳了ANSI的C89标准，然后做了一些修改再发布，就变成ISO的C90标准了，因此，C89和C90通常指同一个标准。</li><li>ISO/IEC 9899:1999 Programming languages — C (C99)</li><li>ISO/IEC 9899:2011 Information technology — Programming languages — C (C11)：C11相对于C99的修改，参见标准文档的前言部分，<a href="https://blog.csdn.net/u012611878/article/details/79090793" target="_blank" rel="noopener">他人总结</a></li><li>ISO/IEC 9899:2018 Information technology — Programming languages — C (C17/C18)：C17只是解决了针对C11报告的许多缺陷，还包含TC（技术勘误 ISO/IEC 9899:2011/Cor 1:2012），并未引入新的语言功能。</li></ul><h3 id="查看和指定使用的C标准-gcc"><a href="#查看和指定使用的C标准-gcc" class="headerlink" title="查看和指定使用的C标准(gcc)"></a>查看和指定使用的C标准(gcc)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ cat 002_standard.c  -n</span><br><span class="line">     1#include &lt;stdio.h&gt;</span><br><span class="line">     2</span><br><span class="line">     3void main() &#123;</span><br><span class="line">     4    printf(&quot;C standard: %ld\n&quot;, __STDC_VERSION__);</span><br><span class="line">     5&#125;</span><br><span class="line">$ gcc 002_standard.c </span><br><span class="line">$ ./a.out </span><br><span class="line">C standard: 201710</span><br><span class="line">$ gcc --version</span><br><span class="line">gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0</span><br><span class="line">Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">$ gcc -std=c11 002_standard.c </span><br><span class="line">$ ./a.out </span><br><span class="line">C standard: 201112</span><br><span class="line">$ gcc -std=gnu11 002_standard.c </span><br><span class="line">$ ./a.out </span><br><span class="line">C standard: 201112</span><br><span class="line">$ gcc -std=c99 002_standard.c </span><br><span class="line">$ ./a.out </span><br><span class="line">C standard: 199901</span><br><span class="line">$ gcc -std=c89 002_standard.c   // __STDC_VERSION__是在 ISO/IEC 9899/AMD1:1995 中才引入的</span><br><span class="line">002_standard.c: In function ‘main’:</span><br><span class="line">002_standard.c:4:33: error: ‘__STDC_VERSION__’ undeclared (first use in this function)</span><br><span class="line">    4 |     printf(&quot;C standard: %ld\n&quot;, __STDC_VERSION__);</span><br><span class="line">      |                                 ^~~~~~~~~~~~~~~~</span><br><span class="line">002_standard.c:4:33: note: each undeclared identifier is reported only once for each function it appears in</span><br><span class="line"></span><br><span class="line">// 查看gcc默认的标准</span><br><span class="line">$ gcc -E -dM - &lt;/dev/null |grep -i std|sort</span><br><span class="line">#define __GNUC_STDC_INLINE__ 1</span><br><span class="line">#define __STDC__ 1</span><br><span class="line">#define __STDC_HOSTED__ 1</span><br><span class="line">#define __STDC_IEC_559__ 1</span><br><span class="line">#define __STDC_IEC_559_COMPLEX__ 1</span><br><span class="line">#define __STDC_IEC_60559_BFP__ 201404L</span><br><span class="line">#define __STDC_IEC_60559_COMPLEX__ 201404L</span><br><span class="line">#define __STDC_ISO_10646__ 201706L</span><br><span class="line">#define _STDC_PREDEF_H 1</span><br><span class="line">#define __STDC_UTF_16__ 1</span><br><span class="line">#define __STDC_UTF_32__ 1</span><br><span class="line">#define __STDC_VERSION__ 201710L</span><br><span class="line"></span><br><span class="line">$ gcc -std=c11 -E -dM - &lt;/dev/null |grep -i std|sort</span><br><span class="line">#define __GNUC_STDC_INLINE__ 1</span><br><span class="line">#define __STDC__ 1</span><br><span class="line">#define __STDC_HOSTED__ 1</span><br><span class="line">#define __STDC_IEC_559__ 1</span><br><span class="line">#define __STDC_IEC_559_COMPLEX__ 1</span><br><span class="line">#define __STDC_IEC_60559_BFP__ 201404L</span><br><span class="line">#define __STDC_IEC_60559_COMPLEX__ 201404L</span><br><span class="line">#define __STDC_ISO_10646__ 201706L</span><br><span class="line">#define _STDC_PREDEF_H 1</span><br><span class="line">#define __STDC_UTF_16__ 1</span><br><span class="line">#define __STDC_UTF_32__ 1</span><br><span class="line">#define __STDC_VERSION__ 201112L</span><br></pre></td></tr></table></figure><h3 id="ISO-C标准头文件"><a href="#ISO-C标准头文件" class="headerlink" title="ISO C标准头文件"></a>ISO C标准头文件</h3><table><thead><tr><th>序号</th><th>头文件</th><th>C99</th><th>C11</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>&lt;assert.h&gt;</td><td>Y</td><td>Y</td><td>程序断言</td></tr><tr><td>2</td><td>&lt;complex.h&gt;</td><td>Y</td><td>Y</td><td>复数运算</td></tr><tr><td>3</td><td>&lt;ctype.h&gt;</td><td>Y</td><td>Y</td><td>字符分类（如isalpha）和映射功能（如toupper）</td></tr><tr><td>4</td><td>&lt;errno.h&gt;</td><td>Y</td><td>Y</td><td>错误码</td></tr><tr><td>5</td><td>&lt;fenv.h&gt;</td><td>Y</td><td>Y</td><td>浮点环境</td></tr><tr><td>6</td><td>&lt;float.h&gt;</td><td>Y</td><td>Y</td><td>浮点常量以及特性</td></tr><tr><td>7</td><td>&lt;inttypes.h&gt;</td><td>Y</td><td>Y</td><td>包含并扩展了stdint.h</td></tr><tr><td>8</td><td>&lt;iso646.h&gt;</td><td>Y</td><td>Y</td><td>逻辑和位操作运算符的宏形式（如and/xor)</td></tr><tr><td>9</td><td>&lt;limits.h&gt;</td><td>Y</td><td>Y</td><td>整数类型的极限值（如INT_MAX/INT_MIN)</td></tr><tr><td>10</td><td>&lt;locale.h&gt;</td><td>Y</td><td>Y</td><td>本地化相关（如LC_TIME/setlocale())</td></tr><tr><td>11</td><td>&lt;math.h&gt;</td><td>Y</td><td>Y</td><td>浮点实数的数学函数、相关宏和类型</td></tr><tr><td>12</td><td>&lt;setjmp.h&gt;</td><td>Y</td><td>Y</td><td>非局部性的goto跳转（setjmp()/longjmp()）</td></tr><tr><td>13</td><td>&lt;signal.h&gt;</td><td>Y</td><td>Y</td><td>信号</td></tr><tr><td>14</td><td>&lt;stdarg.h&gt;</td><td>Y</td><td>Y</td><td>可变参数</td></tr><tr><td>15</td><td>&lt;stdbool.h&gt;</td><td>Y</td><td>Y</td><td>bool类型(bool/true/false宏)</td></tr><tr><td>16</td><td>&lt;stddef.h&gt;</td><td>Y</td><td>Y</td><td>类型（ptrdiff_t/size_t/wchar_t）和宏（NULL/offsetof）</td></tr><tr><td>17</td><td>&lt;stdint.h&gt;</td><td>Y</td><td>Y</td><td>特定位长的整数类型</td></tr><tr><td>18</td><td>&lt;stdio.h&gt;</td><td>Y</td><td>Y</td><td>标准输入输出(I/O)库</td></tr><tr><td>19</td><td>&lt;stdlib.h&gt;</td><td>Y</td><td>Y</td><td>实用程序库函数</td></tr><tr><td>20</td><td>&lt;string.h&gt;</td><td>Y</td><td>Y</td><td>字符串相关函数</td></tr><tr><td>21</td><td>&lt;tgmath.h&gt;</td><td>Y</td><td>Y</td><td>包含math.h和complex.h，并且定义类型特定的宏</td></tr><tr><td>22</td><td>&lt;time.h&gt;</td><td>Y</td><td>Y</td><td>时间和日期</td></tr><tr><td>23</td><td>&lt;wchar.h&gt;</td><td>Y</td><td>Y</td><td>扩充的多字节和宽字符支持</td></tr><tr><td>24</td><td>&lt;wctype.h&gt;</td><td>Y</td><td>Y</td><td>宽字符分类与转换</td></tr><tr><td>25</td><td>&lt;stdalign.h&gt;</td><td>N</td><td>Y</td><td>结构体对其相关功能</td></tr><tr><td>26</td><td>&lt;stdatomic.h&gt;</td><td>N</td><td>Y</td><td>多线程中公共享数据的原子操作</td></tr><tr><td>27</td><td>&lt;stdnoreturn.h&gt;</td><td>N</td><td>Y</td><td>定义宏noreturn</td></tr><tr><td>28</td><td>&lt;threads.h&gt;</td><td>N</td><td>Y</td><td>多线程支持</td></tr><tr><td>29</td><td>&lt;uchar.h&gt;</td><td>N</td><td>Y</td><td>处理unicode字符</td></tr></tbody></table><h2 id="POSIX-1-标准"><a href="#POSIX-1-标准" class="headerlink" title="POSIX.1 标准"></a>POSIX.1 标准</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>POSIX是由IEEE制订的标准族。最初POSIX指的只是IEEE标准1003.1-1988（操作系统接口），后来则扩展成包括很多标记为1003的标准及标准草案，如shell和实用程序（1003.2）。其正式称呼为 IEEE 1003，而国际标准名称为 ISO/IEC 9945。</p><p>这些标准涵盖了很多方面，比如Unix系统调用的C语言接口、shell程序和工具、线程及网络编程。</p><p>这些标准的制定目的是为了提升应用程序在不同UNIX系统环境之间的可移植性。他是ISO C的超集。同样的，POSIX也只是定义接口，而不定义具体的实现。</p><p>POSIX标准族中的1003.1也被称为POSIX.1标准。</p><p>POSIX.2标准（ISO/IEC 9945-2:1993）主要是对shell和包括C编译器命令行接口在内的各种Unix工具进行了标准化。</p><h3 id="演进"><a href="#演进" class="headerlink" title="演进"></a>演进</h3><blockquote><p>X/Open 公司是由多家国际计算机厂商所组成的联盟，他们的目的是为了制定出一套全面而又一致的开放系统标准。1993年，该公司获得Unix的商标权。</p></blockquote><blockquote><p>OSF: Open System Software Foundation，开放系统软件基金会。OSF是20世纪80年代末UNIX纷争期间成立的两家厂商联盟之一。OSF的主要成员包括 Digital、 IBM、 HP、 Apollo、 Bull、 Nixdorf 和 Siemens。 OSF 成立的主要目的是为了应对由 AT&amp;T（ UNIX 的发明者）和 SUN 公司（ UNIX 工作站市场的领跑者）结盟所带来的威胁。</p></blockquote><blockquote><p>1996年，X/Open和OSF合并成立 The Open Group。</p></blockquote><blockquote><p>1999年，出于修订并加强POSIX标准和SUS规范的目的，IEEE、Open Group以及 ISO/IEC联合技术委员会共同成立了austin公共标准修订工作组(<a href="http://www.opengroup.org/austin/" target="_blank" rel="noopener">Common Standards Revision Group, CSRG</a>)，现在POSIX标准仍由austin Group维护。</p></blockquote><h4 id="POSIX-1"><a href="#POSIX-1" class="headerlink" title="POSIX.1"></a>POSIX.1</h4><ul><li><strong>IEEE std 1003.1-1988: POSIX.1的第一个版本</strong></li><li><strong>ISO/IEC 9945-1:1990|IEEE std 1003.1-1990: 1990年 IEEE std 1003.1-1988被采纳为ISO标准</strong></li><li><strong>IEEE std 1003.1-1996|ISO/IEC 9945-1:1996: 包含内容见下面列表</strong><ul><li>IEEE std 1003.1-1990</li><li>IEEE std 1003.1b-1993（对基本POSIX标准的实时性扩展）</li><li>IEEE std 1003.1c-1995（pthreads）</li><li>IEEE std 1003.1i-1995（实时技术勘误表）</li></ul></li><li><strong>IEEE std 1003.1-2001: 包含的内容很多，见下面列表</strong><ul><li>IEEE std 1003.1-1996</li><li>IEEE P1003.1a草案（系统接口修正）</li><li>IEEE std 1003.1d-1999（高级实时扩展）</li><li>IEEE std 1003.1j-2000（更多高级实时扩展）</li><li>IEEE std 1003.1q-2000（事件跟踪方面的扩展）</li><li>部分IEEE std 1003.1g-2000（协议无关接口）</li><li>ISO/IEC 9945-2:1993：即IEEE std 1003.2-1993（POSIX.2）</li><li>IEEE P1003.2b草案（shell及实用程序的修正）</li><li>IEEE std 1003.2d-1994（批处理扩展）</li><li>SUSv2：包括系统接口定义（第五版）、命令和实用程序（第五版）、系统接口和头文件（第五版）</li><li>Open Group 技术标准，网络服务，5.2发行版</li><li>ISO/IEC 9899:1999（C99）</li></ul></li><li><strong>IEEE std 1003.1-2008|ISO/ICE 9945:2009：该标准基于下面几个标准</strong><ul><li>IEEE std 1003.1-2004</li><li>Open Group技术标准，2006，扩展API集，第1~4部分</li><li>ISO/IEC 9899:1999</li></ul></li></ul><h4 id="XPG-amp-SUS"><a href="#XPG-amp-SUS" class="headerlink" title="XPG &amp; SUS"></a>XPG &amp; SUS</h4><blockquote><p>X/Open公司编纂的 《X/Open Portability Guide》（XPG，X/Open 可移植性指南）是一套基于POSIX 标准的可移植性指导丛书。XPG是X/Open公司的出版物</p></blockquote><blockquote><p>SUS是Open Group公司的出版物。<br>SUS 是POSIX.1标准的一个超集，POSIX.1相当于SUS中的基础规范部分。<br>XSI: X/Open System Interface, X/Open系统接口。<br>POSIX.1中的XSI选项描述了可选的接口，也定义了遵循XSI的实现必须支持POSIX.1的哪些可选部分。只有遵循XSI的实现才能称为UNIX系统。</p></blockquote><ul><li>XPG3: X/Open于1989年发布首个重要版本，是基于IEEE std 1003.1:1988。</li><li>XPG4：X/Open于1992年发布，基于IEEE std 1003.1:1990 和 IEEE std 1003.2:1992</li><li>XPG4v2|SUSv1|UNIX95: X/Open于1994年发布，因为它大约包含了1170个接口，因此也被称为 “Spec 1170”，主要内容包括：<ul><li>X/Open 通用应用环境（Common Application Environment， CAE）第四发行版（前身就是XPG4）</li><li>System V接口定义（System V Interface Definition，SVID）第三版Level 1接口</li><li>OSF应用环境规范（Application Environment Specification， AES）Full Use接口</li></ul></li><li>SUSv2|UNIX98: Open Group于1997年发布</li><li>SUSv3: Open Group于2001年发布，基本规范与IEEE std 1003.1-2001相同，除此之外还包括X/Open Curses第4发行版第2版。SUSv3 规范可在线获得，网址是 <a href="http://www.unix.org/version3/online.html。通过" target="_blank" rel="noopener">http://www.unix.org/version3/online.html。通过</a> SUSv3 认证的 UNIX 实现可被称为 UNIX 03。它的基本规范约有3700页，包含以下4个部分：<ul><li>基本定义（XBD），包含了定义、术语、概念以及对头文件内容的规范。总计提供了84个头文件的规范。</li><li>系统接口（XSH），首先介绍了各种有用的背景信息。主要内容包含对各种函数（在特定的 UNIX 实现中，这些函数要么是作为系统调用，要么是作为库函数来实现的）的定义。总计包括了 1123 个系统接口。</li><li>Shell 和实用工具（XCU），明确定义了 shell 和各种 UNIX 命令的行为。总共定义了160 个实用工具的行为。</li><li>基本原理（XRAT），包括了与前三部分有关的描述性文字和原理说明</li></ul></li><li>SUSv4：Open Group与2008年发布，较之于之先前版本，该标准包含了基本规范以及 XSI 扩展。</li></ul><blockquote><p>SUS(和XPG)标准顺应了相应的POSIX标准，并被组织为POSIX的超集。除了对许多额外的接口作出规范外，SUS标准还将很多被POSIX视为可选的接口和行为规范作为了必选项。</p></blockquote><p>POSIX.1-2001定义了两种规范符合度：</p><ul><li>POSIX规范符合度</li><li>XSI规范符合度。对 UNIX 实现来说，要想完全符合 XSI 规范，除了必须满足 POSIX 规范的所有规定之外，还要提供若干POSIX 规范中的可选接口和行为。只有这一规范符合度达标，才能从 OPEN GROUP获得 UNIX03 称号</li></ul><h4 id="各种标准之间的关系"><a href="#各种标准之间的关系" class="headerlink" title="各种标准之间的关系"></a>各种标准之间的关系</h4><blockquote><p>实线表示标准间的直接过渡，虚线则表示标准间有一定的瓜葛，这无非有两种情况：其一，一个标准被并入了另一标准；其二，一个标准依附于另一个标准。</p></blockquote><p><img src="/img/standard-graph.JPG" alt="各种标准之间的关系"></p><h3 id="查看使用的POSIX-1标准"><a href="#查看使用的POSIX-1标准" class="headerlink" title="查看使用的POSIX.1标准"></a>查看使用的POSIX.1标准</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ getconf _POSIX_VERSION</span><br><span class="line">200809</span><br><span class="line">$ ldd --version |grep -i ldd</span><br><span class="line">ldd (Ubuntu GLIBC 2.35-0ubuntu3.1) 2.35</span><br><span class="line">$ gcc --version |grep -i gcc</span><br><span class="line">gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0</span><br><span class="line">$ cat 002_standard.c </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    printf(&quot;posix standard: %ld\n&quot;, _POSIX_VERSION);</span><br><span class="line">&#125;</span><br><span class="line">$ gcc 002_standard.c </span><br><span class="line">$ ./a.out </span><br><span class="line">posix standard: 200809</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="POSIX-1-2008-标准头文件"><a href="#POSIX-1-2008-标准头文件" class="headerlink" title="POSIX.1-2008 标准头文件"></a>POSIX.1-2008 标准头文件</h3><table><thead><tr><th>序号</th><th>头文件</th><th>必选</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>&lt;aio.h&gt;</td><td></td><td>异步输入和输出</td></tr><tr><td>2</td><td>&lt;arpa/inet.h&gt;</td><td></td><td>互联网相关处理定义</td></tr><tr><td>3</td><td>&lt;cpio.h&gt;</td><td></td><td>cpio archive format宏定义</td></tr><tr><td>4</td><td>&lt;dirent.h&gt;</td><td></td><td>format of directory entries</td></tr><tr><td>5</td><td>&lt;dlfcn.h&gt;</td><td></td><td>动态链接处理</td></tr><tr><td>6</td><td>&lt;fcntl.h&gt;</td><td></td><td>文件控制</td></tr><tr><td>7</td><td>&lt;fmtmsg.h&gt;</td><td></td><td>消息显示格式</td></tr><tr><td>8</td><td>&lt;fnmatch.h&gt;</td><td></td><td>文件名匹配类型</td></tr><tr><td>9</td><td>&lt;ftw.h&gt;</td><td></td><td>文件树遍历</td></tr><tr><td>10</td><td>&lt;glob.h&gt;</td><td></td><td>pathname pattern-matching types</td></tr><tr><td>11</td><td>&lt;grp.h&gt;</td><td></td><td>group structure</td></tr><tr><td>12</td><td>&lt;iconv.h&gt;</td><td></td><td>代码集转换</td></tr><tr><td>13</td><td>&lt;langinfo.h&gt;</td><td></td><td>语言信息常量</td></tr><tr><td>14</td><td>&lt;libgen.h&gt;</td><td></td><td>路径模式匹配（dirname/basename)</td></tr><tr><td>15</td><td>&lt;monetary.h&gt;</td><td></td><td>货币类型与函数</td></tr><tr><td>16</td><td>&lt;mqueue.h&gt;</td><td></td><td>消息队列</td></tr><tr><td>17</td><td>&lt;ndbm.h&gt;</td><td></td><td>数据库操作</td></tr><tr><td>18</td><td>&lt;net/if.h&gt;</td><td></td><td>sockets local interfaces</td></tr><tr><td>19</td><td>&lt;netdb.h&gt;</td><td></td><td>网络数据库操作</td></tr><tr><td>20</td><td>&lt;netinet/in.h&gt;</td><td></td><td>internet address family</td></tr><tr><td>21</td><td>&lt;netinet/tcp.h&gt;</td><td></td><td>tcp协议定义</td></tr><tr><td>22</td><td>&lt;nl_types.h&gt;</td><td></td><td>消息类型</td></tr><tr><td>23</td><td>&lt;poll.h&gt;</td><td></td><td>poll</td></tr><tr><td>24</td><td>&lt;pthread.h&gt;</td><td></td><td>多线程</td></tr><tr><td>25</td><td>&lt;pwd.h&gt;</td><td></td><td>口令文件</td></tr><tr><td>26</td><td>&lt;regex.h&gt;</td><td></td><td>正则表达式</td></tr><tr><td>27</td><td>&lt;sched.h&gt;</td><td></td><td>执行调度</td></tr><tr><td>28</td><td>&lt;search.h&gt;</td><td></td><td>search tables</td></tr><tr><td>29</td><td>&lt;semaphore.h&gt;</td><td></td><td>信号量</td></tr><tr><td>30</td><td>&lt;spawn.h&gt;</td><td></td><td>spawn (ADVANCED REALTIME)</td></tr><tr><td>31</td><td>&lt;strings.h&gt;</td><td></td><td>字符串操作</td></tr><tr><td>32</td><td>&lt;stropts.h&gt;</td><td></td><td></td></tr><tr><td>33</td><td>&lt;sys/ipc.h&gt;</td><td></td><td>XSI 进程间通信</td></tr><tr><td>34</td><td>&lt;sys/mman.h&gt;</td><td></td><td>内存管理</td></tr><tr><td>35</td><td>&lt;sys/msg.h&gt;</td><td></td><td>XSI 消息队列</td></tr><tr><td>36</td><td>&lt;sys/resource.h&gt;</td><td></td><td>XSI 资源操作</td></tr><tr><td>37</td><td>&lt;sys/select.h&gt;</td><td></td><td></td></tr><tr><td>38</td><td>&lt;sys/sem.h&gt;</td><td></td><td>XSI 信号量</td></tr><tr><td>39</td><td>&lt;sys/shm.h&gt;</td><td></td><td>XSI 共享内存</td></tr><tr><td>40</td><td>&lt;sys/socket.h&gt;</td><td></td><td>套接字接口</td></tr><tr><td>41</td><td>&lt;sys/stat.h&gt;</td><td></td><td>文件属性</td></tr><tr><td>42</td><td>&lt;sys/statvfs.h&gt;</td><td></td><td>vfs文件系统信息</td></tr><tr><td>43</td><td>&lt;sys/time.h&gt;</td><td></td><td></td></tr><tr><td>44</td><td>&lt;sys/times.h&gt;</td><td></td><td></td></tr><tr><td>45</td><td>&lt;sys/types.h&gt;</td><td></td><td></td></tr><tr><td>46</td><td>&lt;sys/uio.h&gt;</td><td></td><td>vector I/O操作</td></tr><tr><td>47</td><td>&lt;sys/un.h&gt;</td><td></td><td></td></tr><tr><td>48</td><td>&lt;sys/utsname.h&gt;</td><td></td><td></td></tr><tr><td>49</td><td>&lt;sys/wait.h&gt;</td><td></td><td></td></tr><tr><td>50</td><td>&lt;syslog.h&gt;</td><td></td><td></td></tr><tr><td>51</td><td>&lt;tar.h&gt;</td><td></td><td></td></tr><tr><td>52</td><td>&lt;termios.h&gt;</td><td></td><td></td></tr><tr><td>53</td><td>&lt;trace.h&gt;</td><td></td><td></td></tr><tr><td>54</td><td>&lt;ulimit.h&gt;</td><td></td><td></td></tr><tr><td>55</td><td>&lt;unistd.h&gt;</td><td></td><td></td></tr><tr><td>56</td><td>&lt;utime.h&gt;</td><td></td><td></td></tr><tr><td>57</td><td>&lt;utmpx.h&gt;</td><td></td><td></td></tr><tr><td>58</td><td>&lt;wordexp.h&gt;</td><td></td><td>字扩展类型</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> iso-c </tag>
            
            <tag> posix.1 </tag>
            
            <tag> sus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续交付2.0读书笔记</title>
      <link href="/2020/07/25/reading-notes/continuous-delivery-2-0/"/>
      <url>/2020/07/25/reading-notes/continuous-delivery-2-0/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>精益思想是指导企业根据用户需求，定义企业生产价值，按照价值流来组织全部生产活动，使价值在生产活动之间流动起来，由需求拉动产品的生产，从而识别整个生产活动中不经意间产生的浪费，并消除之。</p></blockquote><p>持续交付2.0 是一种产品研发管理思维框架。它以<code>精益思想</code>为指导，全面贯彻<code>识别和消除一切浪费</code>的理念，通过一系列工作原则与实践，完成高质量，底成本，无风险地快速交付客户价值。</p><h3 id="双环模型"><a href="#双环模型" class="headerlink" title="双环模型"></a>双环模型</h3><p>持续交付2.0建立在<code>持续交付1.0</code>的“可持续地快速发布软件服务”以及精益创业的“最小化可行产品”两种理念的基础上，强调要以业务为导向，从一开始就将业务问题进行分解，并通过不断的科学探索与快速验证，减少浪费的同时，快速找到正确的业务前进方向，简称为“双环模型”</p><p><img src="/img/持续交付2.0_双环模型.jpg" alt="双环模型"></p><h3 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h3><ul><li><p>坚持少做</p><p>需求永远是做不完的，而且很多需求都不一定是有价值的。所以，坚持少做，想办法对新创意尽早验证。</p></li><li><p>持续分解问题</p><p>即使很大的课题或很大范围的变更，也可以将其分解为一系列小变更。通过分解成一系列的小问题，将小问题快速解决，并得到反馈，从而尽早消除风险。</p></li><li><p>坚持快速反馈</p><p>通过快速反馈，尽早了解所完成工作的质量和效果。</p></li><li><p>持续改进并衡量</p><p>无论做了什么样的改进，如果无法以某种方式衡量它的结果，就无法证明真的得到了改进。在着手解决每个问题之前，我们都要找到适当的衡量方式，并将其与对应的功能需求放在同等重要的位置上，一起完成。</p></li></ul><h2 id="价值探索环"><a href="#价值探索环" class="headerlink" title="价值探索环"></a>价值探索环</h2><blockquote><p>如何发现和识别用户地真实需求是一个难题。探索环通过提供一系列原则和方法，帮助大家分析和解决这一问题。</p></blockquote><h3 id="探索环地意义"><a href="#探索环地意义" class="headerlink" title="探索环地意义"></a>探索环地意义</h3><p>由于市场变化很快，当花费大量的时间完成产品所有的功能开发后，产品常会因为潜在用户对原型的理解偏差，或用户的需求发生了变化，导致之前的设计不再适应市场需求。瀑布模式的开发流程，在开发过程中存在一些风险假设。一是用户假设，即我们提供的产品服务是针对某类潜在的用户人群的需求的假设；二是问题假设，即目标用户之所以有这些需求，是因为他们的确存在某些痛点需要解决的假设；三是解决方案假设，即我们提供的解决方案能够解决这些通点，而且比其他现有的解决方案有效且高效。</p><p>上述三个假设中，任何一个假设不成立，都会导致我们事倍功半，甚至前功尽弃。探索环的目标就是通过一系列的环节，能够设别和定义业务问题（持续识别和定义上述有价值的假设），制定相应的衡量标准，并找出低成本且可快速验证的最小可行解决方案（Minimum Viable Solution）。 它本质上就是一个理解用户需求，判断优先级，再评估需求的过程。</p><h3 id="探索环的关键环节"><a href="#探索环的关键环节" class="headerlink" title="探索环的关键环节"></a>探索环的关键环节</h3><ul><li><p>提问</p><p>通过有针对性的提问与讨论，澄清客户需求背后要实现的真实目标，以便寻找解决问题的方法，同时也有助于团队成员从业务问题出发，充分理解业务问题。</p><p>在提问环节要求不仅仅是找到“做什么”以及“怎么做”，更应该了解客户需求背后的原因“为什么要这样做”。</p></li></ul><ul><li><p>锚定</p></li><li><p>共创</p></li><li><p>精炼</p></li></ul><h2 id="敏捷十二原则"><a href="#敏捷十二原则" class="headerlink" title="敏捷十二原则"></a>敏捷十二原则</h2><ul><li>尽早地持续交付有价值的软件，以便让客户满意，这是最高优先级的事情。</li><li>即便在开发阶段后期，也欢迎需求变化。为了让客户获得业务竞争优势，利用敏捷过程来应对变化。</li><li>频繁交付可工作的软件，建议采用较短的交付周期(通常是几周或一两个月)</li><li>在整个项目过程中，业务人员和开发人员每天能够一起工作一段时间。</li><li>围绕积极的个体，建立项目团队。给他们需要的环境和支持，并相信他们能够完成工作。</li><li>无论团队内外，传递信息效果最好和效率最高的方式是面对面交谈。</li><li>可工作的软件是项目进度的首要衡量标准。</li><li>敏捷过程促进可持续发展。项目主要干系人，开发人员和用户应该能一直保持节奏。</li><li>持续关注技术卓越和良好的设计，提高敏捷性。</li><li>以简洁为本，它是极力减少不必要工作量的艺术。</li><li>最好的架构/需求和设计会从自组织团队中涌现。</li><li>团队要定期地反思“如何变得更有成效？”，然后相应地调整自身行为。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> continuous delivery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3内置函数</title>
      <link href="/2020/07/18/python/python3-doc-buildin-function/"/>
      <url>/2020/07/18/python/python3-doc-buildin-function/</url>
      
        <content type="html"><![CDATA[<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><p><code>sorted(iterable, /, *, key=None, reverse=False)</code></p><blockquote><p>函数返回一个新的已排序列表，不会修改原有的列表<br>key 表示一个带有单个参数的函数，用于从 iterable 的每个元素中提取用于比较的键 (例如 key=str.lower)。 默认值为 None, 表示直接比较元素，如果元素不支持 &lt; 比较操作则抛出异常 。<br>reverse为True，表示降序排序，默认为升序排序</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_list=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tmp_list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tmp_list, reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tmp_list)</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">tmp_dict=[&#123;<span class="string">"name"</span>: <span class="string">"a"</span>, <span class="string">"age"</span>:<span class="number">16</span>&#125;, &#123;<span class="string">"name"</span>:<span class="string">"b"</span>, <span class="string">"age"</span>:<span class="number">10</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tmp_dict)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#117&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sorted(tmp_dict)</span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'dict'</span> <span class="keyword">and</span> <span class="string">'dict'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">dict_sort</span><span class="params">(obj)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> obj.get(<span class="string">"age"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tmp_dict, key=dict_sort)</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'b'</span>, <span class="string">'age'</span>: <span class="number">10</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'a'</span>, <span class="string">'age'</span>: <span class="number">16</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_dict</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'a'</span>, <span class="string">'age'</span>: <span class="number">16</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'b'</span>, <span class="string">'age'</span>: <span class="number">10</span>&#125;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3内置类型序列</title>
      <link href="/2020/07/04/python/python3-doc-buildin-sequence/"/>
      <url>/2020/07/04/python/python3-doc-buildin-sequence/</url>
      
        <content type="html"><![CDATA[<p>三种基本的序列类型:</p><ul><li>列表(list)</li><li>元组(tuple)</li><li>range</li></ul><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><p>迭代器，用于表示一连串数据流的对象。</p><p>重复调用迭代器对象的<code>__next__()</code>方法(或将迭代器对象传递给内置函数<code>next()</code>)会逐个返回数据流中的元素。当没有元素可用时会抛出<code>StopIteration</code>异常。</p><p>迭代器对象必须包含<code>__iter__()</code>方法返回迭代器对象自身，因此迭代器对象默认是可迭代的，可以被用于适用于迭代器对象的大部分场合。</p><h2 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h2><p>可迭代的，是指对象具备一次返回一个成员的能力。所有的序列类型的对象都是可迭代的。任何实现了<code>__iter__()</code>或实现了sequence语义的<code>__getitem__()</code>的对象也都是可迭代的。</p><p>可迭代的对象可以被用在for循环或其他所有需要序列的地方(如zip(), map()等)</p><p>当一个可迭代的对象作为参数传递给内置函数iter()时就会返回一个迭代器。</p><p>当使用一个可迭代的对象时，通常不需要自己调用iter()生产迭代器然后再处理迭代器。for语句会自动完成这个操作，它创建一个临时的未命名变量用于在循环期间保存迭代器。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range_obj = range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(range_obj)</span><br><span class="line">range(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter_obj = iter(range_obj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(iter_obj)</span><br><span class="line">&lt;range_iterator object at <span class="number">0x0000022DC27816F0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(iter_obj))</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(iter_obj))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(iter_obj))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(iter_obj))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>判断一个对象是不是可迭代的方式</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_str = <span class="string">"abc"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_dict = &#123;<span class="string">"name"</span>: <span class="string">"john"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_range = range(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_list, Iterable))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_str, Iterable))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_dict, Iterable))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_range, Iterable))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_range, Iterator))</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_list, Iterator))</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_dict, Iterator))</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(tmp_str, Iterator))</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(iter(tmp_str), Iterator))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(iter(tmp_list), Iterator))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(iter(tmp_dict), Iterator))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(isinstance(iter(tmp_range), Iterator))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><p>通常指生成器函数，一个返回generator iterator的函数。他与普通函数的不同点在于其包含了<code>yield</code>表达式用于产生一系列值提供给for循环使用或通过next()函数依此获取。</p><h2 id="generator-iterator"><a href="#generator-iterator" class="headerlink" title="generator iterator"></a>generator iterator</h2><p>生成器迭代器，generator 函数所创建的对象。生成器迭代器实质上也是迭代器。</p><p>每个 <code>yield</code> 会临时暂停处理，记住当前位置执行状态（包括局部变量和挂起的 try 语句）。当该 生成器迭代器 恢复时，它会从离开位置继续执行（这与每次调用都从新开始的普通函数差别很大）。</p><ol><li>生成器迭代器使用 <code>yield</code> 关键字实现一次返回一个值给调用者，然后暂停执行，等待下一次调用，好处是节省内存空间。</li><li>生成器可以用next()函数，也可以用for迭代的方式获取元素值，中间还可以用close()来随时终止生成器</li><li>next()函数每次执行时，都会继续执行挂起的生成器函数，直到执行完毕。</li></ol><p>生成器的这种特点被称为”延迟计算”或”惰性求值(Lazy evaluation)”，可以有效的节省内存。惰性求值实际上是体现了协同程序的思想。</p><p>虽然生成器的这种行为类似于迭代器，但两者有较大差别，迭代器不具备这种执行-暂停-再执行-再暂停的特性，所以迭代器不具有延迟计算，没有协同程序的思想。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">generator_func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> i * <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> generator_func(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>  print(v)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>generator_iter = generator_func(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(generator_iter))</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(generator_iter))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(generator_iter))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(generator_iter))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="generator-expression"><a href="#generator-expression" class="headerlink" title="generator expression"></a>generator expression</h2><p>生成器表达式，返回一个生成器迭代器的表达式。他是一种特殊的生成器函数。</p><p>格式: (结果 for 变量 in 可迭代对象 if 条件筛选)</p><p>生成器表达式如果作为某个函数的参数，则可以省略掉()</p><p>生成器表达式和列表推导式的区别:</p><ol><li><p>列表推导式比较消耗内存，一次性加载所有数据。生成器表达式几乎不占用内存，使用的时候才分配和使用内存</p></li><li><p>得到的值不一样。列表推导式得到的是一个列表。生成器表达式获取的是一个生成器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(n, i)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> n + i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">g = test()</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">10</span>]:</span><br><span class="line">  <span class="comment"># n == 1 时，g = (add(n, i) for i in g)，此时 n 没有替换为 1。 惰性机制，不到最后不会拿值</span></span><br><span class="line">  <span class="comment"># n == 10时，g = (add(n, i) for i in (add(n, i) for i in g))</span></span><br><span class="line">  <span class="comment"># g = (add(n, i) for i in (10, 11, 12, 13))</span></span><br><span class="line">  <span class="comment"># g = (10 + 10, 10 + 11, 10 + 12, 10 + 13)</span></span><br><span class="line">  g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)  <span class="comment"># 生成器表达式，在此之上所有的代码都没有进行计算</span></span><br><span class="line"></span><br><span class="line">print(list(g))  <span class="comment"># [20, 21, 22, 23]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="list-comprehension"><a href="#list-comprehension" class="headerlink" title="list comprehension"></a>list comprehension</h2><p>列表推导式，处理一个序列中的所有或部分元素并返回结果列表的一种紧凑写法。</p><p>格式: [结果 for 变量 in 可迭代对象 if 条件筛选]</p><p>如[‘{:#04x}’.format(x) for x in range(256) if x % 2 == 0] 将生成一个 0 到 255 范围内的十六进制偶数对应字符串（0x..）的列表。其中 if 子句是可选的，如果省略则 range(256) 中的所有元素都会被处理。</p><h2 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h2><h3 id="range类型不支持序列的s1-s2-和-s-n操作"><a href="#range类型不支持序列的s1-s2-和-s-n操作" class="headerlink" title="range类型不支持序列的s1 + s2 和 s * n操作"></a>range类型不支持序列的<code>s1 + s2</code> 和 <code>s * n</code>操作</h3><h3 id="s-n"><a href="#s-n" class="headerlink" title="s * n"></a><code>s * n</code></h3><p>  如果 n 小于0，会按照0来处理，会产生一个空序列<br>  如果s是可修改序列, 注意该操作不会创建序列s的副本，而是创建序列s的引用。这种行为通常不是期望的行为</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ori_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_list = [ori_list] * <span class="number">3</span>   <span class="comment"># 创建一个list，里面每一个元素都是ori_list的引用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ori_list, new_list)</span><br><span class="line">[] [[], [], []]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ori_list.append(<span class="number">1</span>)          <span class="comment"># 修改ori_list后，会影响new_list中的每一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ori_list, new_list)</span><br><span class="line">[<span class="number">1</span>] [[<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">### 示例2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ori_list = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_list = [ori_list] * <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ori_list, new_list)</span><br><span class="line">[<span class="number">1</span>] [[<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ori_list = [<span class="number">1</span>,<span class="number">2</span>]        <span class="comment"># 对ori_list重新赋值不会影响new_list中的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ori_list, new_list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] [[<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_list[<span class="number">0</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ori_list, new_list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] [[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="s1-s1"><a href="#s1-s1" class="headerlink" title="s1 + s1"></a><code>s1 + s1</code></h3><p>  对不可变序列(str, bytes等)使用连接操作时，如果有大量(N个)不可变序列需要连接时效率会很慢，原因是需要进行N-1次的内存申请和搬运操作<br>  官方推荐使用<code>str.join()</code>和<code>bytes.join()</code>方法替代，在执行join操作时，会首先统计出在list中一共有多少个对象，并统计这些对象所维护的字符串一共有多长，然后申请内存，将list中所有的对象维护的字符串都拷贝到新开辟的内存空间中。这里只进行了一次内存空间的申请，就完成了N个对象的连接操作。相比于 <code>+</code> 操作符，待连接的对象越多，效率的提升也会越明显。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">count = <span class="number">10000000</span></span><br><span class="line">start_time = time.perf_counter()</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,count):</span><br><span class="line">    s += str(n)</span><br><span class="line">end_time = time.perf_counter()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Time elapse:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line">start_time = time.perf_counter()</span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,count):</span><br><span class="line">    s.append(str(n))</span><br><span class="line"><span class="string">''</span>.join(s)</span><br><span class="line">end_time = time.perf_counter()</span><br><span class="line">print(<span class="string">'Time elapse:&#123;&#125;'</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line">start_time = time.perf_counter()</span><br><span class="line">s = <span class="string">''</span>.join(map(str,range(<span class="number">0</span>,count)))</span><br><span class="line">end_time = time.perf_counter()</span><br><span class="line">print(<span class="string">'Time elapse:&#123;&#125;'</span>.format(end_time - start_time))</span><br></pre></td></tr></table></figure><table><thead><tr><th>方式</th><th>十万数据</th><th>百万数据</th><th>千万数据</th></tr></thead><tbody><tr><td>方式一</td><td>0.05587520000000001</td><td>3.3037078</td><td>457.09966000000003</td></tr><tr><td>方式二</td><td>0.04598980000000001</td><td>0.45585239999999994</td><td>6.734024699999964</td></tr><tr><td>方式三</td><td>0.030382799999999988</td><td>0.3231406999999997</td><td>3.248821899999996</td></tr></tbody></table><h3 id="切片操作s-i-j-k"><a href="#切片操作s-i-j-k" class="headerlink" title="切片操作s[i:j:k]"></a>切片操作<code>s[i:j:k]</code></h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word = <span class="string">"Hello World"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">1</span>:<span class="number">9</span>])    <span class="comment"># 切片的范围为[i,j)，包括i，但是不包含j</span></span><br><span class="line">ello Wor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">9</span>:<span class="number">1</span>])    <span class="comment"># 如果 i &gt; j，则返回空序列, k默认是1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">-1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">1</span>:<span class="number">9</span>:<span class="number">2</span>])  <span class="comment"># 返回符合 i + n * k &lt; j 的所有元素</span></span><br><span class="line">el o</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">1</span>:<span class="number">100</span>])  <span class="comment"># 如果 i / j &gt; len(word), 则按照len(word)处理 </span></span><br><span class="line">ello World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">100</span>:<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">1</span>:<span class="number">9</span>:<span class="number">-2</span>]) <span class="comment"># 如果k为负值，则要求 i &gt; j</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[<span class="number">9</span>:<span class="number">1</span>:<span class="number">-2</span>])</span><br><span class="line">lo l</span><br></pre></td></tr></table></figure><h3 id="创建多维数组"><a href="#创建多维数组" class="headerlink" title="创建多维数组"></a>创建多维数组</h3><ul><li><p>先创建一个所需长度的列表，然后对列表中的所有元素进行填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>row, column = <span class="number">3</span>, <span class="number">2</span>  <span class="comment"># 创建 3 行 2 列的二维数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = [ [<span class="number">0</span>] * column ] * row</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(A)</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用numpy库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 = numpy.zeros([<span class="number">3</span>,<span class="number">2</span>], int)   <span class="comment"># 创建 3行2列的二维数组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a1)</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2 = numpy.empty([<span class="number">3</span>, <span class="number">2</span>])    <span class="comment"># empty不会初始化为0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a2)</span><br><span class="line">[[<span class="number">5.11798224e-307</span> <span class="number">3.44897992e-307</span>]</span><br><span class="line">[<span class="number">1.69118108e-306</span> <span class="number">9.34609790e-307</span>]</span><br><span class="line">[<span class="number">6.23037657e-307</span> <span class="number">8.34445138e-308</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(numpy.zeros)</span><br><span class="line">Help on built-<span class="keyword">in</span> function zeros <span class="keyword">in</span> module numpy:</span><br><span class="line"></span><br><span class="line">zeros(...)</span><br><span class="line">    zeros(shape, dtype=float, order=<span class="string">'C'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="range类型"><a href="#range类型" class="headerlink" title="range类型"></a>range类型</h2><p>range是一个内置的class类型，是<code>Sequence[int]</code>的子类，他是一个不可变的数字序列，通常用于for循环中指定循环次数。</p><p>range()返回的对象再很多方面表现的像是list，但是实际上不是。他返回的是一个可迭代的对象。</p><p>range相对于list和tuple的优点在于，不管range表示的范围是多大，他总是占用很小的相同大小的内存(仅仅保存start/stop/step三个值)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sequence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3内置类型</title>
      <link href="/2020/07/04/python/python3-doc-buildin-type/"/>
      <url>/2020/07/04/python/python3-doc-buildin-type/</url>
      
        <content type="html"><![CDATA[<p>Python中主要的内置类型有</p><ul><li>数值类型(numberic)</li><li>序列(sequence)</li><li>字典(mapping)</li><li>类(class)</li><li>实例(instance)</li><li>异常(exception)</li></ul><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a><a href="/2020/07/04/python/python3-doc-buildin-sequence/">序列</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Python Stardard Libary</title>
      <link href="/2020/07/04/python/python3-doc-stardard-lib/"/>
      <url>/2020/07/04/python/python3-doc-stardard-lib/</url>
      
        <content type="html"><![CDATA[<h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a><a href="/2020/07/04/python/python3-doc-buildin-type/">内置类型</a></h2><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a><a href="/2020/07/18/python/python3-doc-buildin-function/">内置函数</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Python Tutorial</title>
      <link href="/2020/07/04/python/python3-doc-tutorial/"/>
      <url>/2020/07/04/python/python3-doc-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><a href="http://c.biancheng.net/view/2190.html" target="_blank" rel="noopener">参考</a></p><h3 id="交互模式-变量"><a href="#交互模式-变量" class="headerlink" title="交互模式 _ 变量"></a>交互模式 <code>_</code> 变量</h3><p>在交互模式中，最后一个printed expression会被赋值到 <code>_</code> 变量中。使用该变量时，应该把它作为一个只读类型的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>_ <span class="comment"># 交互模式初始化是 _ 变量不存在</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    _</span><br><span class="line">NameError: name <span class="string">'_'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#2&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    _</span><br><span class="line">NameError: name <span class="string">'_'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c+_</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="脚本文件的Shebang行"><a href="#脚本文件的Shebang行" class="headerlink" title="脚本文件的Shebang行"></a>脚本文件的Shebang行</h3><blockquote><p>Unix系统中的 <code>#!</code> 符号称之为 Shebang</p></blockquote><p>在Unix系统中，在python脚本文件的第一行指定如下内容后，python脚本就可以像shell一样直接执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br></pre></td></tr></table></figure><p>不使用<code>#!/usr/bin/python3</code>的原因是，为了提高可移植性，比如有些系统的python3没有安装在<code>/usr/bin/</code>目录，那么这种方式就会出错，而<code>#!/usr/bin/env python3</code>的方式，会在系统的PATH中搜索python3的安装路径，然后再调用对应路径下的python解释器执行。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3><p>默认情况下，python的代码文件采用的是UTF-8的编码方式。可以通过使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: encoding -*-</span></span><br></pre></td></tr></table></figure><p>的方式修改文件的编码格式。</p><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>在迭代一个collection的过程中同时修改该集合的内容时，如果想要取得正确的结果，可能需要一些技巧。通常情况下，是迭代一个副本，或者创建一个新的集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>words = [<span class="string">'cat'</span>, <span class="string">'windows'</span>, <span class="string">'linux'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line"><span class="meta">... </span>  print(w)</span><br><span class="line"><span class="meta">... </span>  words.remove(w)   <span class="comment"># 期望删除所有的元素</span></span><br><span class="line">...</span><br><span class="line">cat</span><br><span class="line">linux</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(words)    <span class="comment"># 实际结果并不是期望的结果</span></span><br><span class="line">[<span class="string">'windows'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>words = [<span class="string">'cat'</span>, <span class="string">'windows'</span>, <span class="string">'linux'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> words[:]:  <span class="comment"># 迭代时，迭代的时works的一个副本的内容</span></span><br><span class="line"><span class="meta">... </span>  words.remove(w)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(words)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h3 id="循环的else语句"><a href="#循环的else语句" class="headerlink" title="循环的else语句"></a>循环的else语句</h3><p>循环语句可以有else子句。它会在循环耗尽了迭代对象(for循环)或循环条件为假(while循环)时被执行，但是不会在循环执行break语句终止时被执行。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>):</span><br><span class="line"><span class="meta">... </span>  print(i)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>  print(<span class="string">"end"</span>)</span><br><span class="line">...</span><br><span class="line">end</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>  print(i)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>  print(<span class="string">"end"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">end</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">False</span>:</span><br><span class="line"><span class="meta">... </span>  print(<span class="string">'aaa'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>  print(<span class="string">"else statement"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> statement</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>  print(i)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>  print(<span class="string">"else statement"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="try…except语句中的else子句"><a href="#try…except语句中的else子句" class="headerlink" title="try…except语句中的else子句"></a>try…except语句中的else子句</h3><p>try … except 语句有一个可选的 else 子句，在使用时必须放在所有的 except 子句后面。</p><p>如果控制流离开 try 子句体时没有引发异常，并且没有执行 return或break/continue(try在for循环中时) 语句，可选的 else 子句将被执行。 else 语句中的异常不会由之前的 except 子句处理。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>  ret = <span class="literal">None</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    ret = a / b</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"ret in try: %s"</span> % ret)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"catch exception: %s"</span> % str(e))</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"ret in else: %s"</span> % ret)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"ret in finally: %s"</span> % ret)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">2</span>)     <span class="comment"># 正常执行时，执行顺序 try -&gt; else -&gt; finally</span></span><br><span class="line">ret <span class="keyword">in</span> <span class="keyword">try</span>: <span class="number">5.0</span></span><br><span class="line">ret <span class="keyword">in</span> <span class="keyword">else</span>: <span class="number">5.0</span></span><br><span class="line">ret <span class="keyword">in</span> <span class="keyword">finally</span>: <span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">0</span>)     <span class="comment"># try中出现异常时， 执行顺序 try -&gt; except -&gt; finally</span></span><br><span class="line">catch exception: division by zero</span><br><span class="line">ret <span class="keyword">in</span> <span class="keyword">finally</span>: <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">### 如果 try 中有 return, 则 else子句不会执行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>  ret = <span class="literal">None</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    ret = a / b</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"ret in try: %s"</span> % ret)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> ret</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"catch exception: %s"</span> % str(e))</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"ret in else: %s"</span> % ret)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"ret in finally: %s"</span> % ret)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">2</span>)   <span class="comment"># try中没有异常抛出且有return语句时，执行顺序 try -&gt; finally</span></span><br><span class="line">ret <span class="keyword">in</span> <span class="keyword">try</span>: <span class="number">5.0</span></span><br><span class="line">ret <span class="keyword">in</span> <span class="keyword">finally</span>: <span class="number">5.0</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>]:</span><br><span class="line"><span class="meta">... </span>  print(<span class="string">"i: %s"</span> % i)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    ret = <span class="number">10</span> / i</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"catch exception"</span>)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"else statement"</span>)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"finally statement"</span>)</span><br><span class="line">...</span><br><span class="line">i: <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> statement</span><br><span class="line"><span class="keyword">finally</span> statement</span><br><span class="line">i: <span class="number">2</span></span><br><span class="line"><span class="keyword">finally</span> statement</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="try…except…finally"><a href="#try…except…finally" class="headerlink" title="try…except…finally"></a>try…except…finally</h3><ul><li><p>即使try/except/else中有return语句，finally子句也总是会被执行，函数的返回值是由最后的return决定的。所以如果finally中有return子句，最终生效的是finally中的return。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    ret = a / b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> ret</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">except</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"finally"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 如果finally中有return，一定会是finally中的return生效</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    ret = a / b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> ret</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">except</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">-2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">-2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">-2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><ol><li><p>除运算时总是返回float类型的结果。表达式中整数与浮点数都存在时也是会返回float类型的结果</p></li><li><p>floor division <code>//</code> 运算会返回整数结果，是直接丢弃小数部分，不会四舍五入</p></li></ol><h3 id="字符串显示"><a href="#字符串显示" class="headerlink" title="字符串显示"></a>字符串显示</h3><ol><li><p>通常情况下，交互模式中显示字符串时会将字符串的内容用单引号<code>&#39;</code>包裹起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">'"isn\'t," they said'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">'"isn\'t," they said'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str1)</span><br><span class="line"><span class="string">"isn't,"</span> they said</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2=<span class="string">"no, it is not"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2</span><br><span class="line"><span class="string">'no, it is not'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str2)</span><br><span class="line">no, it <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3=<span class="string">"first line\nsecond line"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3</span><br><span class="line"><span class="string">'first line\nsecond line'</span></span><br><span class="line"><span class="comment"># 使用print语句打印时，不会显示字符串回显时使用的包裹字符，同时会生效转义字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str3)</span><br><span class="line">first line</span><br><span class="line">second line</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4=<span class="string">"doesn\'t"</span></span><br><span class="line"><span class="comment"># 当字符串中包含单引号同时没有包含双引号时，字符串的回显使用双引号包裹</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4</span><br><span class="line"><span class="string">"doesn't"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str4)</span><br><span class="line">doesn<span class="string">'t</span></span><br></pre></td></tr></table></figure></li><li><p>字符串中有反斜杠<code>\</code>时，会默认将后面的字符理解为转义字符，如果不想让字符转义时，可以使用<code>\\</code>或在字符串前添加<code>r</code>标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"c:\name1\name2"</span>)</span><br><span class="line">c:</span><br><span class="line">ame1</span><br><span class="line">ame2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"c:\\name1\\name2"</span>)</span><br><span class="line">c:\name1\name2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r"c:\name1\name2"</span>)</span><br><span class="line">c:\name1\name2</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li><p>列表中可以包含不同类型的元素，但是通常情况下都是同类型的。</p></li><li><p>列表的所有切片操作都会返回一个新的列表(shallow copy, 浅拷贝)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(list1)</span><br><span class="line"><span class="number">2012936495808</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2=list1[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(list2)</span><br><span class="line"><span class="number">2012929059648</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list3=list1[<span class="number">2</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(list3)</span><br><span class="line"><span class="number">2012936912256</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1=<span class="string">"abcdefg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2=str1[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(str1)</span><br><span class="line"><span class="number">2012936632368</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(str2)</span><br><span class="line"><span class="number">2012936632368</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(str1)==id(str2)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(list1)==id(list2)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3=str1[<span class="number">2</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(str3)</span><br><span class="line"><span class="number">2012936535024</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>list.sort()会修改list的内容，返回值为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tmp_list)</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_list.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tmp_list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数中的默认值是在-定义过程-中在函数定义处计算的"><a href="#函数中的默认值是在-定义过程-中在函数定义处计算的" class="headerlink" title="函数中的默认值是在 定义过程 中在函数定义处计算的"></a>函数中的默认值是在 定义过程 中在函数定义处计算的</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg=i)</span>:</span></span><br><span class="line">  print(arg)</span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(i)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> i</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg=i)</span>:</span></span><br><span class="line">  print(arg)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#29&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg=i)</span>:</span></span><br><span class="line">NameError: name <span class="string">'i'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="函数中的默认值赋值只会执行一次"><a href="#函数中的默认值赋值只会执行一次" class="headerlink" title="函数中的默认值赋值只会执行一次"></a>函数中的默认值赋值只会执行一次</h3><p><code>如果函数的默认是可变对象(列表/字典等)时，所有采用默认值的函数调用，共享该可变对象</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, L=[])</span>:</span></span><br><span class="line">  L.append(a)</span><br><span class="line">  <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_list = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">3</span>, tmp_list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="函数中形参格式"><a href="#函数中形参格式" class="headerlink" title="函数中形参格式"></a>函数中形参格式</h3><p><code>如果 参数中既有 *args 类型，又有**keywords类型，那么*args必须在**keywords前面</code></p><blockquote><p>*args 类型的参数，在函数内的类型时元组类型<br>**keywords 类型的参数，在函数内的类型时字典类型</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(kind, *args, **keywords)</span>:</span></span><br><span class="line">  print(kind)</span><br><span class="line">  print(type(args))</span><br><span class="line">  print(args)</span><br><span class="line">  print(type(keywords))</span><br><span class="line">  print(keywords)</span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, name=<span class="string">"abc"</span>, age=<span class="string">"12"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'name': 'abc', 'age': '12'&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, *(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>), **&#123;<span class="string">"name"</span>:<span class="string">"abc"</span>, <span class="string">"age"</span>:<span class="string">"12"</span>&#125;)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'name': 'abc', 'age': '12'&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args=[<span class="string">"arg1"</span>, <span class="string">"arg2"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp_dict=&#123;<span class="string">"name1"</span>: <span class="string">"value1"</span>, <span class="string">"name2"</span>: <span class="string">"value2"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">2</span>, args, tmp_dict)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">([<span class="string">'arg1'</span>, <span class="string">'arg2'</span>], &#123;<span class="string">'name1'</span>: <span class="string">'value1'</span>, <span class="string">'name2'</span>: <span class="string">'value2'</span>&#125;)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">### 函数调用时，如果之前有定义好的列表/元组或字典类型的变量，需要给*args 或 **keywords格式的形参传递时，可以使用 * 或 ** 对之前定义好的变量进行解包操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">2</span>, *args, **tmp_dict)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'arg1'</span>, <span class="string">'arg2'</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'name1': 'value1', 'name2': 'value2'&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>如果存在 / 或 *, / 之前的所有参数都只能通过位置方式传参，* 之后的所有参数只能通过key=value方式传参，其他参数可以使用两种的任意一种方式传参</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(pos1, pos2, /, p_or_kwd1, p_or_kwd2, *, kwd1, kwd2)</span></span></span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块初始化"><a href="#模块初始化" class="headerlink" title="模块初始化"></a>模块初始化</h3><p><code>模块中可以包含可执行的语句以及函数定义。这些语句用于初始化模块。它们仅在模块第一次被import时执行一次</code></p><p><code>每个模块在每个解释器会话中只被导入一次。如果更改了模块的内容，必须重启解释器或者使用 importlib.reload(module_name)</code></p><p><code>被导入的模块名存放在调入模块的全局符号表中，可以通过dir()查看</code></p><h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><p><code>模块的搜索方式: 当导入一个模块时，先查找是否为内置模块；如果没有找到，则在sys.path定义的列表中查找</code></p><p>sys.path中默认包含以下内容</p><ul><li>当前脚本所在路径</li><li>系统环境变量PYTHONPATH</li><li>python安装路径相关目录</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pyhton </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URI编码</title>
      <link href="/2020/06/25/http/uri-encoded/"/>
      <url>/2020/06/25/http/uri-encoded/</url>
      
        <content type="html"><![CDATA[<h2 id="保留字符的URI编码"><a href="#保留字符的URI编码" class="headerlink" title="保留字符的URI编码"></a>保留字符的URI编码</h2><table><thead><tr><th>保留字符</th><th>URI编码</th></tr></thead><tbody><tr><td>！</td><td>%21</td></tr><tr><td>*</td><td>%2A</td></tr><tr><td>“</td><td>%22</td></tr><tr><td>‘</td><td>%27</td></tr><tr><td>(</td><td>%28</td></tr><tr><td>)</td><td>%29</td></tr><tr><td>;</td><td>%3B</td></tr><tr><td>:</td><td>%3A</td></tr><tr><td>@</td><td>%40</td></tr><tr><td>&amp;</td><td>%26</td></tr><tr><td>=</td><td>%3D</td></tr><tr><td>+</td><td>%2B</td></tr><tr><td>$</td><td>%24</td></tr><tr><td>,</td><td>%2C</td></tr><tr><td>/</td><td>%2F</td></tr><tr><td>?</td><td>%3F</td></tr><tr><td>%</td><td>%25</td></tr><tr><td>#</td><td>%23</td></tr><tr><td>[</td><td>%5B</td></tr><tr><td>]</td><td>%5D</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> URI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip工具</title>
      <link href="/2020/06/25/python/python-pip/"/>
      <url>/2020/06/25/python/python-pip/</url>
      
        <content type="html"><![CDATA[<p><code>从python3.4版本开始，pip工具默认包含在了python的安装包中</code></p><p><a href="https://packaging.python.org/" target="_blank" rel="noopener">python Packagings文档</a><br><a href="https://pip.pypa.io/en/stable/" target="_blank" rel="noopener">pip官方文档</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>pip命令执行的方式有如下两种:</p><ul><li><code>pip &lt;args&gt;</code></li><li><code>pyhton -m pip &lt;args&gt;</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pip install somePackage             # 安装最新版本</span><br><span class="line">pip install somePackage==1.0.4      # 安装指定版本，如果之前有安装其他版本，会先卸载老的版本</span><br><span class="line">pip install 'somePackage&gt;=1.0.4'    # 安装指定最低版本</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">pip install -r requirements.txt     # 根据requirements文件安装</span><br><span class="line">pip install --upgrade somePackage   # 升级软件到最新版本</span><br><span class="line"></span><br><span class="line">pip install /path/to/SomePackage-1.0-py2.py3-none-any.whl    # 安装本地指定文件</span><br><span class="line"></span><br><span class="line">pip wheel --wheel-dir=. requests    # 下载requests及依赖包到wheel-dir目录，不安装</span><br><span class="line">pip wheel --wheel-dir=/local/wheels -r requirements.txt</span><br><span class="line">pip install --no-index --find-links=. requests # 在本地find-links指定的目录查找包进行安装</span><br><span class="line">pip install --no-index --find-links=/local/wheels -r requirements.txt</span><br><span class="line"></span><br><span class="line">pip uninstall somePackage           # 卸载命令</span><br><span class="line">pip uninstall -r requirements.txt   # 根据requirements文件卸载</span><br><span class="line"></span><br><span class="line">pip search somePackage              # 搜索包</span><br><span class="line"></span><br><span class="line">pip show somePackage                # 显示包的信息</span><br><span class="line"></span><br><span class="line">pip list --outdated                 # 显示所有可以升级的所有的包</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h3><p>pip的配置文件的存放有三种作用范围的配置方式:</p><ul><li><code>site-wide</code></li><li><code>per-user</code> </li><li><code>per-virtualenv</code></li></ul><p><code>如果存在多个配置文件，会按照上面的先后顺序去读取文件内容，如果有重复内容，后读取的文件内容会覆盖前面的内容</code></p><table><thead><tr><th></th><th>Linux</th><th>Mac</th><th>windows</th></tr></thead><tbody><tr><td>per-user</td><td>${HOME}/.config/pip/pip.conf<br>${HOME}/.pip/pip.conf(老的配置方式)</td><td>${HOME}/Library/Application Support/pip/pip.conf(高优先查找)<br>${HOME}/.config/pip/pip.conf(低优先查找)<br>${HOME}/.pip/pip.conf(老的配置方式)</td><td>%APPDATA%\pip\pip.ini<br>%HOME%\pip\pip.ini(老的配置方式)</td></tr><tr><td>per-virtualenv</td><td>$VIRTUAL_ENV/pip.conf</td><td>$VIRTUAL_ENV/pip.conf</td><td>%VIRTUAL_ENV%\pip.ini</td></tr><tr><td>site-wide</td><td>/etc/pip.conf</td><td>/Library/Application Support/pip/pip.conf</td><td>C:\ProgramData\pip\pip.ini(win7及后续版本)</td></tr></tbody></table><h3 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="comment">#proxy=http://[user:passwd@]proxy.server:port</span></span><br><span class="line"></span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><blockquote><p>配置文件中的配置项，都可以在命令行中通过 <code>--&lt;option&gt;</code> 的方式对某一次命令执行进行特殊指定<br>proxy中账号和密码如果有特殊字符，必须使用 <a href="/2020/06/25/http/uri-encoded/">percent-encoded</a>(又称为URI编码)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装</title>
      <link href="/2020/06/15/nginx/nginx-install/"/>
      <url>/2020/06/15/nginx/nginx-install/</url>
      
        <content type="html"><![CDATA[<h2 id="yum源安装"><a href="#yum源安装" class="headerlink" title="yum源安装"></a><a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS" target="_blank" rel="noopener">yum源安装</a></h2><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.18.0]# yum install -y zlib-devel pcre-devel</span><br><span class="line">[root@localhost nginx-1.18.0]# ./configure --prefix=/usr/local/nginx</span><br><span class="line">  ......</span><br><span class="line">  nginx path prefix: "/usr/local/nginx"</span><br><span class="line">  nginx binary file: "/usr/local/nginx/sbin/nginx"</span><br><span class="line">  nginx modules path: "/usr/local/nginx/modules"</span><br><span class="line">  nginx configuration prefix: "/usr/local/nginx/conf"</span><br><span class="line">  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"</span><br><span class="line">  nginx pid file: "/usr/local/nginx/logs/nginx.pid"</span><br><span class="line">  nginx error log file: "/usr/local/nginx/logs/error.log"</span><br><span class="line">  nginx http access log file: "/usr/local/nginx/logs/access.log"</span><br><span class="line">  nginx http client request body temporary files: "client_body_temp"</span><br><span class="line">  nginx http proxy temporary files: "proxy_temp"</span><br><span class="line">  nginx http fastcgi temporary files: "fastcgi_temp"</span><br><span class="line">  nginx http uwsgi temporary files: "uwsgi_temp"</span><br><span class="line">  nginx http scgi temporary files: "scgi_temp"</span><br><span class="line">[root@localhost nginx-1.18.0]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>设置开机自启动</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.18.0]# cat /usr/lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx service</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=ture</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[root@localhost nginx-1.18.0]# systemctl enable nginx</span><br><span class="line">[root@localhost nginx-1.18.0]# systemctl start nginx</span><br><span class="line">[root@localhost nginx-1.18.0]# systemctl status nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx使用总结</title>
      <link href="/2020/06/15/nginx/nginx/"/>
      <url>/2020/06/15/nginx/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><a href="2020/06/15/nginx-install/">安装nginx</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins pipeline的groovy脚本执行权限问题</title>
      <link href="/2020/06/15/jenkins/jenkins-script-approval/"/>
      <url>/2020/06/15/jenkins/jenkins-script-approval/</url>
      
        <content type="html"><![CDATA[<p>在Pipeline中直接如下执行Groovy脚本时，会提示权限问题</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; jenkinsPlugins = <span class="keyword">new</span> ArrayList&lt;String&gt;(Jenkins.instance.pluginManager.plugins)</span><br><span class="line">jenkinsPlugins.sort &#123; it.displayName &#125;.each &#123; plugin -&gt;</span><br><span class="line">  println(<span class="string">"$&#123;plugin.shortName&#125;:$&#123;plugin.version&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题日志如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Started by user unknown or anonymous</span><br><span class="line">Running in Durability level: MAX_SURVIVABILITY</span><br><span class="line">[Pipeline] Start of Pipeline</span><br><span class="line">Scripts not permitted to use method jenkins.model.Jenkins getPluginManager. Administrators can decide whether to approve or reject this signature.</span><br><span class="line">[Pipeline] End of Pipeline</span><br><span class="line">org.jenkinsci.plugins.scriptsecurity.sandbox.RejectedAccessException: Scripts not permitted to use method jenkins.model.Jenkins getPluginManager</span><br></pre></td></tr></table></figure><p>解决方法:</p><ol><li><code>jenkins</code> &gt; <code>Manage jenkins</code> &gt; <code>In-process Script Approval</code>中增加权限，这种方式在重启Jenkins服务后需要再次增加权限</li><li>创建pipeline任务时，取消<code>Use Groovy Sandbox</code>的勾选</li><li>安装<code>Permissive Script Security</code>插件，启动jenkins服务时，指定<code>-Dpermissive-script-security.enabled=true</code>启动参数</li></ol><p>安装方法3配置后，在任务的执行日志中会有相关提示信息，但是不会再因为需要approve而终止任务运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Started by user unknown or anonymous</span><br><span class="line">Running in Durability level: MAX_SURVIVABILITY</span><br><span class="line">[Pipeline] Start of Pipeline</span><br><span class="line">Scripts not permitted to use staticMethod jenkins.model.Jenkins getInstance. Administrators can decide whether to approve or reject this signature.</span><br><span class="line">Scripts not permitted to use method jenkins.model.Jenkins getPluginManager. Administrators can decide whether to approve or reject this signature.</span><br><span class="line">Scripts not permitted to use method hudson.PluginManager getPlugins. Administrators can decide whether to approve or reject this signature.</span><br><span class="line">expected to call java.util.ArrayList.sort but wound up catching org.jenkinsci.plugins.workflow.cps.CpsClosure2.call; see: https://jenkins.io/redirect/pipeline-cps-method-mismatches/</span><br><span class="line">[Pipeline] End of Pipeline</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum私有源配置</title>
      <link href="/2020/06/14/centos/yum-private-repo/"/>
      <url>/2020/06/14/centos/yum-private-repo/</url>
      
        <content type="html"><![CDATA[<h2 id="本地源配置"><a href="#本地源配置" class="headerlink" title="本地源配置"></a>本地源配置</h2><ol><li><p>将系统的iso文件挂载到<code>/mnt/iso</code>目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o loop xxx.iso /mnt/iso</span><br></pre></td></tr></table></figure></li><li><p>在<code>/etc/yum.repo.d/</code>中增加<code>local.repo</code>文件，内容如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt/iso</span><br><span class="line">enable=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><blockquote><p>enable 表示是否启用该源，0表示关闭，1表示开启<br>gpgcheck 表示是否检查GPG-KEy，0表示不检查，1表示检查</p></blockquote></li></ol><h2 id="搭建局域网HTTP服务的私有源"><a href="#搭建局域网HTTP服务的私有源" class="headerlink" title="搭建局域网HTTP服务的私有源"></a>搭建局域网HTTP服务的私有源</h2><h3 id="生成repodata"><a href="#生成repodata" class="headerlink" title="生成repodata"></a>生成repodata</h3>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# yum install createrepo</span><br><span class="line">[root@localhost /]# mkdir -p /data/repo/7/x86_64</span><br><span class="line">[root@localhost x86_64]# cd /data/repo/7/x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行 createrepo 会在目录下生成 repodata目录，为了简单，当前目录下之copy了一个zlib的rpm包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果rpm包有变化，需要执行createrepo --update .</span></span><br><span class="line">[root@localhost x86_64]# createrepo .</span><br><span class="line">Spawning worker 0 with 4021 pkgs</span><br><span class="line">Workers Finished</span><br><span class="line">Saving Primary metadata</span><br><span class="line">Saving file lists metadata</span><br><span class="line">Saving other metadata</span><br><span class="line">Generating sqlite DBs</span><br><span class="line">Sqlite DBs complete</span><br><span class="line">[root@localhost x86_64]# ll |grep -v rpm</span><br><span class="line">total 3891360</span><br><span class="line">drwxr-xr-x. 2 root root     4096 Jun 15 13:54 repodata</span><br><span class="line">[root@localhost x86_64]#</span><br></pre></td></tr></table></figure><h3 id="搭建http服务"><a href="#搭建http服务" class="headerlink" title="搭建http服务"></a>搭建http服务</h3><p>  <a href="/2020/06/15/nginx/nginx-install/">参考nginx安装</a></p><p>  配置文件如下:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8090;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root /data/repo;</span><br><span class="line">        location / &#123;</span><br><span class="line">            autoindex on;</span><br><span class="line">            charset utf-8;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改yum-repo验证"><a href="#修改yum-repo验证" class="headerlink" title="修改yum.repo验证"></a>修改yum.repo验证</h3><p>  <code>先删掉当前所有的repo配置，增加private的repo配置</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# cat private.repo</span><br><span class="line">[private]</span><br><span class="line">name=private</span><br><span class="line">baseurl=http://192.168.43.129:8090/7/x86_64</span><br><span class="line">enable=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">[root@localhost yum.repos.d]# yum clean all</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Cleaning repos: private</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line">Other repos take up 50 M of disk space (use --verbose for details)</span><br><span class="line">[root@localhost yum.repos.d]# yum makecache</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">private                                                             | 2.9 kB  00:00:00</span><br><span class="line">(1/3): private/filelists_db                                         |  927 B  00:00:00</span><br><span class="line">(2/3): private/other_db                                             | 1.4 kB  00:00:00</span><br><span class="line">(3/3): private/primary_db                                           | 2.0 kB  00:00:00</span><br><span class="line">Metadata Cache Created</span><br><span class="line">[root@localhost yum.repos.d]# yum list available</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Available Packages</span><br><span class="line">zip.x86_64            3.0-11.el7                         private</span><br><span class="line">[root@localhost yum.repos.d]# yum install -y zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> yum </tag>
            
            <tag> repo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualbox增强功能</title>
      <link href="/2020/06/14/virtualbox/virtualbox-addtions/"/>
      <url>/2020/06/14/virtualbox/virtualbox-addtions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>virtual box版本: 6.0.22<br>linux虚拟机版本: centos 7.6-1810 最小化安装</p></blockquote><h2 id="安装增强功能"><a href="#安装增强功能" class="headerlink" title="安装增强功能"></a>安装增强功能</h2><ol><li>在启动虚拟机之前，先在 [设置] -&gt; [存储] -&gt; [存储介质] -&gt; [控制器IDE]中增加一个虚拟光驱</li><li>选择增强功能的虚拟光驱文件<code>C:\Program Files\Oracle\VirtualBox\VBoxGuestAdditions.iso</code></li><li>启动虚拟机后，光驱文件为<code>/dev/cdrom</code>，需要手动挂载到<code>/mnt/cdrom</code></li><li>安装增强功能时，需要增加内核模块，需要安装依赖 <code>yum install -y bzip2 kernel-devel gcc make perl</code></li><li>执行命令 <code>cd /mnt/cdrom; ./VBoxLinuxAdditions.run</code></li></ol><h2 id="配置共享文件夹"><a href="#配置共享文件夹" class="headerlink" title="配置共享文件夹"></a>配置共享文件夹</h2><p>在 [设置] -&gt; [共享文件夹] 中添加共享文件夹即可</p><blockquote><p>共享文件夹路径为 宿主机 中要共享到虚拟机的文件夹路径<br>挂载点为 虚拟机 中的共享文件夹路径<br>选中 自动挂载 和 固定分配<br>使用共享文件夹目录功能需要先安装增强功能</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vitrualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualbox使用总结</title>
      <link href="/2020/06/14/virtualbox/virtualbox/"/>
      <url>/2020/06/14/virtualbox/virtualbox/</url>
      
        <content type="html"><![CDATA[<h2 id="安装增强功能"><a href="#安装增强功能" class="headerlink" title="安装增强功能"></a><a href="/2020/06/14/virtualbox/virtualbox-addtions/">安装增强功能</a></h2><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a><a href="/2019/05/16/virtualbox/vm-network/">网络配置</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum命令使用</title>
      <link href="/2020/06/03/centos/yum-cmd/"/>
      <url>/2020/06/03/centos/yum-cmd/</url>
      
        <content type="html"><![CDATA[<h3 id="搜索命令属于哪些包"><a href="#搜索命令属于哪些包" class="headerlink" title="搜索命令属于哪些包"></a>搜索命令属于哪些包</h3><ul><li><code>yum search xxx</code></li><li><code>yum provides xxx</code></li></ul><h3 id="yum-list"><a href="#yum-list" class="headerlink" title="yum list"></a>yum list</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>yum list [all]</td><td>所有已安装和可以安装的包</td></tr><tr><td>yum list available</td><td>所有可以安装的包</td></tr><tr><td>yum list installed</td><td>所有已经安装的包</td></tr><tr><td>yum list updates</td><td>所有可以升级的包</td></tr><tr><td>yum list extra</td><td>所有已经安装但不在repository的包</td></tr></tbody></table><h3 id="查看软件包详情-yum-info-wget"><a href="#查看软件包详情-yum-info-wget" class="headerlink" title="查看软件包详情 yum info wget"></a>查看软件包详情 <code>yum info wget</code></h3><h3 id="查看软件包依赖-yum-deplist-wget"><a href="#查看软件包依赖-yum-deplist-wget" class="headerlink" title="查看软件包依赖 yum deplist wget"></a>查看软件包依赖 <code>yum deplist wget</code></h3><h3 id="删除yum安装的软件-yum-remove-xxx-或-yum-erase-xxx"><a href="#删除yum安装的软件-yum-remove-xxx-或-yum-erase-xxx" class="headerlink" title="删除yum安装的软件 yum remove xxx 或 yum erase xxx"></a>删除yum安装的软件 <code>yum remove xxx</code> 或 <code>yum erase xxx</code></h3><h3 id="更新软件-yum-update-package-name"><a href="#更新软件-yum-update-package-name" class="headerlink" title="更新软件 yum update [package_name]"></a>更新软件 <code>yum update [package_name]</code></h3><p><code>如果没有指定package_name, 则会更新所有已安装的软件</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下docker安装</title>
      <link href="/2020/05/31/windows/windows-docker/"/>
      <url>/2020/05/31/windows/windows-docker/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL使用</title>
      <link href="/2020/05/31/windows/wsl/"/>
      <url>/2020/05/31/windows/wsl/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/windows/wsl/" target="_blank" rel="noopener">WSL官方文档</a></p><h2 id="WSL常用命令"><a href="#WSL常用命令" class="headerlink" title="WSL常用命令"></a>WSL常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>wslconfig /l [/running, /all]</td><td>查看已经安装的linux子系统</td></tr><tr><td>wslconfig /u <name></name></td><td>注销安装的子系统</td></tr><tr><td>wslconfit /s <name></name></td><td>将名称为name的子系统设置为默认</td></tr></tbody></table><p><code>安装的linux子系统保存在%LocalAppData%\Packages目录下面</code></p><blockquote><p>使用 <code>wslconfig /u</code> 命令注销掉，并未真正删除，store里面还是显示已安装，使用管理员身份运行下面两个powershell命令进行删除<br>get-appxpackage -allusers |select name, packagefullname<br>get-appxpackage CanonicalGroupLimited.Ubuntu20.04onWindows |remove-appxpackage</p></blockquote><h2 id="WSL下安装centos"><a href="#WSL下安装centos" class="headerlink" title="WSL下安装centos"></a>WSL下安装centos</h2><h3 id="CentWSL"><a href="#CentWSL" class="headerlink" title="CentWSL"></a><a href="https://github.com/yuk7/CentWSL" target="_blank" rel="noopener">CentWSL</a></h3><h3 id="已失效Rolisoft的WSL下Linux的转换方法"><a href="#已失效Rolisoft的WSL下Linux的转换方法" class="headerlink" title="已失效Rolisoft的WSL下Linux的转换方法"></a><a href="https://github.com/RoliSoft/WSL-Distribution-Switcher" target="_blank" rel="noopener"><code>已失效</code>Rolisoft的WSL下Linux的转换方法</a></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PS D:\workspace\github\WSL-Distribution-Switcher&gt; git clone https://github.com/RoliSoft/WSL-Distribution-Switcher.git</span><br><span class="line">Cloning into <span class="string">'WSL-Distribution-Switcher'</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">323</span>, done.</span><br><span class="line">remote: Total <span class="number">323</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">323</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">323</span>/<span class="number">323</span>), <span class="number">114.58</span> KiB | <span class="number">235.00</span> KiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">204</span>/<span class="number">204</span>), done.</span><br><span class="line">PS D:\workspace\github\WSL-Distribution-Switcher&gt;</span><br><span class="line">PS D:\workspace\github\WSL-Distribution-Switcher&gt; python .\get-prebuilt.py centos:<span class="number">8.1</span>.<span class="number">1911</span></span><br><span class="line">[*] Requesting authorization token...</span><br><span class="line">[*] Fetching manifest info <span class="keyword">for</span> centos:<span class="number">8.1</span>.<span class="number">1911</span>...</span><br><span class="line">[*] Downloading layer sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4...</span><br><span class="line">[*] Downloading layer sha256:<span class="number">8</span>a29a15cefaeccf6545f7ecf11298f9672d2f0cdaf9e357a95133ac3ad3e1f07...</span><br><span class="line">    rootfs_centos_8.<span class="number">1.19</span>... [===============&gt;                                   ] <span class="number">30.04</span>%[*] Rootfs archive <span class="keyword">for</span> centos:<span class="number">8.1</span>.<span class="number">1911</span> saved to rootfs_centos_8.<span class="number">1.1911</span>.tar.gz.</span><br><span class="line">PS D:\workspace\github\WSL-Distribution-Switcher&gt; python .\install.py centos:<span class="number">8.1</span>.<span class="number">1911</span></span><br><span class="line">[*] Probing the Linux subsystem...</span><br><span class="line">[!] The Linux subsystem is not installed. Please go through the standard installation procedure first.</span><br></pre></td></tr></table></figure><p><code>安装失败，因为它依赖Debian子系统。即使使用Microsoft store安装了Debian子系统后，仍然执行失败，提示找不到lxrun.exe。lxrun.exe已经是废弃的应用程序。所以放弃了该种方法</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows使用总结</title>
      <link href="/2020/05/31/windows/windows-usage/"/>
      <url>/2020/05/31/windows/windows-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="windows-hosts文件"><a href="#windows-hosts文件" class="headerlink" title="windows hosts文件"></a>windows hosts文件</h2><p>  文件位置: <code>C:\Windows\System32\drivers\etc\hosts</code></p><p>  <code>raw.githubusercontent.com</code>无法连接时，可以在hosts文件中添加主机IP映射</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">151.101.76.133 raw.githubusercontent.com  # ip地址信息可以通过各种[站长工具网站](https://tool.chinaz.com/)查询</span><br></pre></td></tr></table></figure><h2 id="登录虚拟机时提示host-key验证失败"><a href="#登录虚拟机时提示host-key验证失败" class="headerlink" title="登录虚拟机时提示host key验证失败"></a>登录虚拟机时提示host key验证失败</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xxx&gt; ssh root@192.168.43.129</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:DX2C/kvltG3k9LJpC6Mlz2WPAkcpf5pQaRYyZLkH/3A.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in C:\\Users\\xxx/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in C:\\Users\\xxx/.ssh/known_hosts:7</span><br><span class="line">ECDSA host key for 192.168.43.129 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line">PS C:\Users\xxx&gt; ssh-keygen.exe -R 192.168.43.129</span><br><span class="line"># Host 192.168.43.129 found: line 7</span><br><span class="line">C:\Users\xxx/.ssh/known_hosts updated.</span><br><span class="line">Original contents retained as C:\Users\xxx/.ssh/known_hosts.old</span><br></pre></td></tr></table></figure><h2 id="windows下docker安装"><a href="#windows下docker安装" class="headerlink" title="windows下docker安装"></a><a href="/2020/05/31/windows/windows-docker/">windows下docker安装</a></h2><h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a><a href="/2020/05/31/windows/wsl/">WSL</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下的diff和patch使用</title>
      <link href="/2020/05/22/linux/linux-diff-patch/"/>
      <url>/2020/05/22/linux/linux-diff-patch/</url>
      
        <content type="html"><![CDATA[<h2 id="diff命令"><a href="#diff命令" class="headerlink" title="diff命令"></a>diff命令</h2><p>diff命令时unix中用来比较文件差异的工具，也通常用于代码管理中。</p><p>diff命令显示结果有三种格式:</p><ul><li>正常格式(normal diff)  <code>diff f1 f2</code></li><li>上下文格式(context diff)  <code>diff -c f1 f2</code></li><li>合并格式(unified diff)  <code>diff -u f1 f2</code></li><li>side-by-side格式  <code>diff -y f1 f2</code></li></ul><p>比较文件的内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost b]# cat -n f1</span><br><span class="line">     1  0</span><br><span class="line">     2  3</span><br><span class="line">     3  1</span><br><span class="line">     4  a</span><br><span class="line">     5  b</span><br><span class="line">     6  c</span><br><span class="line">     7  d</span><br><span class="line">     8  e</span><br><span class="line">     9  f</span><br><span class="line">[root@localhost b]# cat -n f2</span><br><span class="line">     1  3</span><br><span class="line">     2  a</span><br><span class="line">     3  b</span><br><span class="line">     4  aaa</span><br><span class="line">     5  f</span><br><span class="line">     6  bbb</span><br><span class="line">     7  ccc</span><br><span class="line">     8  ddd</span><br><span class="line">[root@localhost b]#</span><br></pre></td></tr></table></figure><h3 id="正常格式"><a href="#正常格式" class="headerlink" title="正常格式"></a>正常格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost b]# diff f1 f2</span><br><span class="line">1d0         # 变动位置说明, f1文件的第一行被删除(d,delete)</span><br><span class="line">&lt; 0         # `&lt;`行 表示f1文件变动行的内容</span><br><span class="line">3d1</span><br><span class="line">&lt; 1</span><br><span class="line">6,8c4       # f1文件的第6行到第8行内容被修改(c, change)成f2文件的第四行内容</span><br><span class="line">&lt; c</span><br><span class="line">&lt; d</span><br><span class="line">&lt; e</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> aaa       <span class="comment"># `&gt;`行 表示f2文件变动行的内容</span></span></span><br><span class="line">9a6,8       # f1文件第9行后面被增加(a, add)了f2文件的第6行到第8行的内容</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> bbb</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ccc</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ddd</span></span><br><span class="line">[root@localhost b]#</span><br></pre></td></tr></table></figure><h3 id="上下文格式"><a href="#上下文格式" class="headerlink" title="上下文格式"></a>上下文格式</h3><blockquote><p>上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff<br>可以通过 <code>diff -C Num</code> 或 <code>diff --context[=Num]</code>的方式指定显示上下文的行数，默认为3行(前三行加后三行)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost b]# diff f1 f2 -c</span><br><span class="line">*** f1  2020-05-22 00:21:43.668716845 +0800   # *** 表示变动前文件</span><br><span class="line">--- f2  2020-05-22 00:32:51.747625563 +0800   # --- 表示变动后文件</span><br><span class="line">***************                      # 15个星号，表示内容分割</span><br><span class="line">*** 1,9 ****      # 显示变动前的文件(***)的第一行到第九行</span><br><span class="line">- 0               # - 表示改行被删除</span><br><span class="line">  3</span><br><span class="line">- 1</span><br><span class="line">  a</span><br><span class="line">  b</span><br><span class="line">! c               # ! 表示内容被修改</span><br><span class="line">! d</span><br><span class="line">! e</span><br><span class="line">  f</span><br><span class="line">--- 1,8 ----      # 显示变动后的文件(---)的第一行到第八行</span><br><span class="line">  3</span><br><span class="line">  a</span><br><span class="line">  b</span><br><span class="line">! aaa             # 对应变动前的修改部分</span><br><span class="line">  f</span><br><span class="line">+ bbb             # + 表示新增内容</span><br><span class="line">+ ccc</span><br><span class="line">+ ddd</span><br><span class="line">[root@localhost b]#</span><br></pre></td></tr></table></figure><h3 id="合并格式"><a href="#合并格式" class="headerlink" title="合并格式"></a>合并格式</h3><blockquote><p>如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了”合并格式”的diff，将f1和f2的上下文合并在一起显示<br>可以通过 <code>diff -U Num</code> 或 <code>diff --unified[=Num]</code>的方式指定显示上下文的行数，默认为3行(前三行加后三行)</p></blockquote><p><a href="/2019/06/29/git/git-cmd-diff/">git的diff格式就是采用的合并格式的变体</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost b]# diff f1 f2 -u</span><br><span class="line">--- f1  2020-05-22 00:21:43.668716845 +0800   # --- 表示变动前的文件</span><br><span class="line">+++ f2  2020-05-22 00:32:51.747625563 +0800   # +++ 表示变动后的文件</span><br><span class="line">@@ -1,9 +1,8 @@   # 变动的位置用两个@作为起首和结束</span><br><span class="line">                  # f1文件从第一行开始连续9行的内容变成了f2文件的第一行开始连续8行内容</span><br><span class="line">-0        # - 表示 f1 删除的行</span><br><span class="line"> 3</span><br><span class="line">-1</span><br><span class="line"> a</span><br><span class="line"> b</span><br><span class="line">-c</span><br><span class="line">-d</span><br><span class="line">-e</span><br><span class="line">+aaa      # + 表示 f2 新增的行</span><br><span class="line"> f</span><br><span class="line">+bbb</span><br><span class="line">+ccc</span><br><span class="line">+ddd</span><br><span class="line">[root@localhost b]#</span><br></pre></td></tr></table></figure><h3 id="side-by-side格式"><a href="#side-by-side格式" class="headerlink" title="side-by-side格式"></a>side-by-side格式</h3><blockquote><p>这种格式下，会将两个文件的内容分成两列对比展示出来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost b]# diff -y -W 20 f1 f2</span><br><span class="line">0     &lt;         # &lt; 表示只在f1文件中存在</span><br><span class="line">3       3       # 表示两个文件内容相同</span><br><span class="line">1     &lt;</span><br><span class="line">a       a</span><br><span class="line">b       b</span><br><span class="line">c     | aaa     # 两个文件中的内容有差异</span><br><span class="line">d     &lt;</span><br><span class="line">e     &lt;</span><br><span class="line">f       f</span><br><span class="line">      &gt; bbb     # &gt; 表示只在f2文件中存在</span><br><span class="line">      &gt; ccc</span><br><span class="line">      &gt; ddd</span><br><span class="line">[root@localhost b]#</span><br></pre></td></tr></table></figure><h3 id="命令格式说明"><a href="#命令格式说明" class="headerlink" title="命令格式说明"></a>命令格式说明</h3><p>diff [选项] [文件1或目录1] [文件2或目录2]（四种组合方式）</p><blockquote><p>比较两个文件时，如果其中一个文件为 <code>-</code> 符号，表示从标准输入读取，以 <code>ctrl+d</code> 结束输入<br>如果输入的参数一个时文件，一个是目录时，会在该目录下查找同名文件进行比较，如果文件不存，则提示失败<br>如果输入的参数是两个目录时，也是只比较目录下的同名文件，默认是只比较目录下的文件，不会递归比较子目录<br>diff命令返回0 表示无差异，返回1 表示有差异， 返回2 表示命令出错(如文件不存在等)</p></blockquote><p>常用的选项</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>--normal</code></td><td>正常格式进行展示，如果不指定显示格式，默认为正常格式</td></tr><tr><td><code>-c</code>或<code>-C NUM</code>或<code>--context=NUM</code></td><td>按照上下文格式进行展示</td></tr><tr><td><code>-u</code>或<code>-U NUM</code>或<code>--unified=NUM</code></td><td>按照合并格式进行展示</td></tr><tr><td><code>-y</code>或<code>--side-by-side</code></td><td>按照side-by-side格式进行展示</td></tr><tr><td><code>-W NUM</code>或<code>--width=NUm</code></td><td>指定<code>-y</code>模式下显示的总列数，默认为130</td></tr><tr><td><code>--suppress-common-lines</code></td><td>指定<code>-y</code>模式下，不显示相同内容的行</td></tr><tr><td><code>-r</code>或<code>--recursive</code></td><td>递归比较子目录</td></tr><tr><td><code>-x</code>或<code>--exclude=PAT</code></td><td>排除与PAT（pattern样式）匹配的文件</td></tr><tr><td><code>-X</code>或<code>--exculde-from=FILE</code></td><td>排除与FILE中样式匹配的文件</td></tr><tr><td><code>-i</code>或<code>--ignore-case</code></td><td>忽略大小写的区别</td></tr><tr><td><code>-b</code>或<code>--ignore-space-change</code></td><td>忽略空格的差异</td></tr><tr><td><code>-w</code>或<code>--ignore-all-space</code></td><td>忽略所有的空白差异</td></tr><tr><td><code>-B</code>或<code>--ignore-blank-line</code></td><td>忽略空白行差异</td></tr><tr><td><code>-I RE</code>或<code>--ignore-matching-lines=RE</code></td><td>忽略所有匹配RE（regexp正则表达式）的行的更改</td></tr><tr><td><code>-Z</code>或<code>--ignore-trailing-space</code></td><td>忽略行尾空格</td></tr><tr><td><code>-E</code>或<code>--ignore-tab-expansion</code></td><td>忽略tab扩展差异</td></tr><tr><td><code>--ignore-file-name-case</code></td><td>比较时忽略文件大小写</td></tr><tr><td><code>--no-ignore-file-name-case</code></td><td>比较时不忽略文件大小写</td></tr><tr><td><code>--ignore-file-name-case</code></td><td>比较时忽略文件大小写</td></tr><tr><td><code>-N</code>或<code>--new-file</code></td><td>比较目录时，如果f3只在a目录中存在，默认会输出<code>Only in a: f3</code>，如果配置了该参数后，diff命令会将f3文件与一个空白文件进行对比</td></tr><tr><td><code>-p</code>或<code>--show-c-function</code></td><td>如果比较的文件时c语言源文件，显示差异所在的函数名</td></tr><tr><td><code>-P</code>或<code>--unidirectional-new-file</code></td><td>与 <code>-N</code>类似，只有当第二个目录包含了第一个目录没有的文件时，才会将这个文件与空白文件做对比</td></tr></tbody></table><h2 id="patch命令"><a href="#patch命令" class="headerlink" title="patch命令"></a>patch命令</h2><blockquote><p>执行patch命令时，patch文件中定义的修改后的目录不能存在</p></blockquote><h3 id="patch命令说明"><a href="#patch命令说明" class="headerlink" title="patch命令说明"></a>patch命令说明</h3><p>patch命令的使用有两种格式</p><ul><li>如果针对单文件打补丁: <code>patch [option] [originalfile [patchfile]]</code></li><li>同时常用更多的方式为: <code>patch -pnum &lt; patchfile</code></li></ul><p>常用的命令选项<br>| 名称                   | 说明                                                                                                                                             |<br>| ———————- | ———————————————————————————————————————————————— |<br>| <code>--dry-run</code>            | 只是打印应用补丁后的结果，并不会实际修改文件                                                                                                     |<br>| <code>-R</code> 或 <code>--reverse</code>    | 该命令执行时会假设补丁文件是通过交换ori和mod参数，实际上可以对打过补丁后的文件做回滚操作                                                         |<br>| <code>-b</code>或<code>--backup</code>       | 对每一个修改的文件做备份，会生成xxx.orig备份文件                                                                                                 |<br>| <code>-pNum</code>或<code>--strip=NUM</code> | 设置执行命令时会去除patchfile中的几层路径名。0表示不删除，使用patchfile中的全路径，如果未指定该参数或NUM设置有问题，会提示找不到需要打补丁的文件 |</p><h3 id="diff-patch的补丁应用"><a href="#diff-patch的补丁应用" class="headerlink" title="diff + patch的补丁应用"></a>diff + patch的补丁应用</h3><blockquote><p>如果是对目录制作补丁文件，目录应该使用相对路径，不要使用绝对路径<br>两个目录的结构要一样</p></blockquote><p>根据修改后目录的内容不同，生成补丁的方式也会不一样</p><ul><li><p>如果mod的目录中只包含了对ori目录中某些文件的修改或新增了某些文件</p><p><code>diff -urP src_ori_dir src_mod_dir &gt; src.patch</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test_diff_patch]# tree ./src_ori</span><br><span class="line">./src_ori   # ori目录中有两个文件 123 和 abc，文件中的内容与文件名相同</span><br><span class="line">├── 123</span><br><span class="line">└── abc</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br><span class="line">[root@localhost test_diff_patch]# cat ./src_ori/*</span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> patch中修改了abc文件的内容为bbb，并新增了文件ccc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">[root@localhost test_diff_patch]# cat src.patch</span><br><span class="line">Only in src_ori: 123</span><br><span class="line">diff -ruP src_ori/abc src_mod/abc</span><br><span class="line">--- src_ori/abc 2020-05-23 14:25:13.895198462 +0800</span><br><span class="line">+++ src_mod/abc 2020-05-23 14:04:06.095735637 +0800</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-abc</span><br><span class="line">+bbb</span><br><span class="line">diff -ruP src_ori/ccc src_mod/ccc</span><br><span class="line">--- src_ori/ccc 1970-01-01 08:00:00.000000000 +0800</span><br><span class="line">+++ src_mod/ccc 2020-05-23 14:25:41.160887860 +0800</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+ccc</span><br><span class="line">[root@localhost test_diff_patch]# patch -p0 &lt; src.patch</span><br><span class="line">patching file src_ori/abc</span><br><span class="line">patching file src_ori/ccc</span><br><span class="line">[root@localhost test_diff_patch]# tree ./src_ori</span><br><span class="line">./src_ori   # 执行了patch命令后，ori中多了ccc文件，abc的内容也变成了bbb</span><br><span class="line">├── 123</span><br><span class="line">├── abc</span><br><span class="line">└── ccc</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br><span class="line">[root@localhost test_diff_patch]# cat ./src_ori/*</span><br><span class="line">123</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">[root@localhost test_diff_patch]#</span><br></pre></td></tr></table></figure></li><li><p>只要mod的目录中有对ori目录文件做删除，那么mod目录中必须包含未删除ori中的其他所有文件</p><p><code>diff -urN src_ori_dir src_mod_dir &gt; src.patch</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ori中文件内容与文件名相同</span></span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$ ll ./*/*</span><br><span class="line">-rwxrwxrwx 1 baoze baoze   7 Jun  2 18:55 ./mod/aaa*</span><br><span class="line">-rwxrwxrwx 1 baoze baoze   4 Jun  2 18:54 ./ori/aaa*</span><br><span class="line">-rwxrwxrwx 1 baoze baoze   4 Jun  2 18:54 ./ori/bbb*</span><br><span class="line"></span><br><span class="line">./ori/inner:</span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx 1 baoze baoze 512 Jun  2 18:54 ./</span><br><span class="line">drwxrwxrwx 1 baoze baoze 512 Jun  2 18:54 ../</span><br><span class="line">-rwxrwxrwx 1 baoze baoze   4 Jun  2 18:54 ccc*</span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mod中内容修改了aaa文件，删除了bbb和ccc文件</span></span></span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$ diff -ruN ori mod &gt; mod.patch</span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$ cat mod.patch</span><br><span class="line">diff -ruN ori/aaa mod/aaa</span><br><span class="line">--- ori/aaa     2020-06-02 18:54:37.447786500 +0800</span><br><span class="line">+++ mod/aaa     2020-06-02 18:55:36.400920500 +0800</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-aaa</span><br><span class="line">+newaaa</span><br><span class="line">diff -ruN ori/bbb mod/bbb</span><br><span class="line">--- ori/bbb     2020-06-02 18:54:42.786351600 +0800</span><br><span class="line">+++ mod/bbb     1970-01-01 08:00:00.000000000 +0800</span><br><span class="line">@@ -1 +0,0 @@</span><br><span class="line">-bbb</span><br><span class="line">diff -ruN ori/inner/ccc mod/inner/ccc</span><br><span class="line">--- ori/inner/ccc       2020-06-02 18:54:29.759650700 +0800</span><br><span class="line">+++ mod/inner/ccc       1970-01-01 08:00:00.000000000 +0800</span><br><span class="line">@@ -1 +0,0 @@</span><br><span class="line">-ccc</span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对ori进行打补丁</span></span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$ patch -p0 &lt; mod.patch</span><br><span class="line">patching file ori/aaa</span><br><span class="line">patching file ori/bbb</span><br><span class="line">patching file ori/inner/ccc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打补丁后ori目录下只有aaa文件，内容也有修改</span></span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$ ll ori/</span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx 1 baoze baoze 512 Jun  2 19:08 ./</span><br><span class="line">drwxrwxrwx 1 baoze baoze 512 Jun  2 19:06 ../</span><br><span class="line">-rwxrwxrwx 1 baoze baoze   7 Jun  2 19:08 aaa*</span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$ cat ori/aaa</span><br><span class="line">newaaa</span><br><span class="line">baoze@DESKTOP-EV6CLJE:/mnt/d/workspace/patch_test$</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> diff </tag>
            
            <tag> patch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3官方文档学习笔记</title>
      <link href="/2020/05/20/python/python3-doc-notes/"/>
      <url>/2020/05/20/python/python3-doc-notes/</url>
      
        <content type="html"><![CDATA[<p><code>Python3.8.0</code></p><p><a href="/2020/07/04/python/python3-doc-tutorial/">Python Tutorial</a></p><p><a href="/2020/07/04/python/python3-doc-stardard-lib/">Python Standard Libary</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用总结</title>
      <link href="/2020/05/20/python/pyhton-usage/"/>
      <url>/2020/05/20/python/pyhton-usage/</url>
      
        <content type="html"><![CDATA[<p><code>基于Python3</code></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><a href="/2020/05/20/python/python3-doc-notes">python3官方文档学习笔记</a></p><p><a href="/2020/06/25/python/python-pip">pip工具</a></p><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8官网文档</a><br><a href="https://blog.csdn.net/m0_37447148/article/details/85338720" target="_blank" rel="noopener">PEP8中文</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coverage-test</title>
      <link href="/2020/02/10/test/coverage-test/"/>
      <url>/2020/02/10/test/coverage-test/</url>
      
        <content type="html"><![CDATA[<p><a href="blog.csdn.net/livelylittefish/article/list/2">参考1</a><br><a href="blog.csdn.net/yanxiangyfg/article/details/80989580">参考2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> lcov </tag>
            
            <tag> gcov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps命令详解</title>
      <link href="/2019/12/04/linux/linux-cmd-ps/"/>
      <url>/2019/12/04/linux/linux-cmd-ps/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ps命令支持三种不同类型的选项</p><ul><li>UNIX选项，以 <code>-</code> 符号开头</li><li>BSD选项，不能包含 <code>-</code></li><li>GUN选项，以 <code>--</code> 符号开头</li></ul><blockquote><p>不同类型的选项可以自由混合，但是有可能会产生冲突。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Unix模式显示系统中的所有process进程"><a href="#Unix模式显示系统中的所有process进程" class="headerlink" title="Unix模式显示系统中的所有process进程"></a>Unix模式显示系统中的所有process进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -e</span><br><span class="line">ps -ef</span><br><span class="line">ps -eF</span><br><span class="line">ps -ely</span><br></pre></td></tr></table></figure><h3 id="BSD模式显示系统中的所有process进程"><a href="#BSD模式显示系统中的所有process进程" class="headerlink" title="BSD模式显示系统中的所有process进程"></a>BSD模式显示系统中的所有process进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps ax</span><br><span class="line">ps aux</span><br></pre></td></tr></table></figure><h3 id="树状显示系统中所有process进程"><a href="#树状显示系统中所有process进程" class="headerlink" title="树状显示系统中所有process进程"></a>树状显示系统中所有process进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ejH</span><br><span class="line">ps axjf</span><br><span class="line">ps -ef f</span><br></pre></td></tr></table></figure><h3 id="树状显示系统中的所有threads线程"><a href="#树状显示系统中的所有threads线程" class="headerlink" title="树状显示系统中的所有threads线程"></a>树状显示系统中的所有threads线程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -eLf</span><br><span class="line">ps axms</span><br></pre></td></tr></table></figure><h3 id="To-get-security-info"><a href="#To-get-security-info" class="headerlink" title="To get security info"></a>To get security info</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -eo euser,ruser,suser,fuser,f,comm,label</span><br><span class="line">ps axZ</span><br><span class="line">ps -eM</span><br></pre></td></tr></table></figure><h3 id="To-see-every-process-running-as-root-real-amp-effective-ID-in-user-format"><a href="#To-see-every-process-running-as-root-real-amp-effective-ID-in-user-format" class="headerlink" title="To see every process running as root (real &amp; effective ID) in user format"></a>To see every process running as root (real &amp; effective ID) in user format</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -U root -u root u</span><br></pre></td></tr></table></figure><h3 id="To-see-every-process-with-a-user-defined-format"><a href="#To-see-every-process-with-a-user-defined-format" class="headerlink" title="To see every process with a user-defined format"></a>To see every process with a user-defined format</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm</span><br><span class="line">ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm</span><br><span class="line">ps -Ao pid,tt,user,fname,tmout,f,wchan</span><br></pre></td></tr></table></figure><h3 id="Print-only-the-process-IDs-of-syslogd"><a href="#Print-only-the-process-IDs-of-syslogd" class="headerlink" title="Print only the process IDs of syslogd"></a>Print only the process IDs of syslogd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -C syslogd -o pid=</span><br></pre></td></tr></table></figure><h3 id="Print-only-the-name-of-PID-42"><a href="#Print-only-the-name-of-PID-42" class="headerlink" title="Print only the name of PID 42"></a>Print only the name of PID 42</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -q 42 -o comm=</span><br></pre></td></tr></table></figure><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-A</code><br> <code>-e</code></td><td>显示所有进程信息</td></tr><tr><td><code>-123</code><br> <code>123</code><br> <code>--pid pidlist</code><br> <code>-p pidlist</code><br><code>p pidlist</code></td><td>显示pidlist中指定的所有pid的进程信息<br>接受空白分隔或逗号分隔的列表形式的单个参数，如<code>-p &quot;123,124&quot;</code>或<code>-p &quot;123 124&quot;</code></td></tr><tr><td><code>-U userlist</code><br><code>--User userlist</code></td><td>显示userlist中指定的RUID(real user id)或name的进程信息<br>RUID表示create该进程的用户</td></tr><tr><td><code>U userlist</code><br><code>-u userlist</code><br><code>--user userlist</code></td><td>显示userlist中指定的EUID(effective user id)或name的进程信息<br>EUID用于系统决定用户对文件资源的访问权限，一般情况下等同于RUID</td></tr><tr><td><code>-f</code><br><code>-F</code></td><td>显示所有的列，通常与其它unix格式选项联合使用<br>使用该参数时会显示进程的命令参数信息<br>与<code>-L</code>参数同时使用时，还会显示NLWP(number of threads)和LWP(thread id)信息</td></tr><tr><td><code>e</code></td><td>在命令列中最后显示进程的环境变量信息，如 <code>ps -ef e</code></td></tr><tr><td><code>f</code></td><td>ASCII字符显示树状结构, 表示程序间的层次关系</td></tr><tr><td><code>-m</code><br><code>m</code></td><td>显示进程中的线程信息</td></tr><tr><td><code>-L</code></td><td>Show threads, possibly with LWP and NLWP columns</td></tr><tr><td><code>o format</code><br><code>-o format</code><br><code>--format format</code></td><td>用户自定义格式。<br>format可以是一个空白或逗号分割的列表，用于指定输出的列，支持的列表内容见<code>输出列内容</code><br>列的表头内容可以重命名 <code>ps -o pid,ruser=RealUser</code><br>列的表头可以忽略 <code>ps -o pid=,comm=</code></td></tr></tbody></table><p><code>上述中xxxlist的内容，表示接受空白分割或逗号分割的列表形式的单个参数</code></p><h2 id="输出列内容"><a href="#输出列内容" class="headerlink" title="输出列内容"></a>输出列内容</h2>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux历史记录history配置</title>
      <link href="/2019/11/27/linux/linux-history-config/"/>
      <url>/2019/11/27/linux/linux-history-config/</url>
      
        <content type="html"><![CDATA[<h2 id="history命令说明"><a href="#history命令说明" class="headerlink" title="history命令说明"></a>history命令说明</h2><h3 id="查看最近10条记录"><a href="#查看最近10条记录" class="headerlink" title="查看最近10条记录"></a>查看最近10条记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history 10</span><br></pre></td></tr></table></figure><h3 id="重新执行某条历史命令"><a href="#重新执行某条历史命令" class="headerlink" title="重新执行某条历史命令"></a>重新执行某条历史命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!1000   # 执行第1000条历史命令</span><br><span class="line">!-2     # 执行倒数第二条历史命令</span><br><span class="line">!!      # 执行上一条命令</span><br><span class="line">!string # 执行最近一条以string开头的命令</span><br></pre></td></tr></table></figure><h2 id="history配置"><a href="#history配置" class="headerlink" title="history配置"></a>history配置</h2><p>可以通过设置某些环境变量，实现history的功能配置</p><table><thead><tr><th>环境变量</th><th>备注</th></tr></thead><tbody><tr><td>HISTSIZE</td><td>history保留历史命令的条数，如果配置为0，则不保留history</td></tr><tr><td>HISTFILE</td><td>保存历史命令的文件，默认为 <code>.bash_history</code></td></tr><tr><td>HISTFILESIZE</td><td><code>.bash_history</code>中保留历史命令条数</td></tr><tr><td>HISTTIMEFORMAT</td><td>history中显示时间格式，不配置则不显示</td></tr><tr><td>HISCONTROL</td><td>历史命令记录控制。\n  ignoredups: 忽略连续重复的命令\n  ignorespace: 忽略以空白字符开头的命令\n  ignoreboth: 同时忽略以上两种\n  erasedups: 忽略所有历史记录中重复的命令</td></tr><tr><td>HISTIGNORE</td><td>配置忽略指定命令， 如 HISTIGNORE=”pwd:ls:ls -ltr”</td></tr></tbody></table><h2 id="常用history配置"><a href="#常用history配置" class="headerlink" title="常用history配置"></a>常用history配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改 /etc/profile中历史记录最大条数</span></span><br><span class="line">sed -i 's/^HISTSIZE=1000/HISTSIZE=9999/g' /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 .bashrc中增加以下配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取操作者的ip信息</span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null | awk '&#123;print $NF&#125;' | sed -e 's/[()]//g'`</span><br><span class="line">if [ "$USER_IP" = "" ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置<span class="built_in">history</span>命令时间格式(包含年月日，时分秒，操作者ip，操作者使用用户 信息)</span></span><br><span class="line">export HISTTIMEFORMAT="`whoami` %F %T $USER_IP "</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使能(-s) histappend配置，可以通过执行<span class="built_in">shopt</span>命令查看当前各种配置的使能情况</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果使能 histappend，表示在shell退出时将本shell中所有的历史记录追加到 HISTFILE 指定的文件中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果未使能 histappend，表示在shell退出时将历史记录覆盖指定文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通常该配置在 /etc/bashrc中存在，在 /root/.bashrc中会调用执行 /etc/bashrc</span></span><br><span class="line">shopt -s histappend</span><br><span class="line"><span class="meta">#</span><span class="bash"> PROMPT_COMMAND中的内容为 在打印每个主提示符之前执行的命令</span></span><br><span class="line">PROMPT_COMMAND="history -a;history -c;history -r;$PROMPT_COMMAND"</span><br></pre></td></tr></table></figure><h2 id="清除history记录"><a href="#清除history记录" class="headerlink" title="清除history记录"></a>清除history记录</h2><p>当打开一个session时，在该session中执行的命令会放在缓存中，当终端退出或关闭时，会将缓存中的内容写入HISTFILE指定的文件中。</p><p>当session被kill掉时，该session中缓存的命令，无法记录到HISTFILE指定文件。</p><h3 id="清除当前session的命令"><a href="#清除当前session的命令" class="headerlink" title="清除当前session的命令"></a>清除当前session的命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history -c</span><br></pre></td></tr></table></figure><h3 id="清除所有的历史记录"><a href="#清除所有的历史记录" class="headerlink" title="清除所有的历史记录"></a>清除所有的历史记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "" &gt; /root/.bash_history</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-systemd</title>
      <link href="/2019/11/24/linux/linux-systemd/"/>
      <url>/2019/11/24/linux/linux-systemd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/systemd/systemd" target="_blank" rel="noopener">systemd github</a><br><a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd官网</a><br><a href="https://www.freedesktop.org/software/systemd/man/" target="_blank" rel="noopener">systemd man手册</a></p><p><a href="https://www.cnblogs.com/aaronLinux/p/10654523.html" target="_blank" rel="noopener">参考1</a><br><a href="https://unix.stackexchange.com/questions/233468/how-does-systemd-use-etc-init-d-scripts" target="_blank" rel="noopener">参考2</a><br><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">参考3</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git中ssl证书设置</title>
      <link href="/2019/11/23/git/git-ssl-no-verify/"/>
      <url>/2019/11/23/git/git-ssl-no-verify/</url>
      
        <content type="html"><![CDATA[<h2 id="忽略ssl证书"><a href="#忽略ssl证书" class="headerlink" title="忽略ssl证书"></a>忽略ssl证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure><p>某些场景(如在docker的构建环境中，不希望通过修改docker来忽略ssl校验)下，不方便使用上述命令设置忽略ssl校验时，可以通过设置环境变量  <code>GIT_SSL_NO_VERIFY</code>为 <code>true</code> 的方式进行忽略</p><h2 id="指定ssl证书"><a href="#指定ssl证书" class="headerlink" title="指定ssl证书"></a>指定ssl证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslCAPath /git/certificates</span><br></pre></td></tr></table></figure><p>可以通过设置环境变量 <code>GIT_SSL_CAPATH=/git/certificates</code> 来指定证书路径</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终止长时间运行的构建记录</title>
      <link href="/2019/11/23/jenkins/jenkins-stop-longtime-builds/"/>
      <url>/2019/11/23/jenkins/jenkins-stop-longtime-builds/</url>
      
        <content type="html"><![CDATA[<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> timeThreshold = <span class="number">200</span> <span class="comment">// seconds</span></span><br><span class="line"><span class="keyword">def</span> jobs = Jenkins.instance.getAllItems(hudson.model.Job.<span class="keyword">class</span>)</span><br><span class="line"></span><br><span class="line">jobs.each &#123; job -&gt;</span><br><span class="line">    <span class="keyword">def</span> builds = job.getBuilds()</span><br><span class="line">    <span class="keyword">if</span>(builds) &#123;</span><br><span class="line">        builds.each &#123;</span><br><span class="line">          <span class="keyword">if</span>(it.isBuilding()) &#123;</span><br><span class="line">            <span class="keyword">def</span> duration = System.currentTimeMillis() - it.getStartTimeInMillis()</span><br><span class="line">            <span class="keyword">if</span> (duration &gt; timeThreshold * <span class="number">1000</span>) &#123;</span><br><span class="line">              println(<span class="string">"abort job:$&#123;job.name&#125; buildNum:$&#123;it.number&#125; duration:$&#123;duration&#125;ms"</span>)</span><br><span class="line">              it.getExecutor().interrupt(hudson.model.Result.ABORTED)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"$&#123;job.name&#125; don't have builder, skip..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins通过ssh方式连接执行机</title>
      <link href="/2019/11/23/jenkins/jenkins-ssh-slave/"/>
      <url>/2019/11/23/jenkins/jenkins-ssh-slave/</url>
      
        <content type="html"><![CDATA[<h3 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h3><ul><li>master通过ssh协议访问slave的sshd服务，先建立ssh连接</li><li>检查slave中的java程序及版本</li><li>拷贝最新的remoting.jar到slave中，如果slave中已经存在remoting.jar，则校验master与slave中jar的md5值是否一致，如果不一致则更新。</li><li>启动命令建立master与slave通信的专用通道，后续master向slave下发命令都是通过该通道进行。</li></ul><blockquote><p>slave中的连接日志保存在 ${slave_workspace}/remoting/logs 目录下，每次master与slave的连接都会生成一个 remoting.log.x 的日志文件<br>master中的连接日志保存在 ${master_jenkins_home}/logs/slaves/${slave_name}/slave.log.x</p></blockquote><p>master上的连接日志如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">SSHLauncher&#123;host=&apos;192.168.43.150&apos;, port=22, credentialsId=&apos;test&apos;, jvmOptions=&apos;&apos;, javaPath=&apos;&apos;, prefixStartSlaveCmd=&apos;&apos;, suffixStartSlaveCmd=&apos;&apos;, launchTimeoutSeconds=210, maxNumRetries=10, retryWaitTime=15, sshHostKeyVerificationStrategy=hudson.plugins.sshslaves.verifiers.NonVerifyingKeyVerificationStrategy, tcpNoDelay=true, trackCredentials=true&#125;</span><br><span class="line">[11/23/19 17:28:18] [SSH] Opening SSH connection to 192.168.43.150:22.</span><br><span class="line">[11/23/19 17:28:18] [SSH] WARNING: SSH Host Keys are not being verified. Man-in-the-middle attacks may be possible against this connection.</span><br><span class="line">[11/23/19 17:28:24] [SSH] 认证成功。</span><br><span class="line">[11/23/19 17:28:24] [SSH] The remote user&apos;s environment is:</span><br><span class="line">BASH=/usr/bin/bash</span><br><span class="line">BASHOPTS=cmdhist:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath</span><br><span class="line">BASH_ALIASES=()</span><br><span class="line">BASH_ARGC=()</span><br><span class="line">BASH_ARGV=()</span><br><span class="line">BASH_CMDS=()</span><br><span class="line">BASH_EXECUTION_STRING=set</span><br><span class="line">BASH_LINENO=()</span><br><span class="line">BASH_SOURCE=()</span><br><span class="line">BASH_VERSINFO=([0]=&quot;4&quot; [1]=&quot;2&quot; [2]=&quot;46&quot; [3]=&quot;2&quot; [4]=&quot;release&quot; [5]=&quot;x86_64-redhat-linux-gnu&quot;)</span><br><span class="line">BASH_VERSION=&apos;4.2.46(2)-release&apos;</span><br><span class="line">DIRSTACK=()</span><br><span class="line">EUID=0</span><br><span class="line">GROUPS=()</span><br><span class="line">HOME=/root</span><br><span class="line">HOSTNAME=localhost.localdomain</span><br><span class="line">HOSTTYPE=x86_64</span><br><span class="line">IFS=$&apos; \t\n&apos;</span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LESSOPEN=&apos;||/usr/bin/lesspipe.sh %s&apos;</span><br><span class="line">LOGNAME=root</span><br><span class="line">MACHTYPE=x86_64-redhat-linux-gnu</span><br><span class="line">MAIL=/var/mail/root</span><br><span class="line">OPTERR=1</span><br><span class="line">OPTIND=1</span><br><span class="line">OSTYPE=linux-gnu</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span><br><span class="line">PIPESTATUS=([0]=&quot;0&quot;)</span><br><span class="line">PPID=18696</span><br><span class="line">PS4=&apos;+ &apos;</span><br><span class="line">PWD=/root</span><br><span class="line">SELINUX_LEVEL_REQUESTED=</span><br><span class="line">SELINUX_ROLE_REQUESTED=</span><br><span class="line">SELINUX_USE_CURRENT_RANGE=</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">SHELLOPTS=braceexpand:hashall:interactive-comments</span><br><span class="line">SHLVL=1</span><br><span class="line">SSH_CLIENT=&apos;192.168.43.150 53796 22&apos;</span><br><span class="line">SSH_CONNECTION=&apos;192.168.43.150 53796 192.168.43.150 22&apos;</span><br><span class="line">TERM=dumb</span><br><span class="line">UID=0</span><br><span class="line">USER=root</span><br><span class="line">XDG_RUNTIME_DIR=/run/user/0</span><br><span class="line">XDG_SESSION_ID=21</span><br><span class="line">_=/etc/bashrc</span><br><span class="line">[11/23/19 17:28:24] [SSH] Checking java version of /data/workspace/jdk/bin/java</span><br><span class="line">Couldn&apos;t figure out the Java version of /data/workspace/jdk/bin/java</span><br><span class="line">bash: /data/workspace/jdk/bin/java: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line">[11/23/19 17:28:24] [SSH] Checking java version of java</span><br><span class="line">[11/23/19 17:28:24] [SSH] java -version returned 11.0.3.</span><br><span class="line">[11/23/19 17:28:24] [SSH] Starting sftp client.</span><br><span class="line">[11/23/19 17:28:24] [SSH] 正在拷贝最新版本的 remoting.jar...</span><br><span class="line">[11/23/19 17:28:24] [SSH] Copied 875,406 bytes.</span><br><span class="line">Expanded the channel window size to 4MB</span><br><span class="line">[11/23/19 17:28:24] [SSH] Starting agent process: cd &quot;/data/workspace&quot; &amp;&amp; java  -jar remoting.jar -workDir /data/workspace -jar-cache /data/workspace/remoting/jarCache</span><br><span class="line">11月 23, 2019 5:28:26 下午 org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir</span><br><span class="line">信息: Using /data/workspace/remoting as a remoting work directory</span><br><span class="line">11月 23, 2019 5:28:26 下午 org.jenkinsci.remoting.engine.WorkDirManager setupLogging</span><br><span class="line">信息: Both error and output logs will be printed to /data/workspace/remoting</span><br><span class="line">&lt;===[JENKINS REMOTING CAPACITY]===&gt;channel started</span><br><span class="line">Remoting version: 3.35</span><br><span class="line">This is a Unix agent</span><br><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by jenkins.slaves.StandardOutputSwapper$ChannelSwapper to constructor java.io.FileDescriptor(int)</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of jenkins.slaves.StandardOutputSwapper$ChannelSwapper</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line">Evacuated stdout</span><br><span class="line">Agent successfully connected and online</span><br></pre></td></tr></table></figure><h3 id="重连方法"><a href="#重连方法" class="headerlink" title="重连方法"></a>重连方法</h3><p>修改了slave的某些配置(如<a href="/2019/11/23/jenkins/jenkins-slave-space-config#SSH方式连接执行机tmp目录配置">修改了tmpdir</a>)后需要重新建立slave与master的连接，通过master上的<code>Mark this node temporarily offline</code>按钮时实现不了重连功能的。</p><ul><li>通过 <code>Disconnect</code> 按钮进行断链，然后重新 <code>Launch agent</code></li><li>重启执行机，执行机重启后，master会自动重连</li><li>执行<code>Delete Agent</code>删掉该执行机后重新添加该执行机</li><li><p>到执行机上杀掉对应进程，然后再master中再<code>Launch agent</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef |grep remoting.jar</span><br><span class="line">root      8015  7860  0 17:16 ?        00:00:00 bash -c cd "/data/workspace" &amp;&amp; java  -jar remoting.jar -workDir /data/workspace -jar-cache /data/workspace/remoting/jarCache</span><br><span class="line">root      8020  8015  5 17:16 ?        00:00:08 java -jar remoting.jar -workDir /data/workspace -jar-cache /data/workspace/remoting/jarCache</span><br><span class="line">root     10188  5056  0 17:19 pts/0    00:00:00 grep --color=auto remoting.jar</span><br><span class="line">[root@localhost ~]# kill -9 8015</span><br><span class="line">[root@localhost ~]# ps -ef |grep remoting.jar</span><br><span class="line">root     10552  5056  0 17:19 pts/0    00:00:00 grep --color=auto remoting.jar</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins执行机磁盘空间监控配置</title>
      <link href="/2019/11/23/jenkins/jenkins-slave-space-config/"/>
      <url>/2019/11/23/jenkins/jenkins-slave-space-config/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Jenkins的master会监控执行机中的空间状态，当执行机中的空间不满足某个条件时会自动offline掉该执行机，该项配置的地方即为: <a href="http://192.168.43.150:8080/computer/configure" target="_blank" rel="noopener">http://192.168.43.150:8080/computer/configure</a></p><p><img src="/img/jenkins_slave_space.png" alt="jenkins执行机空间监控配置"></p><ul><li>Free Disk Space 指的是Jenkins_home所在磁盘的空间，默认阈值为1G。</li><li>Free Temp Space 检查的是 <code>java.io.tmpdir</code> 系统属性所指定的分区目录，任务运行过程中经常会在tmp目录中创建一些临时文件</li></ul><p>通常情况下linux执行机中tmp目录指向的是/tmp目录，windows执行机中tmp目录指向的时C:\Users\${user_name}\AppData\Local\Temp\</p><blockquote><p>可以通过在执行机的script console中执行脚本 System.getProperty(“java.io.tmpdir”)查询当前执行机的tmpdir</p></blockquote><p>当执行机中的空间不足又无法进行数据清理时，可以通过执行java的启动参数将tmp目录指定为数据盘所在目录，然后<a href="/2019/11/23/jenkins/jenkins-ssh-slave#重连方法">重新建立master与slave之间的连接</a>即可。</p><h3 id="SSH方式连接执行机tmp目录配置"><a href="#SSH方式连接执行机tmp目录配置" class="headerlink" title="SSH方式连接执行机tmp目录配置"></a>SSH方式连接执行机tmp目录配置</h3><p><img src="/img/jenkins_slave_ssh_tmpdir.png" alt="ssh连接执行机指定tmp目录"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.io.tmpdir=/data/tmp -jar remoting.jar -workDir /data/workspace -jar-cache /data/workspace/remoting/jarCache</span><br></pre></td></tr></table></figure><h3 id="JNLP方式连接执行机tmp目录配置"><a href="#JNLP方式连接执行机tmp目录配置" class="headerlink" title="JNLP方式连接执行机tmp目录配置"></a>JNLP方式连接执行机tmp目录配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.io.tmpdir=d:/jenkins_workspace/tmp -jar agent.jar -jnlpUrl http://192.168.43.150:8080/computer/192.168.43.100/slave-agent.jnlp -secret 18ba424329d85b70fcf59f4e6aabf41614381867e5752b72a1f19bf6e6ce361c -workDir "d:/jenkins_workspace"</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker attach命令</title>
      <link href="/2019/11/19/docker/docker-attach-cmd/"/>
      <url>/2019/11/19/docker/docker-attach-cmd/</url>
      
        <content type="html"><![CDATA[<p><code>docker attach</code>命令可以将当前终端的标准输入、标准输出和标准错误连接到指定的容器中，这允许操作者查看其正在进行的输出或交互式地控制它，就像命令直接在终端中运行一样。</p><ul><li><p>该命令显示的是容器 <code>ENTRYPOINT/CMD</code> 进程的输出, 执行该命令时有可能看起来像是hang住了，但是实际上进程可能没有与终端进行交互(输入内容到终端)。</p></li><li><p>可以在docker的宿主机不同session中同时执行多次attach命令。</p></li></ul><h2 id="退出attach方式"><a href="#退出attach方式" class="headerlink" title="退出attach方式"></a>退出attach方式</h2><h3 id="CRTL-p-CTRL-q-方式"><a href="#CRTL-p-CTRL-q-方式" class="headerlink" title="CRTL+p CTRL+q 方式"></a>CRTL+p CTRL+q 方式</h3><p><code>ctrl+p ctrl+q</code>是默认的detach键序列(key sequence)，也可以通过<code>--detach-keys string</code>来覆盖默认的键序列。自定义的string可以是[a-Z]的字母或<code>ctrl-</code>与以下内容的任意组合:</p><ul><li><p>a-z (小写字母)</p></li><li><p>@</p></li><li><p>[</p></li><li><p>\</p></li><li><p>_</p></li><li><p>^</p></li></ul><p>这种方式要求容器运行(<code>docker run</code>)时必须同时指定 <code>-i -t</code> 参数。采用这种方式只是从容器中detach出来，不会停止容器的运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 1 ##########</span></span></span><br><span class="line">[root@localhost ~]# docker run -it centos:8 /bin/bash --login</span><br><span class="line">[root@a58c215443bd /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  2 11:21 pts/0    00:00:00 /bin/bash --login</span><br><span class="line">root        18     1  0 11:21 pts/0    00:00:00 ps -ef</span><br><span class="line">[root@a58c215443bd /]#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 2 ##########</span></span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID    IMAGE       COMMAND               CREATED           STATUS          PORTS       NAMES</span><br><span class="line">a58c215443bd    centos:8    "/bin/bash --login"   13 seconds ago    Up 10 seconds               epic_haslett</span><br><span class="line">[root@localhost ~]# docker attach a58c</span><br><span class="line">[root@a58c215443bd /]# [ctrl+p ctrl+q] read escape sequence</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID    IMAGE       COMMAND               CREATED           STATUS          PORTS       NAMES</span><br><span class="line">a58c215443bd    centos:8    "/bin/bash --login"   56 seconds ago    Up 52 seconds               epic_haslett</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p>如果容器运行时未同时指定 <code>-i -t</code> 参数，CTRL+p CTRL+q 无效。</p><h3 id="CTRL-c方式"><a href="#CTRL-c方式" class="headerlink" title="CTRL+c方式"></a>CTRL+c方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--sig-proxy=true|false # 默认值 true</span><br><span class="line">   Proxy all received signals to the process (non-TTY mode only). SIGCHLD, SIGKILL, and SIGSTOP are not proxied.</span><br></pre></td></tr></table></figure><p>该选项仅在non-TTY模式下起作用，即docker run时不指定-t选项。此时，默认–sig-proxy为true，SIGINT信号被发送至docker中PID为1的进程。</p><p><code>CTRL+c</code> 发送 SIGKILL 信号到容器。If –sig-proxy is true (the default),CTRL-c sends a SIGINT to the container</p><blockquote><p>在容器中以PID 1运行的进程会被Linux特别处理:它会忽略任何带有默认操作的信号。因此，除非进行了相应的编码，否则进程不会在SIGINT或SIGTERM上终止。</p></blockquote><h4 id="–sig-proxy-true-amp-amp-docker-run-it"><a href="#–sig-proxy-true-amp-amp-docker-run-it" class="headerlink" title="–sig-proxy=true &amp;&amp; docker run -it"></a>–sig-proxy=true &amp;&amp; docker run -it</h4><p><code>交互式启动bash CTRL+C作用在attach的bash，对容器退出无效，在attach中输入exit时容器退出</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### 交互式启动bash时 session 1</span></span></span><br><span class="line">[root@localhost ~]# docker run -it centos:8 /bin/bash --login</span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">[root@b9c822d1b3eb /]#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 2</span></span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE        COMMAND               CREATED             STATUS         PORTS      NAMES</span><br><span class="line">b9c822d1b3eb        centos:8     "/bin/bash --login"   46 seconds ago      Up 44 seconds             sleepy_kepler</span><br><span class="line">[root@localhost ~]# docker attach b9c</span><br><span class="line">[root@b9c822d1b3eb /]# ^C</span><br><span class="line">[root@b9c822d1b3eb /]# exit</span><br><span class="line">logout</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE      COMMAND      CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p><code>交互式启动非bash时 CTRL+C对容器退出有效</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 1</span></span></span><br><span class="line">[root@localhost ~]# docker run -it centos:8 top -b</span><br><span class="line">top - 12:46:53 up  4:28,  0 users,  load average: 1.76, 1.75, 1.84</span><br><span class="line">Tasks:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s): 60.0 us, 40.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">MiB Mem :    991.2 total,    145.6 free,    466.6 used,    379.1 buff/cache</span><br><span class="line">MiB Swap:   1024.0 total,    841.5 free,    182.5 used.    383.2 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0   48264   1980   1464 R  20.0   0.2   0:00.05 top</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 2</span></span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE          COMMAND         CREATED             STATUS           PORTS      NAMES</span><br><span class="line">0fb225d37701        centos:8       "top -b"        23 seconds ago      Up 20 seconds               confident_turing</span><br><span class="line">[root@localhost ~]# docker attach 0fb</span><br><span class="line">top - 12:47:25 up  4:28,  0 users,  load average: 2.22, 1.86, 1.88</span><br><span class="line">Tasks:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s): 39.5 us, 42.0 sy,  0.0 ni, 16.6 id,  0.0 wa,  0.0 hi,  1.9 si,  0.0 st</span></span><br><span class="line">MiB Mem :    991.2 total,    146.1 free,    465.8 used,    379.3 buff/cache</span><br><span class="line">MiB Swap:   1024.0 total,    841.5 free,    182.5 used.    384.0 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0   48264   1980   1464 R   0.0   0.2   0:00.06 top</span><br><span class="line"></span><br><span class="line">top - 12:47:25 up  4:28,  0 users,  load average: 2.22, 1.86, 1.88</span><br><span class="line">Tasks:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s): 66.7 us, 33.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">MiB Mem :    991.2 total,    146.1 free,    465.8 used,    379.3 buff/cache</span><br><span class="line">MiB Swap:   1024.0 total,    841.5 free,    182.5 used.    384.0 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0   48264   1980   1464 R   0.0   0.2   0:00.06 top^C</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE        COMMAND             CREATED             STATUS      PORTS      NAMES</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><h4 id="–sig-proxy-true-amp-amp-docker-run-d"><a href="#–sig-proxy-true-amp-amp-docker-run-d" class="headerlink" title="–sig-proxy=true &amp;&amp; docker run -d"></a>–sig-proxy=true &amp;&amp; docker run -d</h4><p><code>交互式启动非bash时 CTRL+C对容器退出有效</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d centos:8 top -b</span><br><span class="line">645242bbe8be193008f3794b4d9eb5dd88274da8b6b882743ec1c3c232d96a59</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE          COMMAND             CREATED             STATUS          PORTS        NAMES</span><br><span class="line">645242bbe8be        centos:8       "top -b"            6 seconds ago       Up 4 seconds                 happy_moser</span><br><span class="line">[root@localhost ~]# docker attach 645</span><br><span class="line">top - 12:52:15 up  4:33,  0 users,  load average: 2.04, 1.93, 1.89</span><br><span class="line">Tasks:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s): 22.7 us, 29.5 sy,  0.0 ni, 46.0 id,  0.0 wa,  0.0 hi,  1.8 si,  0.0 st</span></span><br><span class="line">MiB Mem :    991.2 total,    143.9 free,    465.4 used,    381.9 buff/cache</span><br><span class="line">MiB Swap:   1024.0 total,    841.5 free,    182.5 used.    384.3 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0   48264   1976   1464 R   0.3   0.2   0:00.07 top^C</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE           COMMAND             CREATED         STATUS              PORTS        NAMES</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><h4 id="–sig-proxy-false-amp-amp-docker-run-it"><a href="#–sig-proxy-false-amp-amp-docker-run-it" class="headerlink" title="–sig-proxy=false &amp;&amp; docker run -it"></a>–sig-proxy=false &amp;&amp; docker run -it</h4><p><code>交互式启动bash时 CTRL+C对容器退出无效，在attach中输入exit时容器退出</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 1</span></span></span><br><span class="line">[root@localhost ~]# docker run -it centos:8 /bin/bash --login</span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">[root@308cd9572fe2 /]#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### session 2</span></span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE         COMMAND               CREATED             STATUS         PORTS        NAMES</span><br><span class="line">308cd9572fe2        centos:8      "/bin/bash --login"   7 seconds ago       Up 6 seconds                elated_tharp</span><br><span class="line">[root@localhost ~]# docker attach --sig-proxy=false 308</span><br><span class="line">[root@308cd9572fe2 /]# ^C</span><br><span class="line">[root@308cd9572fe2 /]# exit</span><br><span class="line">logout</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE         COMMAND             CREATED             STATUS              PORTS      NAMES</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><h4 id="–sig-proxy-false-amp-amp-docker-run-d"><a href="#–sig-proxy-false-amp-amp-docker-run-d" class="headerlink" title="–sig-proxy=false &amp;&amp; docker run -d"></a>–sig-proxy=false &amp;&amp; docker run -d</h4><p><code>交互式启动非bash时 CTRL+C对容器退出无效</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d centos:8 top -b</span><br><span class="line">5cb4252610b412f1301b6d1561d3958edd79da20a22dbb65b8697ec5361ee25a</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE          COMMAND             CREATED             STATUS        PORTS     NAMES</span><br><span class="line">5cb4252610b4        centos:8       "top -b"            7 seconds ago       Up 6 seconds            focused_perlman</span><br><span class="line">[root@localhost ~]# docker attach --sig-proxy=false 5cb</span><br><span class="line">top - 12:26:40 up  4:07,  0 users,  load average: 2.61, 2.24, 2.05</span><br><span class="line">Tasks:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s): 23.2 us, 30.5 sy,  0.0 ni, 44.2 id,  0.0 wa,  0.0 hi,  2.1 si,  0.0 st</span></span><br><span class="line">MiB Mem :    991.2 total,    140.7 free,    465.7 used,    384.7 buff/cache</span><br><span class="line">MiB Swap:   1024.0 total,    843.2 free,    180.8 used.    384.2 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0   48264   1980   1464 R   0.3   0.2   0:00.07 top^C</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE          COMMAND             CREATED             STATUS         PORTS     NAMES</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7下docker配置user-namespace后启动容器失败</title>
      <link href="/2019/11/17/docker/centos7-user-namespace-runtime-error/"/>
      <url>/2019/11/17/docker/centos7-user-namespace-runtime-error/</url>
      
        <content type="html"><![CDATA[<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境:"></a>运行环境:</h3><p>os: CentOS Linux release 7.6.1810 (Core)<br>docker: 19.03.4</p><h3 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it --rm centos:8 /bin/bash --login</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:346: starting container process caused "process_linux.go:319: getting the final child's pid from pipe caused \"EOF\"": unknown.</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>redhat7.4版本的<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/pdf/7.4_release_notes/Red_Hat_Enterprise_Linux-7-7.4_Release_Notes-en-US.pdf" target="_blank" rel="noopener">release notes</a>中说明7.4版本已经支持了user namespace特性，但是 <code>user.max_user_namespace</code> 的默认值是0。如果要使用user namespace功能需要修改该默认值。</p><p>同时7.4版本中将非特权用户的user namespace功能设置为了技术预览。可以通过配置内核启动参数 <code>namespace.unpriv_enable=1</code> 来打开该功能。设置了该功能后，非特权用户通过传递<code>CLONE_NEWNS</code>选项来调用 <code>clone()</code> 时不再返回错误而是允许该操作。</p><p>However, to enable the unprivileged access to name spaces, the CAP_SYS_ADMIN flag has to be set in some user name space to create a mount name space</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="设置max-user-namespace"><a href="#设置max-user-namespace" class="headerlink" title="设置max_user_namespace"></a>设置<code>max_user_namespace</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方法一</span></span><br><span class="line">echo 15000 &gt; /proc/sys/user/max_user_namespace</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方法二</span></span><br><span class="line">sysctl -w 15000 user.max_user_namespace</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方法三</span></span><br><span class="line">echo "user.max_user_namespaces=15000" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><blockquote><p>方法一和方法二重启后配置会丢失</p></blockquote><h4 id="设置namespace-unpriv-enable"><a href="#设置namespace-unpriv-enable" class="headerlink" title="设置namespace.unpriv_enable"></a>设置<code>namespace.unpriv_enable</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开namespace.unpriv_enable</span></span><br><span class="line">sudo grubby --args="namespace.unpriv_enable=1 user_namespace.enable=1" --update-kernel="$(grubby --default-kernel)"</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>执行该命令前 <code>/boot/grub2/grub.cfg</code> 部分内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">menuentry &apos;CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-3.10.0-957.el7.x86_64-advanced-76bc0bdb-c41f-47f8-aae1-72561c04faa5&apos; &#123;</span><br><span class="line">        load_video</span><br><span class="line">        set gfxpayload=keep</span><br><span class="line">        insmod gzio</span><br><span class="line">        insmod part_msdos</span><br><span class="line">        insmod xfs</span><br><span class="line">        set root=&apos;hd0,msdos1&apos;</span><br><span class="line">        if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">          search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint=&apos;hd0,msdos1&apos;  6904b786-8e67-448b-9eac-2c768f1f9aa6</span><br><span class="line">        else</span><br><span class="line">          search --no-floppy --fs-uuid --set=root 6904b786-8e67-448b-9eac-2c768f1f9aa6</span><br><span class="line">        fi</span><br><span class="line">        linux16 /vmlinuz-3.10.0-957.el7.x86_64 root=/dev/mapper/centos-root ro crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet LANG=zh_CN.UTF-8</span><br><span class="line">        initrd16 /initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行该命令后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">menuentry &apos;CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)&apos; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &apos;gnulinux-3.10.0-957.el7.x86_64-advanced-76bc0bdb-c41f-47f8-aae1-72561c04faa5&apos; &#123;</span><br><span class="line">        load_video</span><br><span class="line">        set gfxpayload=keep</span><br><span class="line">        insmod gzio</span><br><span class="line">        insmod part_msdos</span><br><span class="line">        insmod xfs</span><br><span class="line">        set root=&apos;hd0,msdos1&apos;</span><br><span class="line">        if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">          search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint=&apos;hd0,msdos1&apos;  6904b786-8e67-448b-9eac-2c768f1f9aa6</span><br><span class="line">        else</span><br><span class="line">          search --no-floppy --fs-uuid --set=root 6904b786-8e67-448b-9eac-2c768f1f9aa6</span><br><span class="line">        fi</span><br><span class="line">        linux16 /vmlinuz-3.10.0-957.el7.x86_64 root=/dev/mapper/centos-root ro crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet LANG=zh_CN.UTF-8 namespace.unpriv_enable=1 user_namespace.enable=1</span><br><span class="line">        initrd16 /initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭namespace.unpriv_enable</span></span><br><span class="line">sudo grubby --remove-args="namespace.unpriv_enable=1 user_namespace.enable=1" --update-kernel="$(grubby --default-kernel)"</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置使用User Namespace</title>
      <link href="/2019/11/17/docker/docker-user-namespace/"/>
      <url>/2019/11/17/docker/docker-user-namespace/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.docker.com/engine/security/userns-remap/" target="_blank" rel="noopener">官方文档</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>docker容器运行时，默认情况下容器内进程的运行用户就是docker host上的root用户，这样运行时如果将host中的某些目录挂载到容器中时，容器内的进程拥有这些目录的所有权限，这样时不安全的。</p><p>解决方法有两种，一种是<a href="/2019/11/17/docker/docker-uid-gid">使用非root用户运行容器</a>，另一种就是使用下面讲的user namespace方式。</p><p>Linux的user namespace可以对运行的进程做用户隔离，在这些进程不感知的情况下，限制它们对系统资源的访问。可以通过Linux的user namespace功能，将容器内的root用户映射为docker host中的低权限用户。</p><h2 id="docker启用user-namespace"><a href="#docker启用user-namespace" class="headerlink" title="docker启用user namespace"></a>docker启用user namespace</h2><blockquote><p>docker在1.10(2016-02-04)版本中才实现了使用user namespace的功能，称之为 userns-remap</p></blockquote><ul><li><p>首先在docker host中创建用户和组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# groupadd -g 5000 dockertest</span><br><span class="line">[root@localhost ~]# useradd -u 5000 -g dockertest dockertest</span><br><span class="line">[root@localhost ~]# id dockertest</span><br><span class="line">uid=5000(dockertest) gid=5000(dockertest) groups=5000(dockertest)</span><br></pre></td></tr></table></figure></li><li><p>修改docker host中的 /etc/subuid 和 /etc/subgid 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/subuid</span><br><span class="line">dockertest:5000:1         # 容器中root用户(uid=0)映射为docker host中的uid为5000的用户</span><br><span class="line">dockertest:100000:65535   # 容器中的用户 1 ~ 65536 映射为 host中的 uid 为 100000 ~ 100000+65535</span><br><span class="line">[root@localhost ~]# cat /etc/subgid</span><br><span class="line">dockertest:5000:1         # 同subuid</span><br><span class="line">dockertest:100000:65535   # 同subuid</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>也可以直接配置dockertest:100000:65536，这样的话，容器的root映射为host的uid=100000的用户</p></blockquote><ul><li><p>修改<code>/etc/docker/daemon.json</code>文件，增加 <code>&quot;userns-remap&quot;:&quot;dockertest&quot;</code> 配置，然后重启docker服务</p></li><li><p>启动容器进行检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d --rm centos:8 sleep 300</span><br><span class="line">152a7eed420e3d84eefebf1fadc1f1f9d8cfa2fd607d59c03a806d822f5e57d3</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND      CREATED       STATUS       PORTS  NAMES</span><br><span class="line">152a7eed420e   centos:8   "sleep 300"  6 seconds ago Up 3 seconds        jovial_sutherland</span><br><span class="line">[root@localhost ~]# ps -ef |grep -i sleep</span><br><span class="line">dockert+ 12387 12371  0 20:20 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 300</span><br><span class="line">[root@localhost ~]# cat /proc/12387/uid_map</span><br><span class="line">        0       5000          1     # 将host 上的 5000 用户映射为容器内的 0(root)用户</span><br><span class="line">        1     100000      65535     # 将host 上的 100000 用户映射为容器内的 1 用户</span><br><span class="line">[root@localhost ~]# cat /proc/12387/gid_map</span><br><span class="line">        0       5000          1</span><br><span class="line">        1     100000      65535</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></li></ul><p><code>docker使用userns-remap时，在docker_home目录下会自动创建一个5000.5000(根据实际情况会有变化)的目录</code></p><blockquote><p>在修改daemon.json文件时，可以将userns-remap的值设置为已经存在的用户。也可以指定为默认值(default)，如果指定为 default，那么会自动创建用户和组 dockremap。<br>如果使用default配置，RHEL/centos不会自动将 dockremap 添加到 /etc/subuid 和 /etc/subgid 中，需要手动添加。</p></blockquote><h2 id="容器中禁用namespace映射"><a href="#容器中禁用namespace映射" class="headerlink" title="容器中禁用namespace映射"></a>容器中禁用namespace映射</h2><p>当docker daemon启用了user namespace后，所有启动的容器默认都会使用user namespace功能。</p><p>此时如果想要禁用容器的user namespace(如想要启动一个具有特权的容器)，可以在docker create/docker run/docker exec命令中增加 <code>--userns=host</code> 选项实现。</p><p>使用 <code>--userns=host</code> 选项时，不会为该容器进行用户映射，但是由于容器之间共享read-only(image) layers，容器的文件系统所有者仍然会映射为daemon中配置userns-remap用户。这样可能会导致容器内某些程序运行时出现一些意外，For instance sudo (which checks that its binaries belong to user 0) or binaries with a setuid flag。</p><h2 id="docker使用user-namespace的限制"><a href="#docker使用user-namespace的限制" class="headerlink" title="docker使用user namespace的限制"></a>docker使用user namespace的限制</h2><p>当docker启用user namespace时，会与docker的下面的一些特性无法兼容:</p><ul><li>sharing PID or NET namespaces with the host(–pid=host or –network=host)</li><li>external (volume or storage) drivers which are unaware or incapable of using daemon user mappings</li><li>Using the –privileged mode flag on docker run without also specifying –userns=host。(docker run中使用了–privileged但是没有使用–userns=host)</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="检查Linux内核是否开启了user-namespace功能"><a href="#检查Linux内核是否开启了user-namespace功能" class="headerlink" title="检查Linux内核是否开启了user namespace功能"></a>检查Linux内核是否开启了user namespace功能</h3><ul><li>首先确认内核版本，linux是在内核3.8开始才引入了user namespace功能</li><li><p>查看内核编译选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /boot/config-$(uname -r) |grep -i config_user_ns</span><br><span class="line">CONFIG_USER_NS=y</span><br></pre></td></tr></table></figure></li></ul><h3 id="CentOS7配置userns-remap后启动容器失败"><a href="#CentOS7配置userns-remap后启动容器失败" class="headerlink" title="CentOS7配置userns-remap后启动容器失败"></a><a href="/2019/11/17/docker/centos7-user-namespace-runtime-error">CentOS7配置userns-remap后启动容器失败</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中的用户说明</title>
      <link href="/2019/11/17/docker/docker-uid-gid/"/>
      <url>/2019/11/17/docker/docker-uid-gid/</url>
      
        <content type="html"><![CDATA[<p><code>以下内容适用于docker未使用的user namespace的情况</code></p><p>linux系统中的uid和gid是由内核负责管理的，而且内核管理是使用的是id不是name。同一台宿主机中运行的不同的docker和宿主机共享同一个内核，所以所有的docker中的uid和gid的管理和宿主机也都是一致的。即docker中的uid为1000的用户和宿主机中uid为1000的用户实质上是同一个用户。默认情况下docker启动时，都是采用的root账号，相当于容器中的应用对宿主机有完全的控制权限，这种做法时不安全的，所以需要对容器运行时指定一个具有合适权限的用户。</p><p>不同docker之间以及docker和宿主机中同一个uid可能对应不同的的用户名称，这是因为uid到用户名的解析(用户态程序)不同而已。</p><h2 id="指定docker运行使用的用户"><a href="#指定docker运行使用的用户" class="headerlink" title="指定docker运行使用的用户"></a>指定docker运行使用的用户</h2><h3 id="Dockerfile中使用USER命令指定"><a href="#Dockerfile中使用USER命令指定" class="headerlink" title="Dockerfile中使用USER命令指定"></a>Dockerfile中使用USER命令指定</h3><p>下面是jenkins的dockerfile中关于USER使用的节选</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">user</span>=jenkins</span><br><span class="line"><span class="keyword">ARG</span> group=jenkins</span><br><span class="line"><span class="keyword">ARG</span> uid=<span class="number">1000</span></span><br><span class="line"><span class="keyword">ARG</span> gid=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jenkins is run with user `jenkins`, uid = 1000</span></span><br><span class="line"><span class="comment"># If you bind mount a volume from the host or a data container,</span></span><br><span class="line"><span class="comment"># ensure you use the same uid</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$JENKINS_HOME</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; chown <span class="variable">$&#123;uid&#125;</span>:<span class="variable">$&#123;gid&#125;</span> <span class="variable">$JENKINS_HOME</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; groupadd -g <span class="variable">$&#123;gid&#125;</span> <span class="variable">$&#123;group&#125;</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; useradd -d <span class="string">"<span class="variable">$JENKINS_HOME</span>"</span> -u <span class="variable">$&#123;uid&#125;</span> -g <span class="variable">$&#123;gid&#125;</span> -m -s /bin/bash <span class="variable">$&#123;user&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R <span class="variable">$&#123;user&#125;</span> <span class="string">"<span class="variable">$JENKINS_HOME</span>"</span> <span class="string">"<span class="variable">$REF</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .....</span></span><br><span class="line"><span class="keyword">USER</span> $&#123;<span class="keyword">user</span>&#125;</span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><h3 id="docker-run-命令行参数中指定用户"><a href="#docker-run-命令行参数中指定用户" class="headerlink" title="docker run 命令行参数中指定用户"></a><code>docker run</code> 命令行参数中指定用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --user 1000 ubuntu sleep infinity</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git中的换行符配置</title>
      <link href="/2019/11/17/git/git-crlf/"/>
      <url>/2019/11/17/git/git-crlf/</url>
      
        <content type="html"><![CDATA[<p>Dos/Windows系统中的换行符使用的是<code>0x0D0A(CRLF)</code>，而unix/linux/mac系统中使用的换行符为<code>0x0A(LF)</code>。</p><h3 id="autocrlf"><a href="#autocrlf" class="headerlink" title="autocrlf"></a>autocrlf</h3><p>git提供了一个<code>autocrlf</code>的配置项，用于提交和检出时自动替换换行符，它的可选项有:</p><ul><li><p>true: 提交时转换为linux格式 LF，检出时转换为windows格式 CRLF (windows版本git工具安装时默认采用本选项)</p></li><li><p>false: 提交检出均不转换</p></li><li><p>input： 提交时转换为linux格式 LF，检出时不转换</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交时转换为LF，检出时转换为CRLF</span></span><br><span class="line">git config --global core.autocrlf true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交时转换为LF，检出时不转换</span></span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交检出均不转换</span></span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><h3 id="safecrlf"><a href="#safecrlf" class="headerlink" title="safecrlf"></a>safecrlf</h3><p>如果把 <code>autocrlf</code> 选项配置成了 <code>false</code>，建议将 <code>safecrlf</code> 选项配置为 <code>true</code>。</p><p><code>safecrlf</code> 选项用于检查提交的文件中包含混合换行符，可选项有:</p><ul><li><p>true: 拒绝提交包含混合换行符的文件</p></li><li><p>false: 允许提交包含混合换行符的文件</p></li><li><p>warn: 提交包含混合换行符的文件时进行告警</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拒绝提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交包含混合换行符的文件时给出警告</span></span><br><span class="line">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure><blockquote><p>windows的git命令行中提供了 dos2unix 工具可进行换行符转换。</p></blockquote><h3 id="多平台开发时的建议"><a href="#多平台开发时的建议" class="headerlink" title="多平台开发时的建议"></a>多平台开发时的建议</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br><span class="line">git config --global core.safecrlf true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins的日志配置</title>
      <link href="/2019/11/15/jenkins/jenkins-log-config/"/>
      <url>/2019/11/15/jenkins/jenkins-log-config/</url>
      
        <content type="html"><![CDATA[<h3 id="use-a-post-initialization-script"><a href="#use-a-post-initialization-script" class="headerlink" title="use a post initialization script"></a>use a post initialization script</h3><p>jenkins支持在启动后立即运行指定脚本(${JENKINS_HOME/init.groovy} 或 ${JENKINS_HOME}/init.groovy.d/*.groovy)，脚本可以访问Jenins中的类和所有插件。可以利用这个特性来实现日志配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.Level</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger</span><br><span class="line"></span><br><span class="line">Logger.getLogger(<span class="string">"hudson.plugins.git.GitStatus"</span>).setLevel(Level.SEVERE)</span><br><span class="line">Logger.getLogger(<span class="string">"hudson.security.csrf.CrumbFilter"</span>).setLevel(Level.SEVERE)</span><br></pre></td></tr></table></figure><h3 id="use-java-util-logging"><a href="#use-java-util-logging" class="headerlink" title="use java.util.logging"></a>use java.util.logging</h3><p>创建一个logging.properties文件，里面包含日志记录的配置，然后通过增加JVM选项<code>-Djava.util.logging.config.file=&lt;pathTo&gt;/logging.properties</code> 来生效配置</p><blockquote><p>这种方式只支持使用了 java.util.logging 来记录日志的classes，如果某些classes使用了其他日志功能（如 org.apache.commons.logging）则不会生效</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">handlers</span>=java.util.logging.ConsoleHandler,java.util.logging.FileHandler</span><br><span class="line"></span><br><span class="line"><span class="attr">java.util.logging.FileHandler.level</span>=INFO</span><br><span class="line"><span class="attr">java.util.logging.FileHandler.formatter</span>=java.util.logging.SimpleFormatter</span><br><span class="line"><span class="attr">java.util.logging.FileHandler.pattern</span>=/var/log/jenkins/jenkins.log</span><br><span class="line"><span class="attr">java.util.logging.FileHandler.append</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">java.util.logging.FileHandler.limit</span>=<span class="number">10000000</span></span><br><span class="line"><span class="attr">java.util.logging.FileHandler.count</span>=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">java.util.logging.ConsoleHandler.level</span>=INFO</span><br><span class="line"><span class="attr">java.util.logging.ConsoleHandler.formatter</span>=java.util.logging.SimpleFormatter</span><br></pre></td></tr></table></figure><h3 id="使用linux的logrotate"><a href="#使用linux的logrotate" class="headerlink" title="使用linux的logrotate"></a>使用linux的logrotate</h3><p>logrotate是个十分有用的工具，它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。</p><p>Logrotate是基于CRON来运行的，其脚本是/etc/cron.daily/logrotate。</p><p>logrotate的配置文件是/etc/logrotate.conf，通常不需要对它进行修改。日志文件的轮循设置在独立的配置文件中，它们放在/etc/logrotate.d/目录下。</p><p>/etc/logrotate.d/jenkins文件配置如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/var/jenkins_home/logs/jenkins.log &#123;</span><br><span class="line">    daily           //日志文件轮循周期。可用值为‘daily’，‘weekly’或者‘yearly’</span><br><span class="line">    rotate 5        //最多将存储5个归档日志。对于第六个归档，时间最久的归档将被删除</span><br><span class="line">    dataext         //旧日志文件以创建日期命名</span><br><span class="line">    compress        //在轮循任务完成后，已轮循的归档将使用gzip进行压缩</span><br><span class="line">    delaycompress   //总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</span><br><span class="line">    missingok       //在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误</span><br><span class="line">    notifempty      //如果日志文件为空，轮循不会进行</span><br><span class="line">    size 100k       //当日志文件到达指定的大小时才转储，log-size能指定bytes(缺省)及KB (sizek)或MB(sizem)</span><br><span class="line">    create 644 root root  //mode owner group 转储文件，使用指定的文件模式创建新的日志文件</span><br><span class="line">    postrotate    //在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务  必须独立成行</span><br><span class="line">        /usr/bin/killall -HUP rsyslogd</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的一个配置是：copytruncate</p><p>copytruncate 如果没有这个选项的话，操作方式：是将原log日志文件，移动成类似log.1的旧文件， 然后创建一个新的文件。 如果设置了，操作方式：拷贝原日志文件，并且将其变成大小为0的文件。</p><p>区别是如果进程,比如nginx 使用了一个文件写日志，没有copytruncate的话，切割日志时， 把旧日志log-&gt;log.1 ，然后创建新日志log。这时候nginx 打开的文件描述符依然时log.1，由没有信号通知nginx 要换日志描述符，所以它会继续向log.1写日志，这样就不符合我们的要求了。 因为我们想切割日志后，nginx 自动会向新的log 文件写日志，而不是旧的log.1文件</p><p>解决方法有两个：</p><p>1.向上面的nginx 切割日志配置，再postrotate里面写个脚本</p><p>postrotate<br>  [ -s /run/nginx.pid ] &amp;&amp; kill -USR1 <code>cat /run/nginx.pid</code><br>endscript</p><p>这样就是发信号给nginx ,让nginx 关闭旧日志文件描述符，重新打开新的日志文件描述，并写入日志</p><p>2.使用copytruncate参数，向上面说的，配置了它以后，操作方式是把log 复制一份 成为log.1，然后清空log的内容，使大小为0，那此时log依然时原来的旧log，对进程（nginx）来说，依然打开的是原来的文件描述符，可以继续往里面写日志，而不用发送信号给nginx</p><p>copytruncate这种方式操作的时候， 拷贝和清空之间有一个时间差，可能会丢失部分日志数据。</p><p>nocopytruncate 备份日志文件不过不截断。</p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Jenkins Home</title>
      <link href="/2019/11/14/jenkins/jenkins-change-home/"/>
      <url>/2019/11/14/jenkins/jenkins-change-home/</url>
      
        <content type="html"><![CDATA[<p>修改 JENKINS_HOME 前必须先停止jenkins服务，修改后将原来 jenkins home目录中的数据copy到新目录，然后重启服务。</p><h3 id="使用war启动jenkins"><a href="#使用war启动jenkins" class="headerlink" title="使用war启动jenkins"></a>使用war启动jenkins</h3><p>直接通过 <code>java -DJENKINS_HOME=/var/jenkins_home -jar jenkins.war</code> 指定 <code>-DJENKINS_HOME</code> 选项即可</p><h3 id="centos使用rpm安装或yum安装"><a href="#centos使用rpm安装或yum安装" class="headerlink" title="centos使用rpm安装或yum安装"></a>centos使用rpm安装或yum安装</h3><p>通过修改 <code>/etc/sysconfig/jenkins</code> 配置文件中的 <code>JENKINS_HOME</code> 配置</p><h3 id="docker容器化安装"><a href="#docker容器化安装" class="headerlink" title="docker容器化安装"></a>docker容器化安装</h3><p>通过在 <code>docker run</code> 中增加 <code>-e JENKINS_HOME=xxxx</code> 环境变量来修改</p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker重启策略</title>
      <link href="/2019/11/14/docker/docker-restart-policies/"/>
      <url>/2019/11/14/docker/docker-restart-policies/</url>
      
        <content type="html"><![CDATA[<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 <code>docker run</code> 命令中通过指定 <code>--restart=xxx</code> 选项来指定容器在退出时的重启策略。</p><p>Docker容器的重启动作都是由Docker守护进程完成的。</p><h3 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h3><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>no</td><td>默认值，当容器退出时不会重启</td></tr><tr><td>on-failure[:max-retries]</td><td>在容器为非正常退出(退出状态为非0)时才会重启，可以指定最大重启次数</td></tr><tr><td>always</td><td>不管容器退出状态为什么，总是重启容器，当指定该值时，守护进程总是会在进程启动后启动容器</td></tr><tr><td>unless-stopped</td><td>无论退出状态如何，总是重启容器，除非容器在Docker守护进程停止之前进入了停止状态。</td></tr></tbody></table><ul><li><p>每次重启时，docker都会按照 100ms 200ms 400ms 800ms 1600ms … 的规律增加等待延时，直到达到on-failure的最大次数或者docker停止或通过docker rm -f 删除容器。</p></li><li><p>如果容器重新启动成功(容器启动并运行至少10秒)，则延迟将重置为其默认值100 ms。</p></li><li><p>可以通过docker inspect获得容器(尝试)重新启动的次数。例如，获取容器“my-container”的重启次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f "&#123;&#123; .RestartCount &#125;&#125;" my-container</span><br></pre></td></tr></table></figure></li><li><p><code>docker run</code> 命令中 <code>--restart=xxx</code> 和 <code>--rm</code> 选项时互斥的，不能同时指定</p></li><li><p>容器只有在成功启动后restart policy才能生效。这里的”成功启动”是指容器处于up至少10秒且已经处于docker监管。这是避免没有成功启动的容器陷入restart的死循环。</p></li><li><p>如果手动stop一个容器，容器设置的restart policy将会被忽略，除非docker守护进程重启或者容器手动重启；这是避免了如果重启策略设置了always，如果不忽略policy那么容器无法手动停止。</p></li></ul><h3 id="更新重启策略"><a href="#更新重启策略" class="headerlink" title="更新重启策略"></a>更新重启策略</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=no my-container</span><br></pre></td></tr></table></figure><p>当需要彻底删除一个指定always策略的容器时，必须先更新重启策略为no，然后在停止和删除容器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置代理</title>
      <link href="/2019/11/11/docker/docker-set-proxy/"/>
      <url>/2019/11/11/docker/docker-set-proxy/</url>
      
        <content type="html"><![CDATA[<p>systemd中，创建 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 文件，增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot; &quot;HTTPS_PROXY=https://proxy.example.com:443/&quot; &quot;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置文件常用配置</title>
      <link href="/2019/11/11/docker/docker-config-file/"/>
      <url>/2019/11/11/docker/docker-config-file/</url>
      
        <content type="html"><![CDATA[<p>默认配置文件为: <code>/etc/docker/daemon.json</code>, 如果该文件不存在，需要自己创建</p><p><a href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file" target="_blank" rel="noopener">官方配置文件说明</a></p><p>常用配置如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "graph": "/data/docker_home", // 配置docker默认root目录，该配置19.03.0版本已废弃，计划19.09.0版本删除</span><br><span class="line">  "data-root": "/data/docker_home", // 配置docker默认root目录</span><br><span class="line">  "registry-mirrors": [ //配置docker镜像源</span><br><span class="line">    "https://registry.docker-cn.com",  // Docker 官方镜像中国区</span><br><span class="line">    "http://hub-mirror.c.163.com",     // 网易镜像源</span><br><span class="line">    "https://docker.mirrors.ustc.edu.cn"],  // 中科大镜像源</span><br><span class="line">  "insecure-registries": [], // 配置非安全的镜像仓库(私有仓库)，通常公司内部镜像源配置在此处</span><br><span class="line">  "debug": true,  //启动debug模式，默认为 false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>insecure-registries中定义的私有仓库如果端口号不为 80 , 则必须指定端口号<br>使用 docker pull 拉取镜像时必须和 insecure-registers 中定义的完全一致(包括端口号)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改docker默认root目录</title>
      <link href="/2019/11/11/docker/change-docker-dir/"/>
      <url>/2019/11/11/docker/change-docker-dir/</url>
      
        <content type="html"><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li><p>停止服务 <code>systemctl stop docker</code></p></li><li><p>修改docker服务配置文件<code>/usr/lib/systemd/system/docker.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动命令配置中，增加 --data-root 配置</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --data-root=/data/docker_home</span><br></pre></td></tr></table></figure></li><li><p>同步原来的数据到新目录 <code>rsync -aqxP /var/lib/docker/ /data/docker_home/</code></p></li><li><p>删除原来目录 <code>rm -rf /var/lib/docker/</code></p></li><li><p>重新加载配置 <code>systemctl daemon-reload</code></p></li><li><p>启动服务 <code>systemctl start docker</code></p></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li><p>停止服务 <code>systemctl stop docker</code></p></li><li><p>修改配置文件 <code>/etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 增加 graph 或 data-root 配置</span><br><span class="line">&#123;</span><br><span class="line">  "graph": "/data/docker_home" // 不推荐使用, 该配置19.03.0版本已废弃，计划19.09.0版本删除</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data-root"</span>: <span class="string">"/data/docker_home"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步原来的数据到新目录 <code>rsync -aqxP /var/lib/docker/ /data/docker_home/</code></p></li><li><p>删除原来目录 <code>rm -rf /var/lib/docker/</code></p></li><li><p>重新加载配置 <code>systemctl daemon-reload</code></p></li><li><p>启动服务 <code>systemctl start docker</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker使用总结</title>
      <link href="/2019/11/11/docker/docker-usage/"/>
      <url>/2019/11/11/docker/docker-usage/</url>
      
        <content type="html"><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://docs.docker.com/" target="_blank" rel="noopener">官方文档</a></h3><h3 id="CentOS下安装docker"><a href="#CentOS下安装docker" class="headerlink" title="CentOS下安装docker"></a><a href="/2019/11/11/centos/centos-docker-install">CentOS下安装docker</a></h3><h3 id="docker常见配置说明"><a href="#docker常见配置说明" class="headerlink" title="docker常见配置说明"></a>docker常见配置说明</h3><ul><li><p>docker可执行文件: /usr/bin/dockerd</p></li><li><p>docker服务配置文件: /usr/lib/systemd/system/docker.service</p></li><li><p>docker配置文件: /etc/docker/daemon.json</p></li><li><p>docker存储默认目录: /var/lib/docker</p></li></ul><h3 id="修改docker存储的默认路径"><a href="#修改docker存储的默认路径" class="headerlink" title="修改docker存储的默认路径"></a><a href="/2019/11/11/docker/change-docker-dir">修改docker存储的默认路径</a></h3><h3 id="docker配置文件常用设置"><a href="#docker配置文件常用设置" class="headerlink" title="docker配置文件常用设置"></a><a href="/2019/11/11/docker/docker-config-file">docker配置文件常用设置</a></h3><h3 id="docker代理配置"><a href="#docker代理配置" class="headerlink" title="docker代理配置"></a><a href="/2019/11/11/docker/docker-set-proxy">docker代理配置</a></h3><h3 id="dockerd命令详解"><a href="#dockerd命令详解" class="headerlink" title="dockerd命令详解"></a><a href="/2019/11/12/dockerd-cmd-detail">dockerd命令详解</a></h3><h3 id="docker重启策略"><a href="#docker重启策略" class="headerlink" title="docker重启策略"></a><a href="/2019/11/14/docker-restart-policies">docker重启策略</a></h3><h3 id="docker中的用户说明"><a href="#docker中的用户说明" class="headerlink" title="docker中的用户说明"></a><a href="/2019/11/17/docker/docker-uid-git">docker中的用户说明</a></h3><h3 id="docker中使用user-namespace"><a href="#docker中使用user-namespace" class="headerlink" title="docker中使用user namespace"></a><a href="/2019/11/17/docker/docker-user-namespace">docker中使用user namespace</a></h3><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a |awk '&#123;print $1&#125;'|tail -n +2 |xargs -t -n 1 docker rm -f</span><br></pre></td></tr></table></figure><h4 id="docker-attach命令"><a href="#docker-attach命令" class="headerlink" title="docker attach命令"></a><a href="/2019/11/18/docker/docker-attach-cmd">docker attach命令</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos下docker安装</title>
      <link href="/2019/11/11/centos/centos-docker-install/"/>
      <url>/2019/11/11/centos/centos-docker-install/</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS7-6"><a href="#CentOS7-6" class="headerlink" title="CentOS7.6"></a>CentOS7.6</h2><ol><li><p>卸载老版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装所需依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></li><li><p>配置repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清理Jenkins中所有任务的历史记录</title>
      <link href="/2019/11/08/jenkins/jenkins-clear-jobs-history/"/>
      <url>/2019/11/08/jenkins/jenkins-clear-jobs-history/</url>
      
        <content type="html"><![CDATA[<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> jobRetain = <span class="number">3</span>  <span class="comment">// job 保留的历史记录数量</span></span><br><span class="line"><span class="comment">// Jenkins.instance.getClass(): hudson.model.Hudson</span></span><br><span class="line"><span class="comment">// 获取所有freestyle的job</span></span><br><span class="line">jobs = Jenkins.instance.getAllItems(AbstactProject.<span class="keyword">class</span>)</span><br><span class="line">println(jobs)</span><br><span class="line"><span class="comment">// 获取所有pipeline的job</span></span><br><span class="line">jobs = Jenkins.instance.getAllItems(org.jenkinsci.plugins.workflow.job.WorkflowJob.<span class="keyword">class</span>)</span><br><span class="line">println(jobs)</span><br><span class="line"><span class="comment">// 获取所有的job</span></span><br><span class="line">jobs = Jenkins.instance.getAllItems(hudson.model.Job.<span class="keyword">class</span>)</span><br><span class="line">println(jobs)</span><br><span class="line"></span><br><span class="line">jobs.each &#123; job -&gt;</span><br><span class="line">    <span class="keyword">def</span> builds = job.getBuilds()</span><br><span class="line">    println(builds)</span><br><span class="line">    <span class="keyword">if</span>(builds) &#123;</span><br><span class="line">        <span class="keyword">def</span> latestBuildNumber = job.getLastBuild().getNumber()</span><br><span class="line">        <span class="keyword">def</span> retainMaxNumber = latestBuildNumber - jobRetain</span><br><span class="line">        println(<span class="string">"$&#123;job.name&#125;'s last build number: $&#123;latestBuildNumber&#125;"</span>)</span><br><span class="line">        <span class="keyword">if</span> (retainMaxNumber &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            println(<span class="string">"$&#123;job.name&#125;'s last build is less than $&#123;jobRetain&#125;, skip..."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(builds.getClass())</span><br><span class="line">        job.getBuilds().findAll&#123;it.number &lt;= retainMaxNumber&#125;.each &#123;</span><br><span class="line">            <span class="comment">// it.getClass(): org.jenkinsci.plugins.workflow.job.WorkflowRun</span></span><br><span class="line">            println(<span class="string">"delete $&#123;job.name&#125;'s $&#123;it.number&#125;"</span>)</span><br><span class="line">            it.delete()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"$&#123;job.name&#125; don't have builder, skip..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行日志如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Started by user unknown or anonymous</span><br><span class="line">Running in Durability level: MAX_SURVIVABILITY</span><br><span class="line">[Pipeline] Start of Pipeline</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[hudson.model.FreeStyleProject@5aab9184[jenkins_shell_test], com.tikal.jenkins.plugins.multijob.MultiJobProject@ce9939f[multijob_test], hudson.model.FreeStyleProject@12b9358a[no_build_job]]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[org.jenkinsci.plugins.workflow.job.WorkflowJob@10dabbd8[clear_history], org.jenkinsci.plugins.workflow.job.WorkflowJob@4e79153f[pipeline_shell_test]]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[org.jenkinsci.plugins.workflow.job.WorkflowJob@10dabbd8[clear_history], hudson.model.FreeStyleProject@5aab9184[jenkins_shell_test], com.tikal.jenkins.plugins.multijob.MultiJobProject@ce9939f[multijob_test], hudson.model.FreeStyleProject@12b9358a[no_build_job], org.jenkinsci.plugins.workflow.job.WorkflowJob@4e79153f[pipeline_shell_test]]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[clear_history #24, clear_history #23, clear_history #22, clear_history #21, clear_history #20, clear_history #19, clear_history #18, clear_history #17, clear_history #16, clear_history #15, clear_history #14]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">clear_history&apos;s last build number: 24</span><br><span class="line">[Pipeline] echo</span><br><span class="line">class hudson.util.RunList</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 21</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 20</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 19</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 18</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 17</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 16</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 15</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete clear_history&apos;s 14</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[jenkins_shell_test #7, jenkins_shell_test #6, jenkins_shell_test #5, jenkins_shell_test #4, jenkins_shell_test #3, jenkins_shell_test #2, jenkins_shell_test #1]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">jenkins_shell_test&apos;s last build number: 7</span><br><span class="line">[Pipeline] echo</span><br><span class="line">class hudson.util.RunList</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete jenkins_shell_test&apos;s 4</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete jenkins_shell_test&apos;s 3</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete jenkins_shell_test&apos;s 2</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete jenkins_shell_test&apos;s 1</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[multijob_test #3, multijob_test #2, multijob_test #1]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">multijob_test&apos;s last build number: 3</span><br><span class="line">[Pipeline] echo</span><br><span class="line">multijob_test&apos;s last build is less than 3, skip...</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">no_build_job don&apos;t have builder, skip...</span><br><span class="line">[Pipeline] echo</span><br><span class="line">[pipeline_shell_test #91, pipeline_shell_test #90, pipeline_shell_test #89, pipeline_shell_test #88, pipeline_shell_test #87, pipeline_shell_test #86, pipeline_shell_test #85, pipeline_shell_test #84, pipeline_shell_test #83, pipeline_shell_test #82]</span><br><span class="line">[Pipeline] echo</span><br><span class="line">pipeline_shell_test&apos;s last build number: 91</span><br><span class="line">[Pipeline] echo</span><br><span class="line">class hudson.util.RunList</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 88</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 87</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 86</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 85</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 84</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 83</span><br><span class="line">[Pipeline] echo</span><br><span class="line">delete pipeline_shell_test&apos;s 82</span><br><span class="line">[Pipeline] End of Pipeline</span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态替换map中的变量</title>
      <link href="/2019/11/02/groovy/groovy-repalce-param-in-yaml/"/>
      <url>/2019/11/02/groovy/groovy-repalce-param-in-yaml/</url>
      
        <content type="html"><![CDATA[<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> replaceVariableInMap(<span class="keyword">def</span> oriValue, <span class="keyword">def</span> key, <span class="keyword">def</span> value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oriValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> oriValue.replace(<span class="string">"\$&#123;$&#123;key&#125;&#125;"</span>, value.toString())</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oriValue <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">        <span class="keyword">def</span> tmpList = []</span><br><span class="line">        oriValue.each &#123; cf -&gt;</span><br><span class="line">            tmpList.add(replaceVariableInMap(cf, key, value))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmpList</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oriValue <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">        <span class="keyword">def</span> tmpMap = [:]</span><br><span class="line">        oriValue.each &#123; k, v-&gt;</span><br><span class="line">            tmpMap.put(k, replaceVariableInMap(v, key, value))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmpMap</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> oriValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> testMap = [<span class="string">general:</span> [<span class="string">branch:</span> <span class="string">"\$&#123;branch&#125;"</span>], <span class="string">stages:</span> [<span class="string">tasks:</span> [<span class="string">repos:</span> [<span class="string">url:</span> <span class="string">"\$&#123;url&#125;"</span>, <span class="string">branch:</span> <span class="string">"\$&#123;branch&#125;"</span>, <span class="string">id:</span> <span class="string">"domain"</span>]]]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> params = [<span class="string">branch:</span> <span class="string">"test_branch"</span>, <span class="string">url:</span> <span class="string">"https://git.test.com"</span>]</span><br><span class="line"></span><br><span class="line">params.each &#123;k, v -&gt;</span><br><span class="line">    testMap = replaceVariableInMap(testMap, k, v)</span><br><span class="line">&#125;</span><br><span class="line">println testMap</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本式pipeline中failFast使用</title>
      <link href="/2019/11/02/jenkins/jenkins-script-pipeline-failfast/"/>
      <url>/2019/11/02/jenkins/jenkins-script-pipeline-failfast/</url>
      
        <content type="html"><![CDATA[<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> generateJobStage(String jobName) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        node(<span class="string">'master'</span>) &#123;</span><br><span class="line">            echo <span class="string">"$&#123;jobName&#125; start"</span></span><br><span class="line">            sleep <span class="number">5</span></span><br><span class="line">            sh <span class="string">"exit 1"</span></span><br><span class="line">            echo <span class="string">"job end"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">script &#123;</span><br><span class="line">    <span class="keyword">def</span> jobs = [<span class="string">'jobA'</span>, <span class="string">'jobB'</span>, <span class="string">'jobC'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> parallelStagesMap = jobs.collectEntries &#123; <span class="keyword">def</span> jobName -&gt;</span><br><span class="line">        [<span class="string">"$&#123;jobName&#125;"</span>, generateJobStage(jobName)]</span><br><span class="line">    &#125;</span><br><span class="line">    parallelStagesMap.failFast = <span class="literal">true</span></span><br><span class="line">    println parallelStagesMap</span><br><span class="line">    stage(<span class="string">"test"</span>) &#123;</span><br><span class="line">        parallel parallelStagesMap</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipeline中任务分段日志获取</title>
      <link href="/2019/10/22/jenkins/jenkins-pipeline-stage-log/"/>
      <url>/2019/10/22/jenkins/jenkins-pipeline-stage-log/</url>
      
        <content type="html"><![CDATA[<h3 id="脚本式pipeline"><a href="#脚本式pipeline" class="headerlink" title="脚本式pipeline"></a>脚本式pipeline</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hudson.model.Action</span><br><span class="line"><span class="keyword">import</span> org.jenkinsci.plugins.workflow.cps.nodes.StepStartNode</span><br><span class="line"><span class="keyword">import</span> org.jenkinsci.plugins.workflow.graph.FlowNode</span><br><span class="line"><span class="keyword">import</span> org.jenkinsci.plugins.workflow.actions.LabelAction</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> hasLabelAction(FlowNode flowNode) &#123;</span><br><span class="line">  <span class="keyword">def</span> actions = flowNode.getActions()</span><br><span class="line">  <span class="keyword">for</span> (Action <span class="string">action :</span> actions) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action <span class="keyword">instanceof</span> LabelAction) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getStepStartNode(List&lt;FlowNode&gt; flowNodes, String stepNodeName, <span class="keyword">def</span> depth) &#123;</span><br><span class="line">  <span class="keyword">if</span> (depth &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(FlowNode <span class="string">flowNode :</span> flowNodes) &#123;</span><br><span class="line">    <span class="keyword">def</span> labelActionFlag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (flowNode <span class="keyword">instanceof</span> StepStartNode) &#123;</span><br><span class="line">      labelActionFlag = hasLabelAction(flowNode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (labelActionFlag &amp;&amp; flowNode.getDisplayName().equals(stepNodeName)) &#123;</span><br><span class="line">      <span class="keyword">return</span> flowNode</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归查询</span></span><br><span class="line">    <span class="keyword">def</span> node = getStepStartNode(flowNode.getParents(), stepNodeName, depth)</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getBlueOceanLogUrlByName(String stepNodeName) &#123;</span><br><span class="line">  <span class="comment">// currentBuild: class org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper</span></span><br><span class="line">  <span class="comment">// build: class org.jenkinsci.plugins.workflow.job.WorkflowRun</span></span><br><span class="line">  <span class="keyword">def</span> build = currentBuild.getRawBuild()</span><br><span class="line">  <span class="comment">// execution: class org.jenkinsci.plugins.workflow.cps.CpsFlowExecution</span></span><br><span class="line">  <span class="keyword">def</span> execution = build.getExecution()</span><br><span class="line">  <span class="comment">// executionHeads: class java.util.ArrayList</span></span><br><span class="line">  <span class="keyword">def</span> executionHeads = execution.getCurrentHeads()</span><br><span class="line">  <span class="keyword">def</span> flowNode = getStepStartNode(executionHeads, stepNodeName, <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">if</span> (flowNode) &#123;</span><br><span class="line">    <span class="keyword">return</span> Jenkins.instance.getRootUrl() + <span class="string">"blue/rest/organizations/jenkins/pipelines/$&#123;JOB_NAME&#125;/runs/$&#123;BUILD_NUMBER&#125;/nodes/"</span> + flowNode.getId() + <span class="string">"/log"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> generateTask(<span class="keyword">def</span> taskName) &#123;</span><br><span class="line">    <span class="keyword">def</span> taskBody = &#123;</span><br><span class="line">      println getBlueOceanLogUrlByName(<span class="string">"Branch: $&#123;taskName&#125;"</span>)</span><br><span class="line">      node &#123;</span><br><span class="line">          println(<span class="string">"====&gt; $&#123;taskName&#125; start"</span>)</span><br><span class="line">          sleep <span class="number">3</span></span><br><span class="line">          println(<span class="string">"====&gt; $&#123;taskName&#125; end"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    taskBody</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> createParallelTasks(<span class="keyword">def</span> jobs) &#123;</span><br><span class="line">    <span class="keyword">def</span> pipelineConfig = [:]</span><br><span class="line">    jobs.each &#123; <span class="keyword">def</span> job -&gt;</span><br><span class="line">      <span class="keyword">def</span> taskBody = generateTask(job)</span><br><span class="line">      pipelineConfig.put(job, taskBody)</span><br><span class="line">    &#125;</span><br><span class="line">    pipelineConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">script &#123;</span><br><span class="line">  <span class="keyword">def</span> jobs = [<span class="string">"job_a"</span>, <span class="string">"job_b"</span>, <span class="string">"job_c"</span>]</span><br><span class="line">  <span class="keyword">def</span> pipelineConfig = createParallelTasks(jobs)</span><br><span class="line">  stage(<span class="string">'test'</span>) &#123;</span><br><span class="line">    println getBlueOceanLogUrlByName(<span class="string">"test"</span>)</span><br><span class="line">    parallel pipelineConfig</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>free命令详解</title>
      <link href="/2019/09/03/linux/linux-cmd-free/"/>
      <url>/2019/09/03/linux/linux-cmd-free/</url>
      
        <content type="html"><![CDATA[<p>free命令显示了系统中已使用和空闲的物理内存和交换内存，以及内核使用的buffer和cache的大小。命令中的数据是通过解析/proc/meminfo文件获得的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# free -w</span><br><span class="line">              total        used        free      shared     buffers       cache   available</span><br><span class="line">Mem:        1014972      604816       65888        6880         164      344104      220752</span><br><span class="line">Swap:       1048572         264     1048308</span><br><span class="line">[root@localhost ~]# free -k</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1014972      605732       64932        6880      344308      219800</span><br><span class="line">Swap:       1048572         264     1048308</span><br><span class="line">[root@localhost ~]# cat /proc/meminfo</span><br><span class="line">MemTotal:        1014972 kB</span><br><span class="line">MemFree:           64916 kB</span><br><span class="line">MemAvailable:     219784 kB</span><br><span class="line">Buffers:             164 kB</span><br><span class="line">Cached:           264984 kB</span><br><span class="line">SwapCached:            8 kB</span><br><span class="line">Active:           645456 kB</span><br><span class="line">Inactive:         155036 kB</span><br><span class="line">Active(anon):     509284 kB</span><br><span class="line">Inactive(anon):    32940 kB</span><br><span class="line">Active(file):     136172 kB</span><br><span class="line">Inactive(file):   122096 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       1048572 kB</span><br><span class="line">SwapFree:        1048308 kB</span><br><span class="line">Dirty:                16 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        535368 kB</span><br><span class="line">Mapped:            44520 kB</span><br><span class="line">Shmem:              6880 kB</span><br><span class="line">Slab:              79160 kB</span><br><span class="line">SReclaimable:      48748 kB</span><br><span class="line">SUnreclaim:        30412 kB</span><br><span class="line">KernelStack:        2704 kB</span><br><span class="line">PageTables:         6608 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     1556056 kB</span><br><span class="line">Committed_AS:     778052 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:       27092 kB</span><br><span class="line">VmallocChunk:   34359707152 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:    356352 kB</span><br><span class="line">CmaTotal:              0 kB</span><br><span class="line">CmaFree:               0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:       63424 kB</span><br><span class="line">DirectMap2M:      985088 kB</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p>列内容说明:</p><ul><li>total: 系统中的内存总量，对应/proc/meminfo中的MemTotal和SwapTotal的内容</li><li>used: 已占用内存大小，通过<code>total - free - buffers - cache</code>计算得出</li><li>free: 空闲内存大小，对应/proc/meminfo中的MemFree和SwapFree的内容</li><li>shared: 共享内存占用大小，通过情况都是tmpfs占用，对应/proc/meminfo中的Shmem的内容，在2.6.32内核中开始提供该内容显示，在不支持的系统中显示为0</li><li>buffers: 内核buffers占用大小，对应/proc/meminfo中的Buffers内容</li><li>cache: page cache和slabs占用的大小，对应/proc/meminfo中的Cached和Slab内容之和</li><li>buff/cache: buffers和cache之和</li><li>available: 在不考虑交换内存的情况下，估算有多少内存可以用来启动新应用。不同于cache和free字段提供的数据，该字段考虑了page cache，同时并非所有的可回收的slabs内存由于在使用中并不一定能被回收，对应/proc/meminfo中的MemAvailable内容(在内核3.14上可用，在内核2.6.27+上模拟，否则与free内容相同)</li></ul><h2 id="buffers与cache"><a href="#buffers与cache" class="headerlink" title="buffers与cache"></a>buffers与cache</h2><h3 id="linux缓存机制"><a href="#linux缓存机制" class="headerlink" title="linux缓存机制"></a>linux缓存机制</h3><p>在系统运行过程中，内核会利用空闲的物理内存，划出一部分区域作为buffers/cache，将一些程序使用过的硬盘数据读入缓存区域的内存，利用高速的内存读写特性提升数据的访问效率。</p><p>针对应用程序来说，通常情况下buffers/cache占用的内存是可用的，当应用程序需要用到内存的时候，会回收buffers/cache内存。</p><h3 id="buffers与cache的区别"><a href="#buffers与cache的区别" class="headerlink" title="buffers与cache的区别"></a>buffers与cache的区别</h3><p>cache 指 page cache，它是针对文件系统的，是文件的缓存。当缓存中的文件被修改(写操作)后，linux不会立即执行写磁盘操作，而是把page cache中的页面标记为脏页，定期同步到存储设备中。</p><p>buffers 指 buffer cache，是磁盘块的缓存，是针对块设备的。直接对块设备的进行操作的数据会缓存到buffers中，例如，文件系统的元数据信息。</p><h3 id="手动释放buffers和cache"><a href="#手动释放buffers和cache" class="headerlink" title="手动释放buffers和cache"></a>手动释放buffers和cache</h3><p><a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt" target="_blank" rel="noopener">/proc/sys/vm文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">释放page cache</span></span><br><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="meta">#</span><span class="bash">释放可回收的slab对象(包括dentries和iinodes)</span></span><br><span class="line">echo 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="meta">#</span><span class="bash">释放page cache 和 slab 对象</span></span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><p>通过写drop_caches文件是一个非破坏性(non-destructive)的操作，不会释放脏数据。在执行该命令前执行<code>sync</code>命令可以强制将一些脏数据刷盘，然后尽可能多的释放内存。</p><p>这个文件的内容并不能控制内核是否使用缓存机制。</p><h3 id="是否需要手动清除缓存"><a href="#是否需要手动清除缓存" class="headerlink" title="是否需要手动清除缓存"></a>是否需要手动清除缓存</h3><p>通常情况下，应用程序在系统上稳定运行之后，free的值也会保持在一个稳定的值，虽然看上去比较小，Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对buffer／cache的释放。尤其是被使用更多的cache空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放cache，作为free空间分给相关进程使用。所以一般情况下，我们认为buffer/cache空间可以被释放，这个理解是正确的。</p><p>通常情况下，当发生内存不足，应用程序获取不到内存，OOM等错误时，需要排查应用程序是否存在内存泄露的情况。针对内存泄露/内存溢出等导致内存不足的情况，可以通过swap的使用情况来快速判断(free中swap的使用情况，vmstate中si/so的值等)。</p><p><a href="https://blog.csdn.net/dazuiba008/article/details/51261152" target="_blank" rel="noopener">但是并非所有的buffer/cache都能释放</a></p><p><a href="https://www.zhihu.com/question/59053036" target="_blank" rel="noopener">如何控制linux清理cache机制–内存整理影响系统性能案例</a></p><p><a href="http://luodw.cc/2016/08/13/linux-cache/" target="_blank" rel="noopener">linux内存分配与回收</a></p><p><a href="https://lentil1016.cn/linux%E4%B8%ADbuffer-cache%E6%B8%85%E7%90%86/" target="_blank" rel="noopener">Linux中Buffer/Cache清理</a><br><a href="https://www.cnblogs.com/panfeng412/p/drop-caches-under-linux-system.html" target="_blank" rel="noopener">Linux服务器Cache占用过多内存导致系统内存不足问题的排查解决</a><br><a href="https://www.cnblogs.com/panfeng412/p/drop-caches-under-linux-system-2.html" target="_blank" rel="noopener">Linux服务器Cache占用过多内存导致系统内存不足问题的排查解决-2</a></p><h3 id="禁用buffer-cache功能"><a href="#禁用buffer-cache功能" class="headerlink" title="禁用buffer/cache功能"></a>禁用buffer/cache功能</h3><p>可以在<code>/etc/sysctl.conf</code>中添加下面内容禁用buffer/cache功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vm.dirty_ratio = 1</span><br><span class="line">vm.dirty_background_ratio=1  </span><br><span class="line">vm.dirty_writeback_centisecs=2  </span><br><span class="line">vm.dirty_expire_centisecs=3  </span><br><span class="line">vm.drop_caches=3  </span><br><span class="line">vm.swappiness =100  </span><br><span class="line">vm.vfs_cache_pressure=163  </span><br><span class="line">vm.overcommit_memory=2  </span><br><span class="line">vm.lowmem_reserve_ratio=32 32 8  </span><br><span class="line">kern.maxvnodes=3</span><br></pre></td></tr></table></figure><p>/proc/sys/vm/dirty_ratio</p><p>这个参数表示文件系统的写缓冲区占用系统内存的百分比，即当写缓冲使用到系统内存多少的时候，开始向磁盘写数据。增大之会使用更多系统内存用于磁盘写缓冲，也可以极大提高系统的写性能。但是，当你需要持续、恒定的写入场合时，应该降低其数值。</p><p>/proc/sys/vm/dirty_background_ratio</p><p>这个参数控制文件系统的pdflush进程，在何时刷新磁盘。单位是百分比，表示系统内存的百分比，意思是当写缓冲使用到系统内存多少的时候，pdflush开始向磁盘写数据。增大之会使用更多系统内存用于磁盘写缓冲，也可以极大提高系统的写性能。但是，当你需要持续、恒定的写入场合时， 应该降低其数值</p><p>/proc/sys/vm/dirty_writeback_centisecs</p><p>这个参数控制内核的脏数据刷新进程pdflush的运行间隔。单位是 1/100 秒。缺省数值是500，也就是 5 秒。如果你的系统是持续地写入动作，那么实际上还是降低这个数值比较好，这样可以把尖峰的写操作削平成多次写操</p><p>/proc/sys/vm/dirty_expire_centisecs</p><p>这个参数声明Linux内核写缓冲区里面的数据多“旧”了之后，pdflush进程就开始考虑写到磁盘中去。单位是 1/100秒。缺省是 30000，也就是 30 秒的数据就算旧了，将会刷新磁盘。对于特别重载的写操作来说，这个值适当缩小也是好的，但也不能缩小太多，因为缩小太多也会导致IO提高太快。建议设置为 1500，也就是15秒算旧。</p><p>/proc/sys/vm/drop_caches</p><p>释放已经使用的cache</p><p>/proc/sys/vm/page-cluster</p><p>该文件表示在写一次到swap区的时候写入的页面数量，0表示1页，1表示2页，2表示4页。</p><p>/proc/sys/vm/swapiness</p><p>该文件表示系统进行交换行为的程度，数值（0-100）越高，越可能发生磁盘交换。</p><p>/proc/sys/vm/vfs_cache_pressure</p><p>该文件表示内核回收用于directory和inode cache内存的倾向</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins运行shell脚本时读取系统环境变量</title>
      <link href="/2019/09/01/jenkins/jenkins-sh-read-env/"/>
      <url>/2019/09/01/jenkins/jenkins-sh-read-env/</url>
      
        <content type="html"><![CDATA[<h2 id="FreeStyle的JenkinsJob"><a href="#FreeStyle的JenkinsJob" class="headerlink" title="FreeStyle的JenkinsJob"></a>FreeStyle的JenkinsJob</h2><p>在freestyle的job中配置执行shell命令后，job在运行时默认的执行方式为</p><p><code>/bin/bash -xe /tmp/jenkinsxxxx.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Building in workspace /var/lib/jenkins/workspace/jenkins_shell_test</span><br><span class="line">[jenkins_shell_test] $ /bin/sh -xe /tmp/jenkins6138408577395354213.sh</span><br><span class="line">+ set -x</span><br><span class="line">+ export</span><br><span class="line">export BUILD_CAUSE=&quot;MANUALTRIGGER&quot;</span><br><span class="line">export BUILD_CAUSE_MANUALTRIGGER=&quot;true&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在执行机上查看对应的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef |grep -i jenkins</span><br><span class="line">jenkins  12371     1 20 16:30 ?        00:03:55 /etc/alternatives/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20</span><br><span class="line">jenkins  27359 12371  0 16:48 ?        00:00:00 /bin/sh -xe /tmp/jenkins6138408577395354213.sh</span><br><span class="line">jenkins  27360 27359  0 16:48 ?        00:00:00 sleep 30</span><br></pre></td></tr></table></figure><p><code>/bin/sh -xe xxx.sh</code>方式运行的shell为<a href="/2019/08/30/linux/shell#bash启动时执行的启动文件">非交互式非登录的模式</a>，这种模式下的shell在启动时不会读取/etc/profile中的内容，所以/etc/profile中定义的环境变量不能访问</p><p>解决方法:</p><p>在shell中添加 <code>#!/bin/bash -ilex</code>，将shell模式修改为交互登录模式即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef |grep -i jenkins</span><br><span class="line">jenkins  12371     1 10 16:30 ?        00:04:43 /etc/alternatives/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20</span><br><span class="line">jenkins  15197 12371  0 17:13 ?        00:00:00 /bin/bash -liex /tmp/jenkins15271049705299428998.sh</span><br><span class="line">jenkins  15211 15197  0 17:13 ?        00:00:00 sleep 30</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p><code>注意, #!/bin/bash -ilex 一定要在首行</code></p><h2 id="pipeline模式的JenkinsJob"><a href="#pipeline模式的JenkinsJob" class="headerlink" title="pipeline模式的JenkinsJob"></a>pipeline模式的JenkinsJob</h2><p>pipeline模式下的原因与解决方案与FreeStyle类似，只是pipeline模式下脚本运行的进程不是jenkins主进程直接fork出来的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef |grep -i jenkins</span><br><span class="line">jenkins  12371     1 11 16:30 ?        00:05:13 /etc/alternatives/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20</span><br><span class="line">jenkins  17509     1  0 17:16 ?        00:00:00 sh -c (pid=$$; &#123; while [ \( -d /proc/$pid -o \! -d /proc/$$ \) -a -d '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf' -a \! -f '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt' ]; do touch '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-log.txt'; sleep 3; done &#125; &amp; jsc=durable-7a8937f3d4c335791e06262c93820f88; JENKINS_SERVER_COOKIE=$jsc 'sh' -xe  '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/script.sh' &gt; '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-log.txt' 2&gt;&amp;1; echo $? &gt; '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt.tmp'; mv '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt.tmp' '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt'; wait) &gt;&amp;- 2&gt;&amp;- &amp;</span><br><span class="line">jenkins  17511 17509  0 17:16 ?        00:00:00 sh -c (pid=$$; &#123; while [ \( -d /proc/$pid -o \! -d /proc/$$ \) -a -d '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf' -a \! -f '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt' ]; do touch '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-log.txt'; sleep 3; done &#125; &amp; jsc=durable-7a8937f3d4c335791e06262c93820f88; JENKINS_SERVER_COOKIE=$jsc 'sh' -xe  '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/script.sh' &gt; '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-log.txt' 2&gt;&amp;1; echo $? &gt; '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt.tmp'; mv '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt.tmp' '/var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/jenkins-result.txt'; wait) &gt;&amp;- 2&gt;&amp;- &amp;</span><br><span class="line">jenkins  17512 17509  0 17:16 ?        00:00:00 sh -xe /var/lib/jenkins/workspace/pipeline_shell_test@tmp/durable-da5871cf/script.sh</span><br><span class="line">jenkins  17514 17512  0 17:16 ?        00:00:00 sleep 30</span><br><span class="line">jenkins  17786 17511  0 17:16 ?        00:00:00 sleep 3</span><br></pre></td></tr></table></figure><p>pipeline中配置bash的登录模式</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #!/bin/bash -ilex 一定要在首行，与第一个 """ 同行</span></span><br><span class="line">sh <span class="string">"""#!/bin/bash -ilex</span></span><br><span class="line"><span class="string">export</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash参数说明</title>
      <link href="/2019/09/01/bash/shell-parameter/"/>
      <url>/2019/09/01/bash/shell-parameter/</url>
      
        <content type="html"><![CDATA[<h2 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h2><h3 id><a href="#" class="headerlink" title="$$"></a>$$</h3><p>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示当前shell的PID</span></span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">7338</span><br><span class="line">[root@localhost ~]# cat test.sh</span><br><span class="line">echo $$     # 此处打印 test.sh 脚本运行的 PID</span><br><span class="line">sleep 10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行shell脚本程序test.sh时，系统将创建一个子shell，它的父shell为 7338</span></span><br><span class="line">[root@localhost ~]# /bin/bash test.sh &amp;</span><br><span class="line">[1] 16371</span><br><span class="line">[root@localhost ~]# 16371</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ps -ef |grep -i test.sh</span><br><span class="line">root     16371  7338  0 05:13 pts/0    00:00:00 /bin/bash test.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash启动介绍</title>
      <link href="/2019/08/30/bash/shell/"/>
      <url>/2019/08/30/bash/shell/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>0号/1号和2号进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UID        PID  PPID  C STIME TTY      TIME     CMD</span><br><span class="line">root         1     0  0 Aug08 ?        00:00:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2     0  0 Aug08 ?        00:00:00 [kthreadd]</span><br></pre></td></tr></table></figure><p>系统启动后，当用户登录到系统时，系统将启动一个用户态的shell进程。在shell进程中运行shell脚本程序时，系统将创建一个子shell，此时系统中将有两个shell，一个是登录时系统启动的shell，另一个是系统为运行脚本程序创建的shell。脚本执行运行完后，子shell将终止，并返回到执行脚本之前的shell。</p><p>tty终端的shell进程如下：</p><p><img src="/img/shell_1.png" alt="tty_shell"></p><p>通过ssh连接到系统的shell进程如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">7338</span><br><span class="line">[root@localhost ~]# ps -ef |grep -i 7338</span><br><span class="line">root      7338  7331  0 03:48 pts/0    00:00:00 -bash</span><br><span class="line">[root@localhost ~]# ps -ef |grep -i 7331</span><br><span class="line">root      7331  3329  0 03:48 ?        00:00:12 sshd: root@pts/0,pts/1</span><br><span class="line">root      7338  7331  0 03:48 pts/0    00:00:00 -bash</span><br><span class="line">root      7344  7331  0 03:48 pts/1    00:00:00 -bash</span><br><span class="line">[root@localhost ~]# ps -ef |grep -i 3329</span><br><span class="line">root      3329     1  0 Aug08 ?        00:00:00 /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><h2 id="shell分类"><a href="#shell分类" class="headerlink" title="shell分类"></a>shell分类</h2><h3 id="交互式shell与非交互式shell"><a href="#交互式shell与非交互式shell" class="headerlink" title="交互式shell与非交互式shell"></a>交互式shell与非交互式shell</h3><h4 id="区分方法"><a href="#区分方法" class="headerlink" title="区分方法"></a>区分方法</h4><ol><li><p>可以通过打印“$-”变量的值（代表着当前shell的选项标志），查看其中的“i”选项（表示interactive shell）来区分交互式与非交互式shell。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">31991</span><br><span class="line">[root@localhost ~]# cat test.sh</span><br><span class="line">echo $-</span><br><span class="line">case "$-" in</span><br><span class="line">*i*) echo This shell is interactive;;</span><br><span class="line">*) echo This shell is not interactive;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# bash test.sh</span><br><span class="line">hB</span><br><span class="line">This shell is not interactive</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">31991</span><br><span class="line">[root@localhost ~]# bash -i test.sh </span><br><span class="line">himB</span><br><span class="line">This shell is interactive</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">31991</span><br></pre></td></tr></table></figure></li><li><p>通过检查<code>$PS1</code>的内容是否为空判断，在非交互式shell中不会设置该变量</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">31991</span><br><span class="line">[root@localhost ~]# cat test.sh</span><br><span class="line">echo $-</span><br><span class="line">if [[ -z "$PS1" ]];then</span><br><span class="line">    echo This shell is not interactive</span><br><span class="line">else</span><br><span class="line">    echo This shell is interactive</span><br><span class="line">fi</span><br><span class="line">[root@localhost ~]# bash test.sh</span><br><span class="line">hB</span><br><span class="line">This shell is not interactive</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">31991</span><br><span class="line">[root@localhost ~]# bash -i test.sh</span><br><span class="line">himB</span><br><span class="line">This shell is interactive</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">31991</span><br><span class="line">[root@localhost ~]# echo $-</span><br><span class="line">himBH</span><br></pre></td></tr></table></figure></li></ol><p><a href="http://kodango.com/explain-shell-default-options" target="_blank" rel="noopener">himBH解释</a></p><h4 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h4><p>顾名思义，shell等待用户输入，输入后系统立即执行并返回结果，并等待一下此输入。当退出后，shell也终止了。</p><p>启动交互式shell的方法</p><ul><li><p>启动shell时不带任何选项参数</p></li><li><p>启动shell时指定-i选项参数</p></li><li><p>启动shell时指定了-s且没有指定-c参数</p></li></ul><h4 id="非交互式shell"><a href="#非交互式shell" class="headerlink" title="非交互式shell"></a>非交互式shell</h4><p>通常情况下，执行shell脚本文件时的子shell都是属于非交互式的。在这种场景下，shell读取存放在脚本文件中的内容然后执行，直到读到文件的结尾EOF，shell终止。</p><h3 id="登录shell与非登录shell"><a href="#登录shell与非登录shell" class="headerlink" title="登录shell与非登录shell"></a>登录shell与非登录shell</h3><h4 id="登录式shell"><a href="#登录式shell" class="headerlink" title="登录式shell"></a>登录式shell</h4><p>需要用户名和密码登录后才能进入的shell，或者通过–login选项打开的shell。</p><h4 id="非登录式shell"><a href="#非登录式shell" class="headerlink" title="非登录式shell"></a>非登录式shell</h4><p>不需要输入用户名和密码即可打开的Shell，例如：直接命令“bash”就是打开一个新的非登录shell，在Gnome或KDE中打开一个“终端”（terminal）窗口程序也是一个非登录shell。</p><p><code>执行exit命令，退出一个shell（登录或非登录shell）；执行logout命令，退出登录shell（不能退出非登录shell）</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">2532</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">2709</span><br><span class="line">[root@localhost ~]# logout</span><br><span class="line">bash: logout: not login shell: use 'exit'</span><br><span class="line">[root@localhost ~]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# exit</span><br><span class="line">logout</span><br><span class="line">连接断开</span><br></pre></td></tr></table></figure><p><code>bash是 login shell 时，其进程名为&quot;-bash&quot; 而不是&quot;bash&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">2995</span><br><span class="line">[root@localhost ~]# ps -ef |grep -i bash</span><br><span class="line">root      2995  2985  0 08:55 pts/0    00:00:00 -bash</span><br><span class="line">root      3001  2985  0 08:55 pts/1    00:00:00 -bash</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">3689</span><br><span class="line">[root@localhost ~]# ps -ef |grep -i bash</span><br><span class="line">root      2995  2985  0 08:55 pts/0    00:00:00 -bash</span><br><span class="line">root      3001  2985  0 08:55 pts/1    00:00:00 -bash</span><br><span class="line">root      3689  2995  0 08:56 pts/0    00:00:00 bash</span><br><span class="line">[root@localhost ~]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">2995</span><br></pre></td></tr></table></figure><h3 id="shell分类组合情况"><a href="#shell分类组合情况" class="headerlink" title="shell分类组合情况"></a>shell分类组合情况</h3><table><thead><tr><th></th><th>登录式</th><th>非登录式</th></tr></thead><tbody><tr><td>交互式</td><td>1.登录系统时获得的顶层shell，无论是通过本地终端登录，还是通过网络ssh登录<br>2.使用bash –login命令启动的shell<br>3.使用su [-/-l/–login] [user]切换到其他用户时</td><td>1.使用bash命令启动的shell<br>2.使用su [user]切换到其他用户时</td></tr><tr><td>非交互式</td><td>在脚本中使用–login选项调用bash（比如在脚本第一行做如下指定：#!/bin/bash –login）</td><td>通常情况下执行bash脚本时运行脚本的子shell</td></tr></tbody></table><h3 id="bash启动时执行的启动文件"><a href="#bash启动时执行的启动文件" class="headerlink" title="bash启动时执行的启动文件"></a>bash启动时执行的启动文件</h3><table><thead><tr><th></th><th>登录式</th><th>非登录式</th></tr></thead><tbody><tr><td>交互式</td><td>如果/etc/profile存在，则首先执行该文件<br><code>依次查找</code>存在并可读的~/.bash_profile, ~/.bash_login, ~/.profile中的第一个执行<br>如果启动时指定了<code>--noprofile</code>选项，则不执行上述两个步骤<br>退出时，如果~/.bash_logout存在则执行</td><td>如果~/.bashrc存在则执行<br>如果指定了<code>--norc</code>参数则不执行上述步骤<br>可以通过指定<code>--rcfile file</code>指定其他文件替代~/.bashrc</td></tr><tr><td>非交互式</td><td>同上</td><td>查找环境变量BASH_ENV，读取并执行BASH_ENV指向的文件中的内容</td></tr></tbody></table><h2 id="shell启动选项参数"><a href="#shell启动选项参数" class="headerlink" title="shell启动选项参数"></a>shell启动选项参数</h2><h3 id="i-选项"><a href="#i-选项" class="headerlink" title="-i 选项"></a>-i 选项</h3><p>强制子shell使用交互式方式运行</p><h3 id="c-cmd-string-选项"><a href="#c-cmd-string-选项" class="headerlink" title="-c cmd_string 选项"></a>-c cmd_string 选项</h3><p>表示子shell从字符串中读入命令，如果字符串后还有变量就被设定为从$0开始的位置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /bin/bash -c 'echo hello world'</span><br><span class="line">hello world</span><br><span class="line">[root@localhost ~]# /bin/bash -c 'echo $0 $1' hello kitty</span><br><span class="line">hello kitty</span><br></pre></td></tr></table></figure><p><a href="https://baohaojun.github.io/blog/2013/12/11/0-ssh-remote-command-and-bash--c-string.html" target="_blank" rel="noopener">ssh执行远程命令和bash -c string的用法</a></p><h3 id="s-选项"><a href="#s-选项" class="headerlink" title="-s 选项"></a>-s 选项</h3><p>如果指定<code>-s</code>参数，那么表示子shell从标准输入中读入命令，直到输入exit。 该参数允许指定位置参数并将其传入子shell中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">9051</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入子shell中，未指定-c参数时，子shell为交互式shell</span></span><br><span class="line">[root@localhost ~]# bash -s hello new world</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">11211</span><br><span class="line">[root@localhost ~]# echo $-</span><br><span class="line">himBHs</span><br><span class="line">[root@localhost ~]# echo $1</span><br><span class="line">hello</span><br><span class="line">[root@localhost ~]# echo $2</span><br><span class="line">new</span><br><span class="line">[root@localhost ~]# echo $3</span><br><span class="line">world</span><br><span class="line">[root@localhost ~]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退回父shell</span></span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">9051</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果指定-c参数，子shell为非交互式shell</span></span><br><span class="line">[root@localhost ~]# bash -s -c 'echo $0' hello</span><br><span class="line">hello</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">9051</span><br><span class="line">[root@localhost ~]# bash -s -c 'echo $-'</span><br><span class="line">hBcs</span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">9051</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash中字典使用</title>
      <link href="/2019/08/08/bash/bash-dict/"/>
      <url>/2019/08/08/bash/bash-dict/</url>
      
        <content type="html"><![CDATA[<p>bash版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash --version</span><br><span class="line">GNU bash, version 4.2.46(2)-release</span><br></pre></td></tr></table></figure><p>bash中字典使用举例</p><h3 id="字典声明赋值"><a href="#字典声明赋值" class="headerlink" title="字典声明赋值"></a>字典声明赋值</h3><blockquote><p>与数组不同，字典使用前必须先声明</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Declare dict person 必须先声明</span></span><br><span class="line"><span class="built_in">declare</span> -A person</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 () 赋值</span></span><br><span class="line">person=([name]=<span class="string">"john"</span> [age]=<span class="string">"18"</span>)</span><br></pre></td></tr></table></figure><h3 id="字典读取及遍历"><a href="#字典读取及遍历" class="headerlink" title="字典读取及遍历"></a>字典读取及遍历</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A person</span><br><span class="line"><span class="comment"># 根据key读取字典内容</span></span><br><span class="line">person=([name]=<span class="string">"lucy"</span> [age]=<span class="string">"22"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person["name"]&#125;</span>      <span class="comment"># lucy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取不存在的key时，返回为空</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;person["phone"]&#125;</span> =~ <span class="string">""</span> ]]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"empty"</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"not empty"</span>; <span class="keyword">fi</span>   <span class="comment"># empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印字典中的所有value, 返回值为数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[@]&#125;</span>       <span class="comment">#lucy 22</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[@]:0:1&#125;</span>   <span class="comment">#lucy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印字典中的所有key，返回值为数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!person[@]&#125;</span>      <span class="comment">#name age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取字典中键值对的数量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#person[@]&#125;</span>   <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;!person[@]&#125;</span>;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"key: <span class="variable">$&#123;key&#125;</span>, value: <span class="variable">$&#123;person[$key]&#125;</span>"</span>; <span class="keyword">done</span></span><br><span class="line"><span class="comment">#key: name, value: lucy</span></span><br><span class="line"><span class="comment">#key: age, value: 22</span></span><br></pre></td></tr></table></figure><h3 id="字典中增加删除元素"><a href="#字典中增加删除元素" class="headerlink" title="字典中增加删除元素"></a>字典中增加删除元素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加字典元素两种方式</span></span><br><span class="line"><span class="built_in">declare</span> -A person</span><br><span class="line">person=([name]=<span class="string">"hanmeimei"</span> [age]=<span class="string">"23"</span>)</span><br><span class="line">person+=([phoneNumber]=<span class="string">"13920380998"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[@]&#125;</span>       <span class="comment"># hanmeimei 23 13920380998</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!person[@]&#125;</span>      <span class="comment"># name age phoneNumber</span></span><br><span class="line"></span><br><span class="line">person[addr]=<span class="string">"shanghai"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[@]&#125;</span>       <span class="comment">#hanmeimei 23 shanghai 13920380998</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!person[@]&#125;</span>      <span class="comment">#name age addr phoneNumber</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除字典元素</span></span><br><span class="line"><span class="built_in">unset</span> person[phoneNumber]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[@]&#125;</span>       <span class="comment">#hanmeimei 23 shanghai</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!person[@]&#125;</span>      <span class="comment">#name age addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除不存在的字典元素时无影响</span></span><br><span class="line"><span class="built_in">unset</span> person[phoneNumber]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[@]&#125;</span>       <span class="comment">#hanmeimei 23 shanghai</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!person[@]&#125;</span>      <span class="comment">#name age addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除整个字典</span></span><br><span class="line"><span class="built_in">unset</span> person</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;person&#125;</span> =~ <span class="string">""</span> ]]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"empty"</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"not empty"</span>; <span class="keyword">fi</span>   <span class="comment">#empty</span></span><br></pre></td></tr></table></figure><h3 id="字典元素值替换"><a href="#字典元素值替换" class="headerlink" title="字典元素值替换"></a>字典元素值替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A person</span><br><span class="line">person=([name]=<span class="string">"lilei"</span> [age]=<span class="string">"12"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[name]&#125;</span>    <span class="comment">#lilei</span></span><br><span class="line">person[name]=<span class="string">"lucy"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;person[name]&#125;</span>    <span class="comment">#lucy</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过shell实现yaml目标变量替换</title>
      <link href="/2019/08/08/bash/shell-replace-yaml-template/"/>
      <url>/2019/08/08/bash/shell-replace-yaml-template/</url>
      
        <content type="html"><![CDATA[<p>yaml的模板<code>build_template.yaml</code>如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line"><span class="attr">  - url:</span> <span class="string">"$&#123;REPO_URL&#125;"</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">"$&#123;BRANCH&#125;"</span></span><br></pre></td></tr></table></figure><p><code>REPO_URL</code>和<code>BRANCH</code>定义在环境变量中或写入<code>config.ini</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat config.ini</span></span><br><span class="line"><span class="attr">REPO_URL</span>=<span class="string">"https://github.com/etcd-io/etcd.git"</span></span><br><span class="line"><span class="attr">BRANCH</span>=<span class="string">"master'</span></span><br></pre></td></tr></table></figure><p>替换脚本如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configContent=$(cat config.ini)</span><br><span class="line">yamlTemplate=$(cat build_template.yaml)</span><br><span class="line">printf "$configContent\ncat &lt;&lt; EOF\n$&#123;yamlTemplate&#125;\nEOF" |bash &gt; ./build.yaml</span><br></pre></td></tr></table></figure><p>生成的build.yaml文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line"><span class="attr">  - url:</span> <span class="string">"https://github.com/etcd-io/etcd.git"</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">"master"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash数组</title>
      <link href="/2019/07/23/bash/bash-array/"/>
      <url>/2019/07/23/bash/bash-array/</url>
      
        <content type="html"><![CDATA[<p>bash版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash --version</span><br><span class="line">GNU bash, version 4.2.46(2)-release</span><br></pre></td></tr></table></figure><p>bash数组使用举例</p><h3 id="数组声明赋值"><a href="#数组声明赋值" class="headerlink" title="数组声明赋值"></a>数组声明赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Declare array names</span></span><br><span class="line"><span class="built_in">declare</span> -a names   <span class="comment"># 也可以不用声明，直接采用数组的赋值方式赋值，bash能自动识别为数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 [] 赋值</span></span><br><span class="line">names[0]=<span class="string">"john"</span></span><br><span class="line">names[1]=<span class="string">"lucy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 () 赋值</span></span><br><span class="line">names=(<span class="string">"john"</span> <span class="string">"lucy"</span>)</span><br><span class="line">names=([0]=<span class="string">"john"</span> [1]=<span class="string">"lucy"</span>)</span><br><span class="line">names=([1]=<span class="string">"jessica"</span> [3]=<span class="string">"hanmeimei"</span>) <span class="comment"># 可以指定下标不连续</span></span><br></pre></td></tr></table></figure><h3 id="数组读取及遍历"><a href="#数组读取及遍历" class="headerlink" title="数组读取及遍历"></a>数组读取及遍历</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据下标读取数组内容</span></span><br><span class="line">names=([0]=<span class="string">"lily"</span> [1]=<span class="string">"lucy"</span> [3]=<span class="string">"hanmeimei"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[1]&#125;</span>   <span class="comment"># lucy</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;names[2]&#125;</span> =~ <span class="string">""</span> ]]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"empty"</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"not empty"</span>; <span class="keyword">fi</span>   <span class="comment"># empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数组中所有元素， 此时打印出来的内容的是字符串列表</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment">#lily lucy hanmeimei</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数组中元素的索引列表</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!names[@]&#125;</span>   <span class="comment"># 0 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组长度</span></span><br><span class="line"><span class="comment"># 上面定义的数组下标虽然不连续，但是数组长度仍为 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#names[@]&#125;</span>   <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;names[@]&#125;</span>;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$name</span>; <span class="keyword">done</span></span><br><span class="line"><span class="comment"># lily</span></span><br><span class="line"><span class="comment"># lucy</span></span><br><span class="line"><span class="comment"># hanmeimei</span></span><br></pre></td></tr></table></figure><h3 id="数组截取及组合"><a href="#数组截取及组合" class="headerlink" title="数组截取及组合"></a>数组截取及组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">names=(<span class="string">'lilei'</span> <span class="string">'jack'</span> <span class="string">'hanmeimei'</span> <span class="string">'lily'</span> <span class="string">'lucy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取从索引 1 开始（包含索引 1）的后面 3 个元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]:1:3&#125;</span>    <span class="comment"># jack hanmeimei lily</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果未指定元素个数，则表示后面所有元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]:2&#125;</span>      <span class="comment"># hanmeimei lily lucy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个数组组合</span></span><br><span class="line">names1=(<span class="string">'name1_1'</span> <span class="string">'name1_2'</span>)</span><br><span class="line">names2=(<span class="string">'name2_1'</span> <span class="string">'name2_2'</span> <span class="string">'name2_3'</span>)</span><br><span class="line">names=(<span class="variable">$&#123;names1[@]&#125;</span> <span class="variable">$&#123;names2[@]&#125;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># name1_1 name1_2 name2_1 name2_2 name2_3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组中增加元素</span></span><br><span class="line">names=(<span class="string">'lily'</span> <span class="string">'lucy'</span>)</span><br><span class="line">names=(<span class="string">"<span class="variable">$&#123;names[@]&#125;</span>"</span> <span class="string">"hanmeimei"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># lily lucy hanmeimei</span></span><br></pre></td></tr></table></figure><h3 id="删除数据中元素"><a href="#删除数据中元素" class="headerlink" title="删除数据中元素"></a>删除数据中元素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">names=(<span class="string">'lily'</span> <span class="string">'lucy'</span> <span class="string">'hanmeimei'</span> <span class="string">'lilei'</span> <span class="string">'jack'</span>)</span><br><span class="line"><span class="comment"># 删除数组中索引为 1 的元素</span></span><br><span class="line"><span class="built_in">unset</span> names[1]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># lily hanmeimei lilei jack</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!names[@]&#125;</span>   <span class="comment"># 0 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除整个数组</span></span><br><span class="line"><span class="built_in">unset</span> names</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数组截取然后重新组合方式删除元素</span></span><br><span class="line">names=(<span class="string">'lily'</span> <span class="string">'lucy'</span> <span class="string">'hanmeimei'</span> <span class="string">'lilei'</span> <span class="string">'jack'</span>)</span><br><span class="line">names=(<span class="variable">$&#123;names[@]:0:1&#125;</span> <span class="variable">$&#123;names[@]:2&#125;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># lily hanmeimei lilei jack</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!names[@]&#125;</span>   <span class="comment"># 0 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模式操作符删除数组中的元素</span></span><br><span class="line">names=(<span class="string">'lily'</span> <span class="string">'lucy'</span> <span class="string">'hanmeimei'</span> <span class="string">'lilei'</span> <span class="string">'jack'</span>)</span><br><span class="line">names=(@&#123;names[@]/lucy/&#125;)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># lily hanmeimei lilei jack</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!names[@]&#125;</span>   <span class="comment"># 0 1 2 3</span></span><br></pre></td></tr></table></figure><h3 id="数组元素值替换"><a href="#数组元素值替换" class="headerlink" title="数组元素值替换"></a>数组元素值替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用数组下标赋值</span></span><br><span class="line">names=(<span class="string">'lilei'</span> <span class="string">'hanmeimei'</span> <span class="string">'lucy'</span> <span class="string">'lily'</span>)</span><br><span class="line">names[1]=<span class="string">'jessica'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># lilei jessica lucy lily</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用模式操作符进行内容替换</span></span><br><span class="line">names=(<span class="string">'lilei'</span> <span class="string">'hanmeimei'</span> <span class="string">'lucy'</span> <span class="string">'lily'</span>)</span><br><span class="line">names=(<span class="variable">$&#123;names[@]/hanmeimei/jessica&#125;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;names[@]&#125;</span>    <span class="comment"># lilei jessica lucy lily</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash使用总结</title>
      <link href="/2019/07/23/bash/bash-usage/"/>
      <url>/2019/07/23/bash/bash-usage/</url>
      
        <content type="html"><![CDATA[<p><a href="/2019/08/30/linux/shell">bash启动简介</a><br><a href="/2019/09/01/linux/shell-parameter">bash参数</a></p><p><a href="https://www.gnu.org/software/bash/" target="_blank" rel="noopener">Bash官网</a></p><p><a href="/2019/07/23/linux/bash-array">Bash数组</a><br><a href="/2019/08/08/linux/bash-dict">Bash字典</a></p><p><a href="/2019/08/08/linux/shell-replace-yaml-template">通过shell实现yaml模板变量替换</a></p><p><a href="https://blog.csdn.net/u012294618/article/details/78427864" target="_blank" rel="noopener">Unix系统中的Shebang符号</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipeline序列化问题</title>
      <link href="/2019/07/22/jenkins/jenkins-serialization/"/>
      <url>/2019/07/22/jenkins/jenkins-serialization/</url>
      
        <content type="html"><![CDATA[<p>Jenkins支持所有运行的job都可以在服务重启时中断、暂停在服务重启后恢复运行。为了实现这一点，Jenkins pipeline中定义的所有变量都必须是可序列化的。类似的，Jenkins也必须能序列化构建中节点和子job之间的全局变量的状态。</p><p>遇到<code>java.io.NotSerializableException</code>问题的一般方法</p><ol><li>将不可序列化的代码封装在一个用@NonCPS注释的函数中。这告诉Jenkins函数包含不可序列化的部分，必须在不可中断的情况下执行。使用NonCPS的函数中不能调用任何jenkins steps或其他CPS-transformed的代码。</li><li>尝试取消不可序列化变量的定义</li></ol><p>更多详细信息参见<a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md#serializing-local-variables" target="_blank" rel="noopener">链接</a></p><p>json解析</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.json.JsonSlurperClassic </span><br><span class="line"></span><br><span class="line"><span class="meta">@NonCPS</span></span><br><span class="line"><span class="keyword">def</span> jsonParse(<span class="keyword">def</span> json) &#123;</span><br><span class="line">    <span class="keyword">new</span> groovy.json.JsonSlurperClassic().parseText(json)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node(<span class="string">'master'</span>) &#123;</span><br><span class="line">    <span class="keyword">def</span> config =  jsonParse(readFile(<span class="string">"config.json"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> db = config[<span class="string">"database"</span>][<span class="string">"address"</span>]</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/42537744/jenkins-2-pipeline-serialization-problems-in-global-function" target="_blank" rel="noopener">参考1</a><br><a href="https://stackoverflow.com/questions/37864542/jenkins-pipeline-notserializableexception-groovy-json-internal-lazymap" target="_blank" rel="noopener">参考2</a><br><a href="https://issues.jenkins-ci.org/plugins/servlet/mobile#issue/JENKINS-27421" target="_blank" rel="noopener">参考3</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-log命令</title>
      <link href="/2019/07/22/git/git-cmd-log/"/>
      <url>/2019/07/22/git/git-cmd-log/</url>
      
        <content type="html"><![CDATA[<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log [&lt;options&gt;] [&lt;revision range&gt;] [[--] &lt;path&gt;…​]</span><br></pre></td></tr></table></figure><h3 id="命令参数选项"><a href="#命令参数选项" class="headerlink" title="命令参数选项"></a>命令参数选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>以补丁格式显示每次提交之间的差异</td></tr><tr><td>–stat</td><td>显示每次提交的文件修改统计信息</td></tr><tr><td>–shortstat</td><td>只显示 –stat 中最后的行数修改添加移除统计</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单</td></tr><tr><td>–abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示（比如”2 weeks ago”）</td></tr><tr><td>–graph</td><td>显示 ASCII 图形表示的分支合并历史</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式，格式见下表）</td></tr><tr><td>–oneline</td><td>–pretty=oneline –abbrev-commit 的简化用法</td></tr><tr><td>-(n)</td><td>仅显示最近的 n 条提交</td></tr><tr><td>–since, –after</td><td>仅显示指定时间之后的提交, 可以使用各种时间格式，比如说具体的某一天（”2008-01-15”），或者是多久以前（”2 years 1 day 3 minutes ago”）</td></tr><tr><td>–until, –before</td><td>仅显示指定时间之前的提交</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交</td></tr></tbody></table><p>format常用的格式占位符写法及其代表的意义。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td></tr><tr><td>%an</td><td>作者（author）的名字</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td></tr><tr><td>%ad</td><td>作者修订日期（可以用 -date= 选项定制格式）</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者(committer)的名字</td></tr><tr><td>ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos下jenkins的安装</title>
      <link href="/2019/07/16/centos/centos-jenkins-install/"/>
      <url>/2019/07/16/centos/centos-jenkins-install/</url>
      
        <content type="html"><![CDATA[<h2 id="非docker安装"><a href="#非docker安装" class="headerlink" title="非docker安装"></a>非docker安装</h2><h3 id="通过设置jenkins官方repo仓库下载"><a href="#通过设置jenkins官方repo仓库下载" class="headerlink" title="通过设置jenkins官方repo仓库下载"></a>通过设置jenkins官方repo仓库下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">yum install jenkins</span><br><span class="line">cat /etc/rc.d/init.d/jenkins</span><br></pre></td></tr></table></figure><p>安装后，jenkins.war默认地址为<br>JENKINS_WAR=”/usr/lib/jenkins/jenkins.war”</p><p>jenkins的config地址为<br>JENKINS_CONFIG=/etc/sysconfig/jenkins</p><p>jenkins服务的启动/停止/重启脚本为<br>/etc/init.d/jenkins</p><h3 id="下载rpm安装"><a href="#下载rpm安装" class="headerlink" title="下载rpm安装"></a>下载rpm安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.176.1-1.1.noarch.rpm</span><br><span class="line">rpm -ivh jenkins-2.176.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="下载war包"><a href="#下载war包" class="headerlink" title="下载war包"></a>下载war包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/jenkins/war-stable/latest/jenkins.war</span><br><span class="line"><span class="meta">#</span><span class="bash">wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</span></span><br><span class="line">java -jar jenkins.war</span><br></pre></td></tr></table></figure><p>常用的启动参数为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">java -Duser.timezone=GMT+08 \</span><br><span class="line"> -Djava.util.logging.config.file=/var/jenkins_home/jenkins.logging.properties \</span><br><span class="line"> -Dgroovy.grape.report.downloads=true -Divy.message.logger.level=4 \</span><br><span class="line"> -Dhudson.model.ParametersAction.keepUndefinedParameters=true \</span><br><span class="line"> -Dhudson.security.ArtifactsPermission=true -Djava.awt.headless=true \</span><br><span class="line"> -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai \</span><br><span class="line"> -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 \</span><br><span class="line"> -Dhudson.slaves.NodeProvisioner.MARGIN=50 \</span><br><span class="line"> -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 \</span><br><span class="line"> -Dhudson.slaves.NodeProvisioner.initialDelay=0 \</span><br><span class="line"> -Dhudson.slaves.NodeProvisioner.recurrencePeriod=2 \</span><br><span class="line"> -Dhudson.model.LoadStatistics.clock=2 \</span><br><span class="line"> -Dhudson.model.LoadStatistics.decay=0.1 \</span><br><span class="line"> -Dpermissive-script-security.enabled=true \</span><br><span class="line"> -server -Xms10g -Xmx32g -XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError \</span><br><span class="line"> -Xloggc:/var/jenkins_home/jenkins_gc.log \</span><br><span class="line"> -DJENKINS_HOME=/var/jenkins_home \</span><br><span class="line"> -jar jenkins.war --logfile=/var/jenkins_home/jenkins.log</span><br></pre></td></tr></table></figure><blockquote><p>jenkins.logging.properties 的内容参见<a href="/2019/11/15/jenkins-log-config">说明</a><br>permissive-script-security.enabled=true表示默认允许执行unsecured脚本，不再提示需要审核</p></blockquote><h3 id="虚拟机中启动jenkins后不能访问"><a href="#虚拟机中启动jenkins后不能访问" class="headerlink" title="虚拟机中启动jenkins后不能访问"></a>虚拟机中启动jenkins后不能访问</h3><ol><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙开放jinkins使用的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查当前防火墙开放的端口</span></span><br><span class="line">[root@localhost ~]# firewall-cmd  --list-ports</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置防火墙开放端口</span></span><br><span class="line">[root@localhost ~]# firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd  --list-ports</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">[root@localhost ~]# systemctl reload firewalld</span><br><span class="line">[root@localhost ~]# firewall-cmd  --list-ports</span><br><span class="line">8080/tcp</span><br></pre></td></tr></table></figure></li></ol><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>docker hub中有两种jenkins的镜像，jenkins官方推荐使用 <code>jenkinsci/blueocean</code> 镜像，该镜像中包含了blueocean插件，该镜像会在blueocean发布新版本时同步发布。还有一个镜像 <code>jenkins/jenkins</code>, 为jenkins的纯净版本。</p><p><code>jenkins/jenkins</code>的<a href="https://github.com/jenkinsci/docker" target="_blank" rel="noopener">github地址</a></p><p>容器化安装时，支持配置下面三个环境变量，来定义jenkins的配置</p><ul><li><p>JAVA_OPTS</p></li><li><p>JENKINS_HOME</p></li><li><p>JENKINS_OPTS</p></li><li><p>JENKINS_SLAVE_AGENT_PORT</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -d \</span><br><span class="line">  -p 80:8080 \</span><br><span class="line">  -p 31281:31281 \</span><br><span class="line">  -e JENKINS_SLAVE_AGENT_PORT=31281 \</span><br><span class="line">  -e JENKINS_HOME="/var/jenkins_home" \</span><br><span class="line">  -e JAVA_OPTS="-Duser.timezone=GMT+08 -Dgroovy.grape.report.downloads=true -Divy.message.logger.level=4 -Djava.util.logging.config.file=/var/jenkins_home/jenkins.logging.properties -Dhudson.model.ParametersAction.keepUndefinedParameters=true -Dhudson.security.ArtifactsPermission=true -Djava.awt.headless=true -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.recurrencePeriod=2 -Dhudson.model.LoadStatistics.clock=2 -Dhudson.model.LoadStatistics.decay=0.1 -server -Xms10g -Xmx32g -XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Xloggc:/var/jenkins_home/jenkins_gc.log" \</span><br><span class="line">  -e JENKINS_OPTS="--logfile=/var/jenkins_home/logs/jenkins.log" \</span><br><span class="line">  -v /data/jenkins_home:/var/jenkins_home \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  jenkins/jenkins</span><br></pre></td></tr></table></figure><blockquote><p>jenkins.logging.properties 的内容参见<a href="/2019/11/15/jenkins-log-config">说明</a></p></blockquote><h3 id="docker运行jenkins时提示权限错误"><a href="#docker运行jenkins时提示权限错误" class="headerlink" title="docker运行jenkins时提示权限错误"></a>docker运行jenkins时提示权限错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch: cannot touch ‘/var/jenkins_home/copy_reference_file.log’: Permission denied</span><br><span class="line">Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?</span><br></pre></td></tr></table></figure><p>因为容器启动时默认采用jenkins用户，uid和gid分别时 1000 和 1000，需要将挂载到容器里面的JENKINS_HOME对应的宿主机上的目录的所有者修改下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 1000:1000 /data/jenkins_home</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins通过Grab下载依赖失败</title>
      <link href="/2019/07/16/groovy/jenkins-groovy-grape/"/>
      <url>/2019/07/16/groovy/jenkins-groovy-grape/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">官方文档</a><br><a href="http://wiki.jikexueyuan.com/project/groovy-introduction/grape-dependency-manager.html" target="_blank" rel="noopener">极客学院翻译</a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用Jenkins的 pipeline as code 特性时，遇到使用第三方jar的情况，使用了<br><code>@Grab(group=&#39;org.restlet&#39;, module=&#39;org.restlet&#39;, version=&#39;1.1.6&#39;)</code>注解，但是在Jenkins job运行时下载依赖失败。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>grape默认时采用maven的 mvnrepository.com 来搜索依赖包，出问题的Jenkins master上是不能访问该仓库的，所以下载依赖失败。</p><p>在${user.home}/.groovy/目录下新增文件grapeConfig.xml，指定仓库地址为内网仓库或可访问的maven镜像仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ivysettings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span> <span class="attr">defaultResolver</span>=<span class="string">"downloadGrapes"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">"downloadGrapes"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ibiblio</span> <span class="attr">name</span>=<span class="string">"public"</span> <span class="attr">root</span>=<span class="string">"https://mirrors.huaweicloud.com/repository/maven/"</span> <span class="attr">m2compatible</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resolvers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ivysettings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>grapeConfig.xml的<a href="https://github.com/apache/groovy/blob/master/src/resources/groovy/grape/defaultGrapeConfig.xml" target="_blank" rel="noopener">默认配置</a>为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ivysettings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span> <span class="attr">defaultResolver</span>=<span class="string">"downloadGrapes"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">"downloadGrapes"</span> <span class="attr">returnFirst</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filesystem</span> <span class="attr">name</span>=<span class="string">"cachedGrapes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ivy</span> <span class="attr">pattern</span>=<span class="string">"$&#123;user.home&#125;/.groovy/grapes/[organisation]/[module]/ivy-[revision].xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifact</span> <span class="attr">pattern</span>=<span class="string">"$&#123;user.home&#125;/.groovy/grapes/[organisation]/[module]/[type]s/[artifact]-[revision](-[classifier]).[ext]"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">filesystem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ibiblio</span> <span class="attr">name</span>=<span class="string">"localm2"</span> <span class="attr">root</span>=<span class="string">"file:$&#123;user.home&#125;/.m2/repository/"</span> <span class="attr">checkmodified</span>=<span class="string">"true"</span> <span class="attr">changingPattern</span>=<span class="string">".*"</span> <span class="attr">changingMatcher</span>=<span class="string">"regexp"</span> <span class="attr">m2compatible</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- todo add 'endorsed groovy extensions' resolver here --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ibiblio</span> <span class="attr">name</span>=<span class="string">"jcenter"</span> <span class="attr">root</span>=<span class="string">"https://jcenter.bintray.com/"</span> <span class="attr">m2compatible</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ibiblio</span> <span class="attr">name</span>=<span class="string">"ibiblio"</span> <span class="attr">m2compatible</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resolvers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ivysettings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Jenkins中grape下载的第三方jar默认是缓存在${user.home}/.groovy/grapes/目录下。可以通过添加Jenkins的启动参数<code>-Dgroovy.grape.report.downloads=true</code> 和 <code>-Divy.message.logger.level=4</code>，在jenkins的日志中观察第三方依赖的下载过程。</p><blockquote><p>如果jenkins master采用docker方式安装时，使用jenkins用户登录，同时设置jenkins的user.home为JENKINS_HOME即可。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> groovy </tag>
            
            <tag> grape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-commit命令</title>
      <link href="/2019/07/16/git/git-cmd-commit/"/>
      <url>/2019/07/16/git/git-cmd-commit/</url>
      
        <content type="html"><![CDATA[<h2 id="git-commit-–amend"><a href="#git-commit-–amend" class="headerlink" title="git commit –amend"></a>git commit –amend</h2><font color="red">建议 git commit –amend 命令使用在未push到远端的场景。</font><h3 id="提交还未push到远端"><a href="#提交还未push到远端" class="headerlink" title="提交还未push到远端"></a>提交还未push到远端</h3><p>在某次修改时，修改了README.md文件，同时新增了amendTest文件。但是在commit的时候，只提交了README.md，忘记了amendTest文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with 'origin/master'.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        amendTest</span><br><span class="line"></span><br><span class="line">no changes added to commit (use "git add" and/or "git commit -a")</span><br><span class="line">[root@localhost gitTest]# git commit -am 'add amendTest file'</span><br><span class="line">[master ce1e058] add amendTest file</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@localhost gitTest]# git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of 'origin/master' by 1 commit.</span><br><span class="line">  (use "git push" to publish your local commits)</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        amendTest</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line">[root@localhost gitTest]# git log -n 3 --oneline</span><br><span class="line">a889479 (HEAD -&gt; master) add amendTest file</span><br><span class="line">11843d7 (origin/master, origin/HEAD) update</span><br><span class="line">bf2a12f update</span><br><span class="line">[root@localhost gitTest]# git diff --stat HEAD~1 HEAD</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@localhost gitTest]#</span><br></pre></td></tr></table></figure><p>此时，如果想将amendTest文件提交，同时不产生新的commit记录(即新提交内容合并到上一次提交中)，可以使用<code>git commit --amend</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git add .</span><br><span class="line">[root@localhost gitTest]# git commit --amend</span><br><span class="line">add amendTest file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with <span class="string">'#'</span> will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Date:      Sun Jun 30 15:00:20 2019 +0800</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Your branch is ahead of <span class="string">'origin/master'</span> by 1 commit.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       modified:   README.md</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   amendTest</span></span><br><span class="line"> Date: Sun Jun 30 15:00:20 2019 +0800</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 amendTest</span><br><span class="line">[root@localhost gitTest]# git log -n 3 --oneline</span><br><span class="line">d2a42e9 (HEAD -&gt; master) add amendTest file</span><br><span class="line">11843d7 (origin/master, origin/HEAD) update</span><br><span class="line">bf2a12f update</span><br><span class="line">[root@localhost gitTest]# git diff --stat HEAD~1 HEAD</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> amendTest | 1 +</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br></pre></td></tr></table></figure><p>使用该<code>git commit --amend</code>命令后，会生成一个新的commitid，合并本次提交与上一次提交内容。</p><h3 id="提交已经push到远端"><a href="#提交已经push到远端" class="headerlink" title="提交已经push到远端"></a>提交已经push到远端</h3><p>如果上一次commit已经push到远端，使用<code>git commit --amend</code>提交后，在push到远端时会被拒绝，通过<code>git status</code>提示发现当前分支与origin/master已经分叉</p><p>通过<code>git pull</code>将origin/master代码merge过来后，重新push可以推送成功</p><p>但是通过<code>git log</code>可以发现远端仍是有两次提交记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git log -n 3 --oneline</span><br><span class="line">e30f084 (HEAD -&gt; master) add amendTest file</span><br><span class="line">11843d7 (origin/master, origin/HEAD) update</span><br><span class="line">bf2a12f update</span><br><span class="line">[root@localhost gitTest]# git push origin master</span><br><span class="line">Enumerating objects: 5, done.</span><br><span class="line">Counting objects: 100% (5/5), done.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 404 bytes | 202.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:daybreakgx/gitTest.git</span><br><span class="line">   11843d7..e30f084  master -&gt; master</span><br><span class="line">[root@localhost gitTest]# git log -n 3 --oneline</span><br><span class="line">e30f084 (HEAD -&gt; master, origin/master, origin/HEAD) add amendTest file</span><br><span class="line">11843d7 update</span><br><span class="line">bf2a12f update</span><br><span class="line">[root@localhost gitTest]# git add .</span><br><span class="line">[root@localhost gitTest]# git commit --amend</span><br><span class="line">[master 7e0656c] add amendTest file add 2</span><br><span class="line"> Date: Sun Jun 30 15:25:00 2019 +0800</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 amendTest</span><br><span class="line">[root@localhost gitTest]# git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch and 'origin/master' have diverged,</span><br><span class="line">and have 1 and 1 different commits each, respectively.</span><br><span class="line">  (use "git pull" to merge the remote branch into yours)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">[root@localhost gitTest]# git log -n 3 --oneline</span><br><span class="line">7e0656c (HEAD -&gt; master) add amendTest file add 2</span><br><span class="line">11843d7 update</span><br><span class="line">bf2a12f update</span><br><span class="line"></span><br><span class="line">[root@localhost gitTest]# git push origin master</span><br><span class="line">To github.com:daybreakgx/gitTest.git</span><br><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to 'git@github.com:daybreakgx/gitTest.git'</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: 'git pull ...') before pushing again.</span><br><span class="line">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br><span class="line"></span><br><span class="line">[root@localhost gitTest]# git pull</span><br><span class="line">Merge made by the 'recursive' strategy.</span><br><span class="line">[root@localhost gitTest]# git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of 'origin/master' by 2 commits.</span><br><span class="line">  (use "git push" to publish your local commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">[root@localhost gitTest]# git push origin master</span><br><span class="line">Enumerating objects: 6, done.</span><br><span class="line">Counting objects: 100% (6/6), done.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (4/4), 437 bytes | 218.00 KiB/s, done.</span><br><span class="line">Total 4 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2/2), completed with 1 local object.</span><br><span class="line">To github.com:daybreakgx/gitTest.git</span><br><span class="line">   e30f084..bef9cc4  master -&gt; master</span><br><span class="line">[root@localhost gitTest]# git log --graph</span><br><span class="line">*   commit bef9cc49c27913ca9924378dd50c0ef50f6d8d48 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">|\  Merge: 7e0656c e30f084</span><br><span class="line">| | Author: daybreakgx &lt;daybreak.gx@gmail.com&gt;</span><br><span class="line">| | Date:   Sun Jun 30 15:27:59 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Merge branch 'master' of github.com:daybreakgx/gitTest</span><br><span class="line">| | </span><br><span class="line">| * commit e30f08487acfe730bfa241e0042a55503d41b791</span><br><span class="line">| | Author: daybreakgx &lt;daybreak.gx@gmail.com&gt;</span><br><span class="line">| | Date:   Sun Jun 30 15:25:00 2019 +0800</span><br><span class="line">| | </span><br><span class="line">| |     add amendTest file</span><br><span class="line">| | </span><br><span class="line">* | commit 7e0656c521428142bd248153050918a7a5f5d0ab</span><br><span class="line">|/  Author: daybreakgx &lt;daybreak.gx@gmail.com&gt;</span><br><span class="line">|   Date:   Sun Jun 30 15:25:00 2019 +0800</span><br><span class="line">|   </span><br><span class="line">|       add amendTest file add 2</span><br><span class="line">| </span><br><span class="line">* commit 11843d78157ea67dc2d4768366c1f6c446d93071</span><br><span class="line">| Author: daybreakgx &lt;daybreak.gx@gmail.com&gt;</span><br><span class="line">| Date:   Sun Jun 30 14:58:02 2019 +0800</span><br><span class="line">| </span><br><span class="line">|     update</span><br></pre></td></tr></table></figure><h2 id="撤销git-commit-–amend"><a href="#撤销git-commit-–amend" class="headerlink" title="撤销git commit –amend"></a><a href="https://segmentfault.com/a/1190000014272359" target="_blank" rel="noopener">撤销git commit –amend</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-ls-files命令</title>
      <link href="/2019/07/08/git/git-cmd-ls-files/"/>
      <url>/2019/07/08/git/git-cmd-ls-files/</url>
      
        <content type="html"><![CDATA[<p>该命令用于显示暂存区(index)或工作区(working tree)的文件信息</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>git ls-files [-z] [-t] [-v] [-f]<br>        (–[cached|deleted|others|ignored|stage|unmerged|killed|modified])<em><br>        (-[c|d|o|i|s|u|k|m])</em><br>        [–eol]<br>        [-x &lt;pattern>|–exclude=&lt;pattern>]<br>        [-X &lt;file>|–exclude-from=&lt;file>]<br>        [–exclude-per-directory=&lt;file>]<br>        [–exclude-standard]<br>        [–error-unmatch] [–with-tree=&lt;tree-ish>]<br>        [–full-name] [–recurse-submodules]<br>        [–abbrev] [–] [&lt;file>…​]</p><h2 id="命令参数选项"><a href="#命令参数选项" class="headerlink" title="命令参数选项"></a>命令参数选项</h2><ul><li>-c, –cached: 显示暂存区中的文件</li><li>-d, –deleted: 显示删除了的文件</li><li>-m, –modified: 显示修改了的文件</li><li>-i, –ignored: 显示忽略了的文件(满足忽略模式的)</li><li>-o, –others: 显示其他类型的文件(如未追踪的)</li><li>-s, –stage: 按照如下格式显示文件内容<pre><code>[&lt;tag\&gt;] &lt;mode\&gt; &lt;object\&gt; &lt;stage\&gt; &lt;file\&gt;</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-update-index命令</title>
      <link href="/2019/07/07/git/git-cmd-update-index/"/>
      <url>/2019/07/07/git/git-cmd-update-index/</url>
      
        <content type="html"><![CDATA[<p>通常该命令用于将工作区(working tree)中的内容注册到暂存区(index)</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>git update-index<br>         [–add] [–remove | –force-remove] [–replace]<br>         [–refresh] [-q] [–unmerged] [–ignore-missing]<br>         [(–cacheinfo &lt;mode>,&lt;object>,&lt;file>)…​]<br>         [–chmod=(+|-)x]<br>         [–[no-]assume-unchanged]<br>         [–[no-]skip-worktree]<br>         [–[no-]fsmonitor-valid]<br>         [–ignore-submodules]<br>         [–[no-]split-index]<br>         [–[no-|test-|force-]untracked-cache]<br>         [–[no-]fsmonitor]<br>         [–really-refresh] [–unresolve] [–again | -g]<br>         [–info-only] [–index-info]<br>         [-z] [–stdin] [–index-version &lt;n>]<br>         [–verbose]<br>         [–] [&lt;file>…​]</p><h2 id="命令参数选项"><a href="#命令参数选项" class="headerlink" title="命令参数选项"></a>命令参数选项</h2><ul><li>–add: 如果指定的文件不在暂存区(index)中，则将其加入暂存区。</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="增加工作区新文件到暂存区"><a href="#增加工作区新文件到暂存区" class="headerlink" title="增加工作区新文件到暂存区"></a>增加工作区新文件到暂存区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost git_update_index]# git init</span><br><span class="line">Initialized empty Git repository in /root/git_update_index/.git/</span><br><span class="line">[root@localhost git_update_index]# find .git/objects/ -type f</span><br><span class="line">[root@localhost git_update_index]# echo 'version 1' &gt; text.txt</span><br><span class="line">[root@localhost git_update_index]# git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        text.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line">[root@localhost git_update_index]# git update-index --add text.txt</span><br><span class="line">[root@localhost git_update_index]# git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use "git rm --cached &lt;file&gt;..." to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   text.txt</span><br><span class="line"></span><br><span class="line">[root@localhost git_update_index]# find .git/objects/ -type f</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line">[root@localhost git_update_index]# git cat-file -p 83baae6</span><br><span class="line">version 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-cat-file 命令</title>
      <link href="/2019/07/07/git/git-cmd-cat-file/"/>
      <url>/2019/07/07/git/git-cmd-cat-file/</url>
      
        <content type="html"><![CDATA[<p>该命令用于显示指定对象的信息</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cat-file (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | &lt;type&gt; | --textconv | --filters ) [--path=&lt;path&gt;] &lt;object&gt;</span><br><span class="line">git cat-file (--batch | --batch-check) [ --textconv | --filters ] [--follow-symlinks]</span><br></pre></td></tr></table></figure><h2 id="命令参数选项"><a href="#命令参数选项" class="headerlink" title="命令参数选项"></a>命令参数选项</h2><ul><li>-t: 显示对象类型</li><li>-s: 显示对象大小(bytes)</li><li>-e: 如果对象存在且是有效的，则命令正常返回0；如果对象无效，则命令返回非零值，并在标准错误输入打印错误信息</li><li>-p: 显示对象内容</li><li>–batch: 从标准输入读取对象id，显示对象信息(类型、大小)和对象内容</li><li>–batch-check: 从标准输入读取对象id，显示对象信息(类型、大小)</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitNewTest]# find .git/objects/ -type f</span><br><span class="line">.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -p 3b18e512</span><br><span class="line">hello world</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -s 3b18e512</span><br><span class="line">12</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -t 3b18e512</span><br><span class="line">blob</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -e 3b18e512</span><br><span class="line">[root@localhost gitNewTest]# echo $?</span><br><span class="line">0</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -e 3b18e513</span><br><span class="line">fatal: Not a valid object name 3b18e513</span><br><span class="line">[root@localhost gitNewTest]# echo $?</span><br><span class="line">128</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -t 3b18e513</span><br><span class="line">fatal: Not a valid object name 3b18e513</span><br><span class="line">[root@localhost gitNewTest]# echo $?</span><br><span class="line">128</span><br><span class="line">[root@localhost gitNewTest]# git cat-file --batch</span><br><span class="line">3b18e512</span><br><span class="line">3b18e512dba79e4c8300dd08aeb37f8e728b8dad blob 12</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">33333</span><br><span class="line">33333 missing</span><br><span class="line">^C</span><br><span class="line">[root@localhost gitNewTest]# git cat-file --batch-check</span><br><span class="line">3b18e512</span><br><span class="line">3b18e512dba79e4c8300dd08aeb37f8e728b8dad blob 12</span><br><span class="line">adces</span><br><span class="line">adces missing</span><br><span class="line">^C</span><br><span class="line">[root@localhost gitNewTest]#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-hash-object 命令</title>
      <link href="/2019/07/07/git/git-cmd-hash-object/"/>
      <url>/2019/07/07/git/git-cmd-hash-object/</url>
      
        <content type="html"><![CDATA[<p>该命令可以计算指定对象的object ID，并且通过指定参数(-w)将指定对象写入数据库中。该ID是个SHA-1哈希值，通过将待存储的数据内容(指定对象内容)加一个头部信息(header)一起做SHA-1校验运算得到的校验和。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git hash-object [-t &lt;type&gt;] [-w] [--path=&lt;file&gt;|--no-filters] [--stdin [--literally]] [--] &lt;file&gt;…​</span><br><span class="line">git hash-object [-t &lt;type&gt;] [-w] --stdin-paths [--no-filters]</span><br></pre></td></tr></table></figure><h2 id="命令参数选项"><a href="#命令参数选项" class="headerlink" title="命令参数选项"></a>命令参数选项</h2><ul><li>-t &lt;type>: 对象类型， 默认为数据对象blob object</li><li>-w: 设置该参数表示要将对象内容写入数据库</li><li>–stdin: 表示从标准输入读取对象内容</li><li>–stdin-paths: 表示从标准输入读取保存对象内容的文件名，每行表示一个文件</li><li>–: 标记后续参数类型，即 – 后面的参数会被解析为file</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitNewTest]# find .git/objects -type f</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从标准输入读取内容写入数据库</span></span><br><span class="line">[root@localhost gitNewTest]# echo "hello world" |git hash-object -w --stdin</span><br><span class="line">3b18e512dba79e4c8300dd08aeb37f8e728b8dad</span><br><span class="line">[root@localhost gitNewTest]# find .git/objects -type f</span><br><span class="line">.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad</span><br><span class="line">[root@localhost gitNewTest]# tree .git/objects/</span><br><span class="line">.git/objects/</span><br><span class="line">├── 3b                                          # SHA-1哈希值前两个字符做目录</span><br><span class="line">│   └── 18e512dba79e4c8300dd08aeb37f8e728b8dad  # SHA-1哈希值剩余38个字符做文件名</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br><span class="line"></span><br><span class="line">3 directories, 1 file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从文件中读取内容写入数据库</span></span><br><span class="line">[root@localhost gitNewTest]# echo 'version 1' &gt; text.txt</span><br><span class="line">[root@localhost gitNewTest]# cat text.txt</span><br><span class="line">version 1</span><br><span class="line">[root@localhost gitNewTest]# git hash-object -w text.txt</span><br><span class="line">83baae61804e65cc73a7201a7252750c76066a30</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>epel配置与使用</title>
      <link href="/2019/06/30/centos/epel/"/>
      <url>/2019/06/30/centos/epel/</url>
      
        <content type="html"><![CDATA[<p>为了保证稳定性，RHEL及其衍生版本Centos等的官方rpm repository中提供的软件版本都相对比较滞后。为了能使用相对较新的软件版本，可以使用EPEL扩展源。</p><p>EPEL(Extra Packages for Enterprise Linux)，是由Fedora社区维护的，为RHEL系列操作系统提供高质量软件包的项目。</p><h3 id="yum命令安装"><a href="#yum命令安装" class="headerlink" title="yum命令安装"></a>yum命令安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure><h3 id="rpm包安装"><a href="#rpm包安装" class="headerlink" title="rpm包安装"></a>rpm包安装</h3><p>根据系统CPU架构及操作系统版本，到 <a href="https://dl.fedoraproject.org/pub/epel/" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/</a> 下载对应的rpm进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">rpm -ivh epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum clean all; yum makecache</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum repolist</span></span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * epel: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">repo id                            repo name                              status</span><br><span class="line">base/7/x86_64            CentOS-7 - Base - mirrors.aliyun.com             10,019</span><br><span class="line">epel/x86_64              Extra Packages for Enterprise Linux 7 - x86_64   13,242</span><br><span class="line">extras/7/x86_64          CentOS-7 - Extras - mirrors.aliyun.com           419</span><br><span class="line">updates/7/x86_64         CentOS-7 - Updates - mirrors.aliyun.com          2,137</span><br><span class="line">repolist: 25,817</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> epel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git内部原理</title>
      <link href="/2019/06/30/git/git-internals/"/>
      <url>/2019/06/30/git/git-internals/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Git从根本上说是一个基于内容寻址(content-addressable)的文件系统，并在此之上提供一个VCS的用户界面。</p><p>最初git只是为VCS提供的一套工具集，而不是一个完成的VCS，所以git存在一系列命令能完成一些底层操作，这些命令被设计为能以Unix-style连接(chained)在一起，或者可以被脚本调用。这些命令被称为底层(plumbing)命令。相对应的那些更友好(user-friendly)的命令被称为高层(porcelain)命令。</p><p>通常情况下，不会在命令行中直接使用这些底层命令，它们更多被用于构建新的命令或用于自定义的脚本。</p><h2 id="git目录"><a href="#git目录" class="headerlink" title=".git目录"></a>.git目录</h2><p>在执行完<code>git init</code>命令后，会生成一个<code>.git</code>目录。该目录里面包含了几乎所有的git存储和操作的对象。如果你想备份或克隆一个你的repo，只需要将copy该目录即可。</p><p>一个已经有提交记录的.git目录内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .git]# tree -F .</span><br><span class="line">.</span><br><span class="line">├── branches/</span><br><span class="line">├── config                    # 包含所有特有(project-specific)的配置项</span><br><span class="line">├── description               # 该文件仅用于GitWeb程序，无需关注</span><br><span class="line">├── HEAD                      # imp</span><br><span class="line">├── hooks/                    # 保存服务端和客户端的git钩子脚本</span><br><span class="line">├── index                     # imp</span><br><span class="line">├── info/                     # 该目录下的exclude文件用于保存不希望配置在.gitignore文件中的忽略模式</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs/</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs/</span><br><span class="line">│       ├── heads/</span><br><span class="line">│       │   └── master</span><br><span class="line">│       └── remotes/</span><br><span class="line">│           └── origin/</span><br><span class="line">│               └── HEAD</span><br><span class="line">├── objects/                        # imp, 存储所有的数据内容，包括所有文件的历史版本和commit信息</span><br><span class="line">│   ├── info/</span><br><span class="line">│   └── pack/</span><br><span class="line">│       ├── pack-de504965c4952729b475b8075c814b171ef83bf8.idx</span><br><span class="line">│       └── pack-de504965c4952729b475b8075c814b171ef83bf8.pack</span><br><span class="line">├── packed-refs</span><br><span class="line">└── refs/                           # imp</span><br><span class="line">    ├── heads/</span><br><span class="line">    │   └── master</span><br><span class="line">    ├── remotes/</span><br><span class="line">    │   └── origin/</span><br><span class="line">    │       └── HEAD</span><br><span class="line">    └── tags/</span><br><span class="line"></span><br><span class="line">16 directories, 24 files</span><br></pre></td></tr></table></figure><p>文件HEAD、index和目录objects、refs是git系统的核心组成部分。</p><p>git初始化时的.git目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .git]# tree -F .</span><br><span class="line">.</span><br><span class="line">├── branches/</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── HEAD</span><br><span class="line">├── hooks/</span><br><span class="line">├── info/</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects/</span><br><span class="line">│   ├── info/</span><br><span class="line">│   └── pack/</span><br><span class="line">└── refs/</span><br><span class="line">    ├── heads/</span><br><span class="line">    └── tags/</span><br></pre></td></tr></table></figure><h2 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h2><h3 id="数据对象-blob-object"><a href="#数据对象-blob-object" class="headerlink" title="数据对象(blob object)"></a>数据对象(blob object)</h3><p>通过 <code>git hash-object</code> 将文件内容写入数据库，生成的就是数据对象，可以通过 <code>git cat-file -t</code> 查看对象类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个新文件，将文件内容写入数据库</span></span><br><span class="line">[root@localhost gitNewTest]# echo 'version 1' &gt; text.txt</span><br><span class="line">[root@localhost gitNewTest]# cat text.txt</span><br><span class="line">version 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件内容写入数据库，生成一个数据对象</span></span><br><span class="line">[root@localhost gitNewTest]# git hash-object -w text.txt</span><br><span class="line">83baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line">[root@localhost gitNewTest]# find .git/objects -type f</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件内容，将修改后的文件再次写入数据库，又会生成一个数据对象</span></span><br><span class="line">[root@localhost gitNewTest]# echo 'version 2' &gt; text.txt</span><br><span class="line">[root@localhost gitNewTest]# git hash-object -w text.txt</span><br><span class="line">1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">[root@localhost gitNewTest]# find .git/objects -type f</span><br><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span><br><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span><br><span class="line">[root@localhost gitNewTest]# cat text.txt</span><br><span class="line">version 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将第一个版本的内容从数据库中读出再次写回文件</span></span><br><span class="line">[root@localhost gitNewTest]# git cat-file -p 83baae6 &gt; text.txt</span><br><span class="line">[root@localhost gitNewTest]# cat text.txt</span><br><span class="line">version 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看对象内容均为数据对象</span></span><br><span class="line">[root@localhost gitNewTest]# git cat-file -t 83baae6</span><br><span class="line">blob</span><br><span class="line">[root@localhost gitNewTest]# git cat-file -t 1f7a7a4</span><br><span class="line">blob</span><br></pre></td></tr></table></figure><p>使用上述方式，只能保存文件内容，不能保存文件名称。可以使用下面的树对象实现文件名保存。</p><h3 id="树对象-tree-object"><a href="#树对象-tree-object" class="headerlink" title="树对象(tree object)"></a>树对象(tree object)</h3><p>git以一种类似Unix文件系统的方式存储内容。所有内容均以树对象和数据对象的形式存储，树对象对应了Unix中的目录项，数据对象大致对应了inodes或文件内容。</p><p>一个树对象包含了一条或多条树对象记录(tree entry)，每条记录对应一个指向数据对象或子树对象的SHA-1指针，以及对应的模式、类型、文件名信息。</p><h3 id="提交对象-commit-object"><a href="#提交对象-commit-object" class="headerlink" title="提交对象(commit object)"></a>提交对象(commit object)</h3><h3 id="标签对象-tag-object"><a href="#标签对象-tag-object" class="headerlink" title="标签对象(tag object)"></a>标签对象(tag object)</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">ProGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-diff命令</title>
      <link href="/2019/06/29/git/git-cmd-diff/"/>
      <url>/2019/06/29/git/git-cmd-diff/</url>
      
        <content type="html"><![CDATA[<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git diff [&lt;options&gt;] [--] [&lt;path&gt;..]           # 默认表示比较工作区与暂存区</span><br><span class="line">git diff [&lt;options&gt;] HEAD [--] [&lt;path&gt;..]      # 表示比较工作区与本地版本库最新版本</span><br><span class="line">git diff [&lt;options&gt;] commitid [--] [&lt;path&gt;..]  # 表示比较工作区与指定commit id版本</span><br><span class="line"></span><br><span class="line">git diff [&lt;options&gt;] --cached [--] [&lt;path&gt;..]           # 表示比较暂存区与本地库最新版本</span><br><span class="line">git diff [&lt;options&gt;] --cached commitid [--] [&lt;path&gt;..]  # 表示比较暂存区与指定commit id版本</span><br><span class="line"></span><br><span class="line">git diff [&lt;options&gt;] commitid commitid [--] [&lt;path&gt;..]  # 表示比较两次commitid之间的差异</span><br></pre></td></tr></table></figure><h3 id="命令参数选项"><a href="#命令参数选项" class="headerlink" title="命令参数选项"></a>命令参数选项</h3><ul><li><p>–raw: 显示原始的差异格式，如下:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git diff --cached --raw</span><br><span class="line">:000000 100644 0000000 31d115c A        addfile</span><br><span class="line">:100644 100644 389cecf 1f09c93 M        newfile2</span><br></pre></td></tr></table></figure></li><li><p>–stat: 显示差异统计结果，如下：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git diff --cached --stat</span><br><span class="line">addfile  | 5 +++++</span><br><span class="line">newfile2 | 3 +--</span><br><span class="line">2 files changed, 6 insertions(+), 2 deletions(-)</span><br></pre></td></tr></table></figure></li><li><p>–shortstat: 只显示<code>--stat</code>的最后一行内容</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git diff --cached --shortstat</span><br><span class="line">2 files changed, 6 insertions(+), 2 deletions(-)</span><br></pre></td></tr></table></figure></li><li><p>–numstat: 只显示增加和删除的行数统计</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git diff --cached --numstat</span><br><span class="line">5       0       addfile</span><br><span class="line">1       2       newfile2</span><br></pre></td></tr></table></figure></li><li><p>–name-only: 只显示哪些文件有差异</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitTest]# git diff --cached --name-only</span><br><span class="line">addfile</span><br><span class="line">newfile2</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用git-diff打补丁"><a href="#使用git-diff打补丁" class="headerlink" title="使用git diff打补丁"></a>使用git diff打补丁</h3><p>将工作区与本地仓库的差异做成补丁<br>git diff &gt; patch_name</p><p>检验补丁是否能使用，如果没有任何输出表示可以顺利接受该补丁<br>git apply –check patch_name</p><p>在另外一个地方应用补丁<br>git apply patch_name</p><h3 id="命令回显说明"><a href="#命令回显说明" class="headerlink" title="命令回显说明"></a>命令回显说明</h3><p>git diff命令的回显采用的时GNU <code>diff</code>命令<code>合并格式</code>的变体</p><p>linux下通过<code>diff -u file_a file_b</code>来显示<code>diff</code>的<code>合并格式</code></p><h4 id="内容增删"><a href="#内容增删" class="headerlink" title="内容增删"></a>内容增删</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; git diff HEAD~1 HEAD</span><br><span class="line"></span><br><span class="line">diff --git a/README.md b/README.md  # 表示显示内容为git格式的diff</span><br><span class="line">index ae50fdb..54e2aab 100644       # ae50fab..54e2aab表示两个版本对象的哈希值</span><br><span class="line">                                    # 100644表示对象的模式(普通文件， 644权限)</span><br><span class="line">--- a/README.md         # --- 表示变动前的版本</span><br><span class="line">+++ b/README.md         # +++ 表示变动后的版本</span><br><span class="line">@@ -5,6 +5,7 @@         # 该行表示变动的位置，由两个@表示开头和结尾</span><br><span class="line">                        # - 表示 文件a/README.md， + 表示文件b/README.md</span><br><span class="line">                        # 5,6 表示下方显示内容为a/README.md的第5行开始，连续6行</span><br><span class="line">                        # 5,7 表示下方显示内容为b/README.md的第5行开始，连续7行</span><br><span class="line"> b</span><br><span class="line"> c</span><br><span class="line"> d</span><br><span class="line">+new line</span><br><span class="line"> e</span><br><span class="line"> f</span><br><span class="line"> g</span><br><span class="line">diff --git a/newfile b/newfile</span><br><span class="line">index fd54aa0..2d3a259 100644</span><br><span class="line">--- a/newfile</span><br><span class="line">+++ b/newfile</span><br><span class="line">@@ -1,5 +1,7 @@</span><br><span class="line"> add new file</span><br><span class="line"> 1</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line">+</span><br><span class="line">+ds</span><br><span class="line">+honda</span><br><span class="line">+toyta</span><br></pre></td></tr></table></figure><h4 id="新增文件"><a href="#新增文件" class="headerlink" title="新增文件"></a>新增文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/newfile3 b/newfile3</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d4afdcc</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/newfile3</span><br><span class="line">@@ -0,0 +1,5 @@</span><br><span class="line">+add new file3</span><br><span class="line">+</span><br><span class="line">+new file</span><br><span class="line">+</span><br><span class="line">+new file end</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/newfile b/newfile</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 2d3a259..0000000</span><br><span class="line">--- a/newfile</span><br><span class="line">+++ /dev/null</span><br><span class="line">@@ -1,7 +0,0 @@</span><br><span class="line">-add new file</span><br><span class="line">-1</span><br><span class="line">-</span><br><span class="line">-ds</span><br><span class="line">-honda</span><br><span class="line">-toyta</span><br><span class="line">-</span><br></pre></td></tr></table></figure><h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/deletefile b/newfile2</span><br><span class="line">similarity index 89%</span><br><span class="line">rename from deletefile</span><br><span class="line">rename to newfile2</span><br><span class="line">index 08cb754..389cecf 100644</span><br><span class="line">--- a/deletefile</span><br><span class="line">+++ b/newfile2</span><br><span class="line">@@ -1,8 +1,6 @@</span><br><span class="line"> file tobe rename</span><br><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line">-3</span><br><span class="line">-4</span><br><span class="line"> 5</span><br><span class="line"> 6</span><br><span class="line"> 7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> diff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用总结</title>
      <link href="/2019/06/29/git/git-usage/"/>
      <url>/2019/06/29/git/git-usage/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/git/git" target="_blank" rel="noopener">github</a><br><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">ProGit</a></p><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><ul><li>VCS: Version Control System 版本控制系统</li><li>DVCS: Distributed Version Control System 分布式版本控制系统</li><li>CVCS: Centralized Version Control System 中心式版本控制系统</li></ul><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc xmlto docbook2x</span><br><span class="line"></span><br><span class="line">atp-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev asciidoc xmlto docbook2x</span><br></pre></td></tr></table></figure><p>编码编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/git/git/archive/v2.22.0.tar.gz</span><br><span class="line">tar xvf v2.22.0.tar.gz</span><br><span class="line">cd git-2.22.0</span><br><span class="line">make configure</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make all doc info</span><br><span class="line">make install install-doc install-html install-info</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="多平台的换行问题"><a href="#多平台的换行问题" class="headerlink" title="多平台的换行问题"></a><a href="/2019/11/17/git/git-crlf">多平台的换行问题</a></h3><h3 id="git调试方法"><a href="#git调试方法" class="headerlink" title="git调试方法"></a>git调试方法</h3><p>在执行git命令前可以通过设置环境变量<code>GIT_TRACE=1</code>和<code>GIT_CURL_VERBOSE=1</code>来增加命令执行的调试信息</p><h2 id="Git内部原理"><a href="#Git内部原理" class="headerlink" title="Git内部原理"></a><a href="/2019/06/30/git/git-internals">Git内部原理</a></h2><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="高层命令"><a href="#高层命令" class="headerlink" title="高层命令"></a>高层命令</h3><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><a href="/2019/06/29/git/git-cmd-diff">git diff</a></h4><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><a href="/2019/07/16/git/git-cmd-commit">git commit</a></h4><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><a href="/2019/07/22/git/git-cmd-log">git log</a></h4><h3 id="底层命令"><a href="#底层命令" class="headerlink" title="底层命令"></a>底层命令</h3><p>git最核心部分是一个key-value的数据库。</p><h4 id="hash-object命令"><a href="#hash-object命令" class="headerlink" title="hash-object命令"></a><a href="/2019/07/07/git/git-cmd-hash-object">hash-object命令</a></h4><h4 id="cat-object命令"><a href="#cat-object命令" class="headerlink" title="cat-object命令"></a><a href="/2019/07/07/git/git-cmd-cat-file">cat-object命令</a></h4><h4 id="update-index命令"><a href="#update-index命令" class="headerlink" title="update-index命令"></a><a href="/2019/07/07/git/git-cmd-update-index">update-index命令</a></h4><h4 id="ls-files命令"><a href="#ls-files命令" class="headerlink" title="ls-files命令"></a><a href="/2019/07/08/git/git-cmd-ls-files">ls-files命令</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy闭包</title>
      <link href="/2019/06/13/groovy/groovy-closure/"/>
      <url>/2019/06/13/groovy/groovy-closure/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h2><p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p><p>彼得·兰丁在1964年将术语“闭包”定义为一种包含环境成分和控制成分的实体。用来指代某些其开放绑定（自由变量）已经由其语法环境完成闭合（或者绑定）的lambda表达式，从而形成了闭合的表达式，或称闭包。</p><p>闭包只是在形式和表现上像函数，但实际上不是函数。函数是一些可执行的代码，这些代码在函数被定义后就确定了，不会在执行时发生变化，所以一个函数只有一个实例。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。所谓引用环境是指在程序执行中的某个点所有处于活跃状态的约束所组成的集合。其中的约束是指一个变量的名字和其所代表的对象之间的联系。</p><p>在函数定义时捕获当时的引用环境，并与函数代码组合成一个整体。当把这个整体当作函数调用时，先把其中的引用环境覆盖到当前的引用环境上，然后执行具体代码，并在调用结束后恢复原来的引用环境。这样就保证了函数定义和执行时的引用环境是相同的。这种由引用环境与函数代码组成的实体就是闭包。</p><p>自由变量是指除局部变量以外的变量。</p><h2 id="Groovy闭包定义"><a href="#Groovy闭包定义" class="headerlink" title="Groovy闭包定义"></a>Groovy闭包定义</h2><p>Groovy中的闭包是一个开放的、匿名代码块，它可以接收参数，定义返回值，也可以将闭包复制给变量，闭包还可以引用定义在其周围范围(in its surrounding scope)中的变量。与闭包的正式定义相反，Groovy语言中的闭包还可以包含定义在其周围范围之外(outside of its surrounding scope)的自由变量。</p><h2 id="Groovy闭包语法"><a href="#Groovy闭包语法" class="headerlink" title="Groovy闭包语法"></a>Groovy闭包语法</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123; [closureParameters -&gt;] statements&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// examples</span></span><br><span class="line">&#123; item++ &#125; <span class="comment">// 引用变量item</span></span><br><span class="line"><span class="comment">// 默认参数it</span></span><br><span class="line"><span class="comment">// 如果闭包执行时未指定参数，则it为null，类型class org.codehaus.groovy.runtime.NullObject</span></span><br><span class="line">&#123; println it&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示指定参数</span></span><br><span class="line">&#123;name -&gt; println name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定多个具有类型的参数</span></span><br><span class="line"><span class="keyword">def</span> body = &#123;String name, <span class="keyword">int</span> age -&gt; println <span class="string">"name: $&#123;name&#125;, age:$&#123;age&#125;"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包是groovy.lang.Closure类型的实例</span></span><br><span class="line"><span class="keyword">assert</span> body <span class="keyword">instanceof</span> Closure</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数可以指定默认值</span></span><br><span class="line"><span class="keyword">def</span> sum = &#123; <span class="keyword">int</span> a, <span class="keyword">int</span> b=<span class="number">2</span> -&gt; a+b &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以指定闭包的返回值类型</span></span><br><span class="line">Closure&lt;Boolean&gt; isTextFile = &#123; File it -&gt;</span><br><span class="line">  it.name.endsWith(<span class="string">'.txt'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要明确指定闭包不包含参数，需要显示的指定空参数列表</span></span><br><span class="line"><span class="keyword">def</span> magicNumber = &#123; -&gt; <span class="number">42</span> &#125;</span><br><span class="line"><span class="comment">// this call will fail because the closure doesn't accept any argument</span></span><br><span class="line">magicNumber(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包的可以指定最后一个参数的长度是可变的或定义为数组</span></span><br><span class="line"><span class="keyword">def</span> concat1 = &#123;String... args -&gt; args.join(<span class="string">''</span>)&#125;</span><br><span class="line"><span class="keyword">assert</span> concat1(<span class="string">'abc'</span>, <span class="string">'def'</span>) == <span class="string">'abcdef'</span></span><br><span class="line"><span class="keyword">def</span> concat2 = &#123;String[] args -&gt; args.join(<span class="string">''</span>)&#125;</span><br><span class="line"><span class="keyword">assert</span> concat2(<span class="string">'aaa'</span>, <span class="string">'bbb'</span>) == <span class="string">'aaabbb'</span></span><br><span class="line"><span class="comment">//闭包的执行也可以使用call()</span></span><br><span class="line"><span class="keyword">def</span> multiConcat = &#123;<span class="keyword">int</span> n, String... args -&gt; args.join(<span class="string">''</span>)*n&#125;</span><br><span class="line"><span class="keyword">assert</span> multiConcat.call(<span class="number">3</span>, <span class="string">'ab'</span>, <span class="string">'cd'</span>) == <span class="string">'abcdabcdabcd'</span></span><br></pre></td></tr></table></figure><p>closureParameters是可选的逗号分隔的参数列表，参数可以指定类型(typed)也可不指定类型(untyped)。如果指定了参数，参数后面必须有 <code>-&gt;</code>，用于分割参数和闭包内语句。</p><p>闭包执行时，总是会有返回值。</p><h2 id="Groovy闭包委托策略-Delegation-strategy"><a href="#Groovy闭包委托策略-Delegation-strategy" class="headerlink" title="Groovy闭包委托策略(Delegation strategy)"></a>Groovy闭包委托策略(Delegation strategy)</h2><p>委托(Delegation)是Groovy闭包中的一个关键特性(key concept)，闭包委托策略的可修改使得在Groovy中设计漂亮的领域特定语言(dsl, domain specific language)成为可能。</p><h3 id="this、owner、delegate"><a href="#this、owner、delegate" class="headerlink" title="this、owner、delegate"></a>this、owner、delegate</h3><p>闭包内有三个内置对象:</p><ul><li>this      对应于定义闭包的封闭类(the enclosing class where the closure is defined),可以在闭包内通过getThisObject()获取</li><li>owner     对应于定义闭包的封闭对象(the enclosing object where the closure is defined)，可以是类也可以是闭包，可以在闭包内通过getOwner()获取</li><li>delegate  对应于一个第三方对象(where methods calls or properties are resolved whenever the receiver of the message is not defined)，可以在闭包内通过(getDelegate())获取</li></ul><blockquote><p>通过这三个内置对象，闭包可以调用对应对象的属性和方法。</p></blockquote><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h5 id="对应于定义闭包的封闭类"><a href="#对应于定义闭包的封闭类" class="headerlink" title="对应于定义闭包的封闭类"></a>对应于定义闭包的封闭类</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在TestThis类中定义闭包body，并返回闭包的this对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThis</span>&#123;</span></span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="keyword">def</span> body = &#123;getThisObject()&#125;</span><br><span class="line">    <span class="comment">// 调用闭包会返回TestThis类的实例</span></span><br><span class="line">    <span class="keyword">assert</span> body() == <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 在闭包中直接使用this对象与调用getThisObject等价</span></span><br><span class="line">    <span class="keyword">def</span> body2 = &#123; <span class="keyword">this</span> &#125;</span><br><span class="line">    <span class="keyword">assert</span> body2 == <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">def</span> body = &#123; <span class="keyword">this</span> &#125;</span><br><span class="line">        println body() == <span class="keyword">this</span>  <span class="comment">// true</span></span><br><span class="line">        println <span class="keyword">this</span>  <span class="comment">// class ClosureTest</span></span><br><span class="line">        println(<span class="keyword">this</span>.getClass().toString())   <span class="comment">// class java.lang.Class</span></span><br><span class="line">        println(body.getClass().toString())   <span class="comment">// class ClosureTest$_main_closure1</span></span><br><span class="line">        println body <span class="keyword">instanceof</span> Closure   <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="如果闭包在内部类中定义，那么闭包中的-this-对象返回的是内部类的实例对象"><a href="#如果闭包在内部类中定义，那么闭包中的-this-对象返回的是内部类的实例对象" class="headerlink" title="如果闭包在内部类中定义，那么闭包中的 this 对象返回的是内部类的实例对象"></a>如果闭包在内部类中定义，那么闭包中的 <code>this</code> 对象返回的是内部类的实例对象</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> &#123;</span></span><br><span class="line">        <span class="keyword">def</span> body = &#123; <span class="keyword">this</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> run()&#123;</span><br><span class="line">        InnerClass inner = <span class="keyword">new</span> InnerClass()</span><br><span class="line">        println inner == inner.body()   <span class="comment">// true</span></span><br><span class="line">        println <span class="keyword">this</span> == inner.body()    <span class="comment">// false</span></span><br><span class="line">        println <span class="keyword">this</span>.getClass().toString()        <span class="comment">// class ClosureTest</span></span><br><span class="line">        println inner.getClass().toString()       <span class="comment">// class ClosureTest$InnerClass</span></span><br><span class="line">        println inner.body.getClass().toString()  <span class="comment">// class ClosureTest$InnerClass$_closure1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="如果闭包A嵌入在类的某个闭包B中时，闭包A中的-this-表示的仍然是类的实例对象"><a href="#如果闭包A嵌入在类的某个闭包B中时，闭包A中的-this-表示的仍然是类的实例对象" class="headerlink" title="如果闭包A嵌入在类的某个闭包B中时，闭包A中的 this 表示的仍然是类的实例对象"></a>如果闭包A嵌入在类的某个闭包B中时，闭包A中的 <code>this</code> 表示的仍然是类的实例对象</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> run()&#123;</span><br><span class="line">        <span class="keyword">def</span> body_b = &#123;</span><br><span class="line">            <span class="keyword">def</span> body_a = &#123; <span class="keyword">this</span> &#125;</span><br><span class="line">            body_a()</span><br><span class="line">        &#125;</span><br><span class="line">        println body_b()                    <span class="comment">// ClosureTest@25748410</span></span><br><span class="line">        println <span class="keyword">this</span>                        <span class="comment">// ClosureTest@25748410</span></span><br><span class="line">        println body_b() == <span class="keyword">this</span>            <span class="comment">// true</span></span><br><span class="line">        println <span class="keyword">this</span>.getClass().toString()  <span class="comment">// class ClosureTest</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="owner"><a href="#owner" class="headerlink" title="owner"></a>owner</h4><p>返回闭包定义所在的封闭对象，可以是类也可以是闭包。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> run()&#123;</span><br><span class="line">        <span class="keyword">def</span> body_b = &#123; owner &#125;</span><br><span class="line">        println body_b()    <span class="comment">// ClosureTest@55b5f5d2</span></span><br><span class="line">        println body_b      <span class="comment">// ClosureTest$_run_closure1@5bfa8cc5</span></span><br><span class="line">        println <span class="keyword">this</span>        <span class="comment">// ClosureTest@55b5f5d2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> &#123;</span></span><br><span class="line">        <span class="keyword">def</span> body = &#123; owner &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> inner = <span class="keyword">new</span> InnerClass()</span><br><span class="line">        println inner         <span class="comment">// ClosureTest$InnerClass@553f1d75</span></span><br><span class="line">        println inner.body()  <span class="comment">// ClosureTest$InnerClass@553f1d75</span></span><br><span class="line">        println <span class="keyword">this</span>          <span class="comment">// ClosureTest@47404bea</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套闭包</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> run()&#123;</span><br><span class="line">        <span class="keyword">def</span> body_b = &#123;</span><br><span class="line">            <span class="keyword">def</span> body_a = &#123; owner &#125;</span><br><span class="line">            println body_a      <span class="comment">// ClosureTest$_run_closure1$_closure2@5bfa8cc5</span></span><br><span class="line">            println body_a()    <span class="comment">// ClosureTest$_run_closure1@16ecee1</span></span><br><span class="line">            body_a()</span><br><span class="line">        &#125;</span><br><span class="line">        println body_b()        <span class="comment">// ClosureTest$_run_closure1@16ecee1</span></span><br><span class="line">        println body_b          <span class="comment">// ClosureTest$_run_closure1@16ecee1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h4><p>委托是Groovy语言能够构建DSL的关键特性(It is a powerful concept for building domain specific languages in groovy)。<code>delegate</code>是一个用户自定义的对象。</p><h5 id="默认情况下，-delegate-等同于-owner"><a href="#默认情况下，-delegate-等同于-owner" class="headerlink" title="默认情况下， delegate 等同于 owner"></a>默认情况下， <code>delegate</code> 等同于 <code>owner</code></h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> &#123;</span></span><br><span class="line">        <span class="keyword">def</span> body = &#123; delegate &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> inner = <span class="keyword">new</span> InnerClass()</span><br><span class="line">        println inner           <span class="comment">// ClosureTest$InnerClass@4f071df8</span></span><br><span class="line">        println inner.body()    <span class="comment">// ClosureTest$InnerClass@4f071df8</span></span><br><span class="line">        println <span class="keyword">this</span>            <span class="comment">// ClosureTest@29e6eb25</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> body_b = &#123;</span><br><span class="line">            <span class="keyword">def</span> body_a = &#123; delegate &#125;</span><br><span class="line">            body_a()</span><br><span class="line">        &#125;</span><br><span class="line">        println body_b()      <span class="comment">// ClosureTest$_run$_closure1@38be305c</span></span><br><span class="line">        println body_b        <span class="comment">// ClosureTest$_run$_closure1@38be305c</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> body_c = &#123; delegate &#125;</span><br><span class="line">        println body_c()      <span class="comment">// ClosureTest@29e6eb25</span></span><br><span class="line">        println body_c        <span class="comment">// ClosureTest$_run$_closure2@5ed731d0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="闭包中的delegate属性可以被修改为任何对象"><a href="#闭包中的delegate属性可以被修改为任何对象" class="headerlink" title="闭包中的delegate属性可以被修改为任何对象"></a>闭包中的<code>delegate</code>属性可以被修改为任何对象</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> p = <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">'john'</span>)</span><br><span class="line">        <span class="keyword">def</span> a = <span class="keyword">new</span> Animal(<span class="string">name:</span> <span class="string">'panda'</span>)</span><br><span class="line">        <span class="keyword">def</span> nameToUpper = &#123; delegate.name.toUpperCase() &#125;</span><br><span class="line">        nameToUpper.delegate = p</span><br><span class="line">        println nameToUpper()     <span class="comment">// JOHN</span></span><br><span class="line">        nameToUpper.delegate = a</span><br><span class="line">        println nameToUpper()     <span class="comment">// PANDA</span></span><br><span class="line">        println p.name    <span class="comment">// john</span></span><br><span class="line">        println a.name    <span class="comment">// panda</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// nameToUpper_use_var引用外部的局部变量p，能够达成和前面使用delegate一样的效果</span></span><br><span class="line">        <span class="comment">// 但是委托可以透明的使用，即在闭包中不再显式的采用 delegate. 前缀引用属性或方法，详情见下节委托策略</span></span><br><span class="line">        <span class="keyword">def</span> nameToUpper_use_var = &#123; p.name.toUpperCase() &#125;</span><br><span class="line">        println nameToUpper_use_var() <span class="comment">// JOHN</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包委托策略"><a href="#闭包委托策略" class="headerlink" title="闭包委托策略"></a>闭包委托策略</h3><p>在闭包中，如果访问闭包内部未定义的属性或方法时，会涉及到委托策略，委托策略分为下面几种:</p><ul><li>Closure.OWNER_FIRST: 默认策略。优先在<code>owner</code>中查找，如果没有找到则在<code>delegate</code>中查找</li><li>Closure.DELEGATE_FIRST: 优先在<code>delegate</code>中查找, 如果没有找到则在<code>owner</code>中查找</li><li>Closure.OWNER_ONLY: 忽略<code>delegate</code>，只在<code>owner</code>中查找</li><li>Closure.DELEGATE_ONLY: 忽略<code>owner</code>, 只在<code>delegate</code>中查找</li><li>Closure.TO_SELF: 只有在实现自己的闭包子类时才有意义。在需要高级元编程(meta-programming)技术，希望实现自定义的解析策略: 属性或方法的解析既不使用<code>owner</code>也不使用<code>delegate</code>，only on the closure class itself.</li></ul><h4 id="DELEGATE-FIRST-与-OWNER-FIRST"><a href="#DELEGATE-FIRST-与-OWNER-FIRST" class="headerlink" title="DELEGATE_FIRST 与 OWNER_FIRST"></a>DELEGATE_FIRST 与 OWNER_FIRST</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">        <span class="keyword">def</span> output = &#123; <span class="string">"My name is $&#123;name&#125;"</span> &#125;</span><br><span class="line">        String outputstring() &#123;</span><br><span class="line">            output()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> p = <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">'john'</span>)</span><br><span class="line">        <span class="keyword">def</span> a = <span class="keyword">new</span> Animal(<span class="string">name:</span> <span class="string">'panda'</span>)</span><br><span class="line">        println p.output.owner          <span class="comment">// ClosureTest$Person@3234f74a</span></span><br><span class="line">        println p.output.delegate       <span class="comment">// ClosureTest$Person@3234f74a</span></span><br><span class="line">        <span class="comment">// 默认委托策略为owner_first所以从p中查找name属性</span></span><br><span class="line">        println p.outputstring()        <span class="comment">// My name is john</span></span><br><span class="line">        p.output.delegate = a</span><br><span class="line">        println p.output.owner          <span class="comment">// ClosureTest$Person@3234f74a</span></span><br><span class="line">        println p.output.delegate       <span class="comment">// ClosureTest$Animal@65aa6596</span></span><br><span class="line">        <span class="comment">// 只修改了delegate属性，但策略没变，仍然从p中查找name属性</span></span><br><span class="line">        println p.outputstring()        <span class="comment">// My name is john</span></span><br><span class="line">        <span class="comment">// 修改委托策略为delegate_first</span></span><br><span class="line">        p.output.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">        <span class="comment">// 从a中查找name属性</span></span><br><span class="line">        println p.outputstring()        <span class="comment">// My name is panda</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DELEGATE-FIRST-与-DELEGATE-OWNER"><a href="#DELEGATE-FIRST-与-DELEGATE-OWNER" class="headerlink" title="DELEGATE_FIRST 与 DELEGATE_OWNER"></a>DELEGATE_FIRST 与 DELEGATE_OWNER</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">        <span class="keyword">int</span> age</span><br><span class="line">        <span class="keyword">def</span> output = &#123; <span class="string">"$&#123;name&#125; age is $&#123;age&#125;"</span> &#125;</span><br><span class="line">        String outputstring() &#123;</span><br><span class="line">            output()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> p = <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">'john'</span>, <span class="string">age:</span> <span class="number">18</span>)</span><br><span class="line">        <span class="keyword">def</span> a = <span class="keyword">new</span> Animal(<span class="string">name:</span> <span class="string">'panda'</span>)</span><br><span class="line">        println p.outputstring()    <span class="comment">// john age is 18</span></span><br><span class="line">        p.output.delegate = a</span><br><span class="line">        println p.outputstring()    <span class="comment">// john age is 18</span></span><br><span class="line">        p.output.resolveStrategy = Closure.DELEGATE_ONLY</span><br><span class="line">        p.output.delegate = p</span><br><span class="line">        println p.outputstring()    <span class="comment">// john age is 18</span></span><br><span class="line">        p.output.delegate = a</span><br><span class="line">        <span class="comment">// exception:</span></span><br><span class="line">        <span class="comment">// groovy.lang.MissingPropertyException: No such property: age for class: ClosureTest</span></span><br><span class="line">        println p.outputstring()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="闭包委托策略具有传递性"><a href="#闭包委托策略具有传递性" class="headerlink" title="闭包委托策略具有传递性"></a>闭包委托策略具有传递性</h4><p>闭包A内嵌与闭包B时，如果闭包A中的某个属性在闭包B中没有解析到会继续向闭包B的<code>owner</code>或<code>delegate</code>中查找。具体是向闭包的B的<code>owner</code>还是<code>delegate</code>中查找，由闭包B的委托策略决定</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">        <span class="keyword">int</span> age</span><br><span class="line">        <span class="keyword">def</span> outerClosure = &#123;</span><br><span class="line">            <span class="comment">// outerClosure为innerClosure的owner</span></span><br><span class="line">            <span class="keyword">def</span> name = <span class="string">"outer_$&#123;name&#125;"</span></span><br><span class="line">            <span class="keyword">def</span> innerClosure = &#123;</span><br><span class="line">                <span class="comment">// innerClosure闭包中的name和age属性都不在闭包内定义</span></span><br><span class="line">                <span class="comment">// 默认从innerClosure.owner中查找</span></span><br><span class="line">                <span class="comment">// outerClousre.name</span></span><br><span class="line">                <span class="comment">// p.age</span></span><br><span class="line">                <span class="string">"$&#123;name&#125;'s age is $&#123;age&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">            println innerClosure.owner       <span class="comment">// ClosureTest$Person$_closure1@26a4842b</span></span><br><span class="line">            println innerClosure.delegate == innerClosure.owner <span class="comment">// ture</span></span><br><span class="line">            innerClosure()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> p = <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">'john'</span>, <span class="string">age:</span> <span class="number">18</span>)</span><br><span class="line">        println p                               <span class="comment">// ClosureTest$Person@5ed731d0</span></span><br><span class="line">        <span class="comment">// p.outerClosure的owner为 p</span></span><br><span class="line">        println p.outerClosure                  <span class="comment">// ClosureTest$Person$_closure1@26a4842b</span></span><br><span class="line">        println p.outerClosure.delegate == p    <span class="comment">// true</span></span><br><span class="line">        println p.outerClosure.owner == p       <span class="comment">// true</span></span><br><span class="line">        println p.outerClosure()                <span class="comment">// outer_john's age is 18</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosureTest</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">        String name</span><br><span class="line">        <span class="keyword">int</span> age</span><br><span class="line">        <span class="keyword">def</span> outerClosure = &#123;</span><br><span class="line">            <span class="keyword">def</span> name = <span class="string">"outer_$&#123;name&#125;"</span></span><br><span class="line">            <span class="keyword">def</span> innerClosure = &#123;</span><br><span class="line">                <span class="string">"$&#123;name&#125;'s age is $&#123;age&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">            innerClosure()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">def</span> p = <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">'john'</span>, <span class="string">age:</span> <span class="number">18</span>)</span><br><span class="line">        <span class="keyword">def</span> p2 = <span class="keyword">new</span> Person(<span class="string">name:</span> <span class="string">'jessica'</span>, <span class="string">age:</span> <span class="number">3</span>)</span><br><span class="line">        println p.outerClosure()        <span class="comment">// outer_john's age is 18</span></span><br><span class="line">        p.outerClosure.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">        p.outerClosure.delegate = p2</span><br><span class="line">        println p.outerClosure()        <span class="comment">// outer_jessica's age is 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String... args) &#123;</span><br><span class="line">        <span class="keyword">new</span> ClosureTest().run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包策略在Jenkins-pipeline中的典型应用"><a href="#闭包策略在Jenkins-pipeline中的典型应用" class="headerlink" title="闭包策略在Jenkins pipeline中的典型应用"></a>闭包策略在Jenkins pipeline中的典型应用</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vars/abc.groovy</span></span><br><span class="line"><span class="keyword">def</span> call(body) &#123;</span><br><span class="line">    <span class="keyword">def</span> config = [:]</span><br><span class="line">    <span class="comment">// 修改body闭包的委托策略和delegate属性</span></span><br><span class="line">    body.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">    body.delegate = config</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 闭包执行时，闭包中读取未定义的属性时都会从config中获取</span></span><br><span class="line">    <span class="comment">// 闭包中设置未定义的属性时都也会设置到config中</span></span><br><span class="line">    body()</span><br><span class="line">    <span class="comment">// 后续就可以通过config.branch访问Jenkinsfile中定义并传给abc.groovy的值</span></span><br><span class="line">    println config  <span class="comment">// [branch: 'master']</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jenkinsfile</span></span><br><span class="line">abc &#123;</span><br><span class="line">    <span class="comment">// 通常设置某些属性值，可以实现传参效果</span></span><br><span class="line">    branch = <span class="string">'master'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/Groovy" target="_blank" rel="noopener">维基百科-闭包</a></p><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-closure/" target="_blank" rel="noopener">闭包的概念、形式与应用 (IBM DeveloperWorks)</a></p><p><a href="http://groovy-lang.org/closures.html" target="_blank" rel="noopener">Groovy-Closure</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy使用总结</title>
      <link href="/2019/06/13/groovy/groovy-usage/"/>
      <url>/2019/06/13/groovy/groovy-usage/</url>
      
        <content type="html"><![CDATA[<p>Apache Groovy基于Java平台的一种功能强大、可选类型的动态语言。它的目的在于通过简洁、熟悉和易于学习的语法来提升开发人员的效率。Groovy代码动态地编译成运行于Java虚拟机（JVM）上的Java字节码，并可以与其他Java代码和库进行互操作。由于其运行在JVM上的特性，Groovy可以使用其他Java语言编写的库。</p><p><a href="http://groovy-lang.org/documentation.html" target="_blank" rel="noopener">官网文档</a></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><a href="/2019/06/13/groovy/groovy-closure">闭包</a></h2><h2 id="grape依赖管理"><a href="#grape依赖管理" class="headerlink" title="grape依赖管理"></a><a href="/2019/07/16/groovy/jenkins-groovy-grape">grape依赖管理</a></h2><h2 id="动态替换yaml文件中的变量"><a href="#动态替换yaml文件中的变量" class="headerlink" title="动态替换yaml文件中的变量"></a><a href="/2019/11/02/groovy/groovy-repalce-param-in-yaml">动态替换yaml文件中的变量</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>etcd_introduce</title>
      <link href="/2019/06/02/etcd/etcd-introduce/"/>
      <url>/2019/06/02/etcd/etcd-introduce/</url>
      
        <content type="html"><![CDATA[<p><a href="https://etcd.io/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener">github</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>etcd官方定义为一个分布式的可信的键值存储服务，用于存储分布式系统中的一些关键数据。其主要特性包括:</p><ol><li>Simple 简单: 包含一套定义良好、面向用户的API(gRpc)</li><li>Secure 安全: 支持可选择客户端证书认证的TLS</li><li>Fast 快速: 基准测试可达10,000写每秒</li><li>Reliable 可靠: properly distributed using Raft</li></ol><p>etcd是使用Go语言编写，采用Raft共识算法管理高可用的replicated log。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>最简单的方式是在<a href="https://github.com/etcd-io/etcd/releases/" target="_blank" rel="noopener">github的release中</a>下载预编译(pre-built)好的二进制</li><li>源码安装<br>a) etcd源码安装时对go版本通常都有要求，请参照github中说明<br>b) 为了确保etcd编译正确，etcd提供了官方release版本的依赖。当然是否使用官方提供的依赖是可选的。</li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="预置条件"><a href="#预置条件" class="headerlink" title="预置条件"></a>预置条件</h3>]]></content>
      
      
      
        <tags>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAVEN POM</title>
      <link href="/2019/06/01/maven/maven-pom/"/>
      <url>/2019/06/01/maven/maven-pom/</url>
      
        <content type="html"><![CDATA[<p>Maven的超级POM(Project Object Model)位于${M2_HOME}/lib/maven-model-builder-xxx.jar构件中org.apache.maven.model.pom-4.0.0.xml<br>其中包含了Maven用于构建项目有关的项目信息以及配置细节，它包含了大多数项目的默认值。<br>超级POM是Maven的默认POM，除非显式设置(POM中的&lt;parent>配置)，否则所有的POM都会扩展超级POM，也就是说项目POM默认都会继承超级POM中的配置。</p><h3 id="POM最小内容"><a href="#POM最小内容" class="headerlink" title="POM最小内容"></a>POM最小内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>modelVersion内容要设置为4.0.0。<br>groupId、artifactId和version三个元素定义了项目的坐标。</p><p>### </p><h3 id="Super-POM-3-6-1-内容"><a href="#Super-POM-3-6-1-内容" class="headerlink" title="Super POM(3.6.1)内容"></a>Super POM(3.6.1)内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- START SNIPPET: superpom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Switchboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Plugin Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span>src/main/scripts<span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> These plugins will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2-beta-5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> The release profile will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>release-profile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>performRelease<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">updateReleaseInfo</span>&gt;</span>true<span class="tag">&lt;/<span class="name">updateReleaseInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- END SNIPPET: superpom --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipeline并行任务配置</title>
      <link href="/2019/05/30/jenkins/jenkins-pipeline-parallel/"/>
      <url>/2019/05/30/jenkins/jenkins-pipeline-parallel/</url>
      
        <content type="html"><![CDATA[<h2 id="静态并行任务配置"><a href="#静态并行任务配置" class="headerlink" title="静态并行任务配置"></a>静态并行任务配置</h2><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><ol><li>在<code>stage</code>中可以通过<code>parallel</code>块来嵌套多个<code>stage</code>实现并行运行</li><li><code>parallel</code>块中的<code>stage</code>除了不能再次嵌套<code>parallel</code>外和普通<code>stage</code>一样，也可以通过<code>stages</code>包含一些列顺序执行的<code>stage</code></li><li>每个<code>stage</code>中有且只能有一个<code>steps</code>、<code>stages</code>或者<code>parallel</code></li><li>所有包含<code>parallel</code>的<code>stage</code>都不能包含<code>agent</code>和<code>tools</code></li></ol><h4 id="EXAMPLE-1-stage级别并行"><a href="#EXAMPLE-1-stage级别并行" class="headerlink" title="EXAMPLE-1 stage级别并行"></a>EXAMPLE-1 stage级别并行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        timestamps()</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&apos;init&apos;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;init start&quot;</span><br><span class="line">                sleep 5</span><br><span class="line">                echo &apos;init end&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&apos;build&apos;) &#123;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(&apos;x86 build&apos;) &#123;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &apos;x86 build start&apos;</span><br><span class="line">                        sleep 5</span><br><span class="line">                        echo &apos;x86 build end&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(&apos;arm build&apos;) &#123;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &apos;arm build start&apos;</span><br><span class="line">                        sleep 3</span><br><span class="line">                        echo &apos;arm build end&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>blueOcean如下图所示<br><img src="/img/jenkins_example_1.bmp" alt="example_1"></p><h4 id="EXAMPLE-2-并行stage中多个stage串行"><a href="#EXAMPLE-2-并行stage中多个stage串行" class="headerlink" title="EXAMPLE-2 并行stage中多个stage串行"></a>EXAMPLE-2 并行stage中多个stage串行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        timestamps()</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&apos;init&apos;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;init start&quot;</span><br><span class="line">                sleep 5</span><br><span class="line">                echo &apos;init end&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&apos;build&apos;) &#123;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(&apos;x86 build&apos;) &#123;</span><br><span class="line">                    agent &#123;</span><br><span class="line">                        label &apos;master&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &apos;x86 build start&apos;</span><br><span class="line">                        sleep 5</span><br><span class="line">                        echo &apos;x86 build end&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(&apos;arm build&apos;) &#123;</span><br><span class="line">                    stages &#123;</span><br><span class="line">                        stage(&apos;arm-master build&apos;) &#123;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                echo &apos;arm master build start&apos;</span><br><span class="line">                                sleep 3</span><br><span class="line">                                echo &apos;arm master build end&apos;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(&apos;arm develop build&apos;) &#123;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                echo &apos;arm develop build start&apos;</span><br><span class="line">                                sleep 3</span><br><span class="line">                                echo &apos;arm develop build end&apos;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>blueOcean如下图所示<br><img src="/img/jenkins_example_2.bmp" alt="example_2"></p><h4 id="EXAMPLE-4-step级别并行"><a href="#EXAMPLE-4-step级别并行" class="headerlink" title="EXAMPLE-4 step级别并行"></a>EXAMPLE-4 step级别并行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        timestamps()</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&apos;init&apos;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;init start&quot;</span><br><span class="line">                sleep 5</span><br><span class="line">                echo &apos;init end&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&apos;build&apos;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                parallel &apos;x86 build&apos;: &#123;</span><br><span class="line">                    echo &apos;x86 build start&apos;</span><br><span class="line">                    sleep 3</span><br><span class="line">                    echo &apos;x86 build end&apos;</span><br><span class="line">                &#125;, &apos;arm build&apos;: &#123;</span><br><span class="line">                    echo &apos;arm build start&apos;</span><br><span class="line">                    sleep 3</span><br><span class="line">                    echo &apos;arm build end&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>blueOcean如下图所示<br><img src="/img/jenkins_example_4.png" alt="example_4"></p><h3 id="脚本式"><a href="#脚本式" class="headerlink" title="脚本式"></a>脚本式</h3><h4 id="EXAMPLE-3"><a href="#EXAMPLE-3" class="headerlink" title="EXAMPLE-3"></a>EXAMPLE-3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">script &#123;</span><br><span class="line">    node(&apos;master&apos;) &#123;</span><br><span class="line">        stage(&apos;init&apos;) &#123;</span><br><span class="line">            echo &apos;init&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&apos;build&apos;) &#123;</span><br><span class="line">            parallel &apos;build x86&apos;: &#123;</span><br><span class="line">                stage(&apos;build x86 step1&apos;) &#123;</span><br><span class="line">                    echo &apos;build x86 step1 start&apos;</span><br><span class="line">                    sleep 5</span><br><span class="line">                    echo &apos;build x86 step1 end&apos;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(&apos;build x86 step2&apos;) &#123;</span><br><span class="line">                    echo &apos;build x86 step 2 start&apos;</span><br><span class="line">                    sleep 5</span><br><span class="line">                    echo &apos;build x86 step 2 end&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &apos;build arm&apos;: &#123;</span><br><span class="line">                echo &apos;build arm start&apos;</span><br><span class="line">                sleep 6</span><br><span class="line">                echo &apos;build arm end&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>blueOcean如下图所示<br><img src="/img/jenkins_example_3.png" alt="example_3"></p><h2 id="动态创建并行任务"><a href="#动态创建并行任务" class="headerlink" title="动态创建并行任务"></a>动态创建并行任务</h2><h3 id="EXAMPLE-5"><a href="#EXAMPLE-5" class="headerlink" title="EXAMPLE-5"></a>EXAMPLE-5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def jobs = [&apos;jobA&apos;, &apos;jobB&apos;, &apos;jobC&apos;]</span><br><span class="line"></span><br><span class="line">def parallelStagesMap = jobs.collectEntries &#123; def jobName -&gt;</span><br><span class="line">    [&quot;$&#123;jobName&#125;&quot;, generateJobStage(jobName)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generateJobStage(String jobName) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        node(&apos;master&apos;) &#123;</span><br><span class="line">            stage(&quot;stage: $&#123;jobName&#125;&quot;) &#123;</span><br><span class="line">                echo &quot;$&#123;jobName&#125; start&quot;</span><br><span class="line">                sleep 5</span><br><span class="line">                echo &quot;job end&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    options &#123;</span><br><span class="line">        timestamps()</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&apos;non-parallel stage&apos;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &apos;this is non-parallel stage&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&apos;parallel stage&apos;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    parallel parallelStagesMap</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 使用总结</title>
      <link href="/2019/05/23/maven/maven-usage/"/>
      <url>/2019/05/23/maven/maven-usage/</url>
      
        <content type="html"><![CDATA[<p><a href="http://maven.apache.org/index.html" target="_blank" rel="noopener">maven官方文档</a><br><a href="https://www.yiibai.com/maven/" target="_blank" rel="noopener">易百教程</a><br><a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven库查询</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">二进制包</a>后解压即可，然后配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export M2_HOME=/usr/local/apache_maven_xxx'</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$M2_HOME/bin:$PATH'</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><p>执行<code>mvn -v</code>查看版本，同时确认是否安装配置OK</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="超级POM"><a href="#超级POM" class="headerlink" title="超级POM"></a><a href="/2019/06/01/maven/maven-pom/">超级POM</a></h3><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>maven的配置文件有三个级别</p><ol><li>项目级，位于项目workspace目录下的pom.xml</li><li>用户级，位于~/.m2/settings.xml，通过<code>mvn -s /path/to/settings.xml</code>可以覆盖用户级配置文件</li><li>全局级，位于${M2_HOME}/conf/settings.xml，通过<code>mvn -gs /path/to/settings.xml</code>可以覆盖全局配置文件</li></ol><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><table><thead><tr><th>标签</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>localRepository</td><td>String</td><td>本地仓库路径，默认位于<code>~/.m2/repository</code></td></tr><tr><td>mirrors</td><td>List&lt;mirror></td><td>配置仓库的下载镜像</td></tr></tbody></table><p>mirrorOf配置</p><ol><li>* = everything</li><li>external:* = everything not on the localhost and not file based.</li><li>repo,repo1 = repo or repo1</li><li>*,!repo1 = everything except repo1</li></ol><h3 id="镜像设置"><a href="#镜像设置" class="headerlink" title="镜像设置"></a>镜像设置</h3><h4 id="阿里镜像"><a href="#阿里镜像" class="headerlink" title="阿里镜像"></a>阿里镜像</h4><p><a href="https://help.aliyun.com/document_detail/102512.html?spm=a2c40.aliyun_maven_repo.0.0.36183054c2VGCz" target="_blank" rel="noopener">公共代理库使用文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimavenpublic<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central,jcenter<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="华为镜像"><a href="#华为镜像" class="headerlink" title="华为镜像"></a><a href="https://mirrors.huaweicloud.com/" target="_blank" rel="noopener">华为镜像</a></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>huaweicloud<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h2><p>对于Maven来说，仓库只有两类: 本地仓库和远程仓库。<br>当Maven根据坐标寻找构件时，首先查找本地仓库，如果本地仓库存在此构件，则直接使用；<br>如果本地仓库没有此构件，或需要查看构件是否有更新，Maven会去远程仓库查找，找到后下载到本地仓库再使用，如果没有找到则报错。</p><p>对于远程仓库，根据仓库的提供者又可以分为: 中央仓库、其他公开库和私服<br>中央仓库是Maven自带的远程仓库，它包含了绝大部分开源的构件。默认情况下，当本地仓库没有找到需要的构件时，Maven会尝试从中央仓库下载。</p><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><h3 id="Help命令"><a href="#Help命令" class="headerlink" title="Help命令"></a>Help命令</h3><h4 id="查看某个插件的详情"><a href="#查看某个插件的详情" class="headerlink" title="查看某个插件的详情"></a>查看某个插件的详情</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:describe -Dplugin=xxx -Ddetail</span><br></pre></td></tr></table></figure><p>plugin可以使用下面三种方式指定:</p><ul><li>插件前缀, 如 ‘help’</li><li>groupId:artifactId, 如 ‘org.apache.maven.plugins:maven-help-plugin’</li><li>groupId:artifactId:version, 如 ‘org.apache.maven.plugins:maven-help-plugin:2.0’</li></ul><h4 id="查看某个插件的指定命令的帮助"><a href="#查看某个插件的指定命令的帮助" class="headerlink" title="查看某个插件的指定命令的帮助"></a>查看某个插件的指定命令的帮助</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:<span class="built_in">help</span> -Ddetail -Dgoal=generate</span><br></pre></td></tr></table></figure><h3 id="使用archetype创建Maven项目"><a href="#使用archetype创建Maven项目" class="headerlink" title="使用archetype创建Maven项目"></a>使用archetype创建Maven项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br><span class="line">mvn -U archetype:generate -Dfilter=io.jenkins.archetypes:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vm_network</title>
      <link href="/2019/05/16/virtualbox/vm-network/"/>
      <url>/2019/05/16/virtualbox/vm-network/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yushupan/article/details/78404395" target="_blank" rel="noopener">TODO1</a><br><a href="https://blog.csdn.net/chichi123137/article/details/82670257" target="_blank" rel="noopener">TODO2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos使用总结</title>
      <link href="/2019/05/15/centos/centos-usage/"/>
      <url>/2019/05/15/centos/centos-usage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如未特殊说明表示使用CentOS 7.6 1810</p></blockquote><h2 id="最小化安装IP配置"><a href="#最小化安装IP配置" class="headerlink" title="最小化安装IP配置"></a>最小化安装IP配置</h2><p>修改 <code>/etc/sysconfig/network-scripts/ifcfg-xxx</code> 文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=Ethernet</span><br><span class="line"><span class="attr">BOOTPROTO</span>=static        #网卡引导方式 static/DHCP</span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span>              #网卡开机启动</span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">192.168</span>.<span class="number">0.150</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">192.168</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">HWADDR</span>=xx:xx:xx:xx:xx:xx</span><br><span class="line"><span class="attr">DNS1</span>=x.x.x.x</span><br><span class="line"><span class="attr">DNS2</span>=x.x.x.x</span><br></pre></td></tr></table></figure><p>然后重启网络服务 <code>systemctl restart network</code></p><h2 id="配置国内镜像源"><a href="#配置国内镜像源" class="headerlink" title="配置国内镜像源"></a>配置国内镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/centos-release</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h2 id="epel扩展源"><a href="#epel扩展源" class="headerlink" title="epel扩展源"></a><a href="/2019/06/30/centos/epel">epel扩展源</a></h2><h2 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a><a href="2020/06/03/centos/yum-cmd">yum命令</a></h2><h2 id="工具安装与配置"><a href="#工具安装与配置" class="headerlink" title="工具安装与配置"></a>工具安装与配置</h2><h3 id="openjdk安装"><a href="#openjdk安装" class="headerlink" title="openjdk安装"></a>openjdk安装</h3><p>通过yum工具安装的位置为 <code>/usr/lib/jvm/java-xxx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install java-11-openjdk-devel.x86_64</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export JAVA_HOME=/usr/lib/jvm/java-11-openjdk"</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$JAVA_HOME/bin:$PATH'</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a><a href="/2019/11/11/centos/centos-docker-install">docker安装</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile使用总结</title>
      <link href="/2019/05/14/make/makefile-usage/"/>
      <url>/2019/05/14/make/makefile-usage/</url>
      
        <content type="html"><![CDATA[<h3 id="常用链接"><a href="#常用链接" class="headerlink" title="常用链接"></a>常用链接</h3><p><a href="https://github.com/seisman/how-to-write-makefile" target="_blank" rel="noopener">跟我一起写Makefile重制版</a><br><a href="http://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">GUN Make手册</a></p><h3 id="makefile中添加打印信息"><a href="#makefile中添加打印信息" class="headerlink" title="makefile中添加打印信息"></a>makefile中添加打印信息</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">warn_msg=<span class="string">"warning..."</span></span><br><span class="line"><span class="variable">$(info "infomation output")</span></span><br><span class="line"><span class="variable">$(<span class="built_in">warning</span> "warn: <span class="variable">$(warn_msg)</span>")</span></span><br><span class="line"><span class="variable">$(<span class="built_in">error</span> "<span class="built_in">error</span> message")</span></span><br></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul><li><code>-n, --just-print</code> 打印make过程中执行的所有命令但是并不会真正执行</li><li><code>--print-data-base</code> make过程中会显示GNU信息、执行的命令以及make的内部数据库。数据库里面的数据分为以下几类<br>1) variables                  会列出每个变量及描述性注释<br>2) directories                列出了将会被make检查的目录<br>3) implicit rules             包含了所有内置和用户自定义的模式规则<br>4) pattern-specific variables 定义在makefile中的模式专属变量<br>5) files(explicit rules)      与特定文件有关的自定义和后缀规则<br>6) vpath search paths</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> make </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lvm使用</title>
      <link href="/2019/05/13/linux/lvm/"/>
      <url>/2019/05/13/linux/lvm/</url>
      
        <content type="html"><![CDATA[<p>LVM(Logic Volume Manager)逻辑卷管理，它是linux环境下对磁盘分区进行管理的一种机制。</p><p><a href="https://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_linux_042_lvm.html" target="_blank" rel="noopener">TODO</a></p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li>PV: Physical Volume 物理卷</li><li>VG: Volume Group 卷组，由一个或多个PV组成。可以在其上创建一个或多个LV</li><li>LV: Logical Volume 逻辑卷，在其上可以创建文件系统</li><li>PE: Physical Extent 物理扩展盘区，每个PV都会被划分成PE，它是可以被LVM寻址的最小单元</li><li>LE: Logical Extent 逻辑扩展盘区，</li></ul><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>1) 物理磁盘被格式化为PV，空间被划分为一个个PE<br>2) 不同的PV加入到同一个VG中，其对应的所有PE都进入VG的PE池中<br>3) LVM从PE池中选择PE创建LV，不同物理盘中的PE可能会划分到同一个LV中<br>4) 在LV上创建文件系统后就可以挂载使用了<br>5) 对LV的扩容和缩减其实就是相应的增加或减少PE数量</p><p>创建逻辑卷时，定义了逻辑扩展盘区与物理扩展盘区的映射关系。</p><h2 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h2><h3 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-2097151, default 2048): </span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-2097151, default 2097151): +300M</span><br><span class="line">Partition 1 of type Linux and of size 300 MiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x233e2ebd</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048      616447      307200   83  Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (type L to list all codes): 8e</span><br><span class="line">Changed type of partition 'Linux' to 'Linux LVM'</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x233e2ebd</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048      616447      307200   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><h3 id="创建pv"><a href="#创建pv" class="headerlink" title="创建pv"></a>创建pv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pvcreate /dev/sdb1</span></span><br><span class="line">  Physical volume <span class="string">"/dev/sdb1"</span> successfully created.</span><br><span class="line">[root@localhost ~]<span class="comment"># pvs</span></span><br><span class="line">  PV         VG     Fmt  Attr PSize   PFree  </span><br><span class="line">  /dev/sdb1         lvm2 ---  300.00m 300.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># pvdisplay /dev/sdb1</span></span><br><span class="line">  --- Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb1</span><br><span class="line">  VG Name               vg0</span><br><span class="line">  PV Size               300.00 MiB / not usable 4.00 MiB</span><br><span class="line">  Allocatable           yes </span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              74</span><br><span class="line">  Free PE               74</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               8dqEi7-haMt-ciIM-ib2e-AUxp-f7ym-bCvlfw</span><br></pre></td></tr></table></figure><h3 id="创建vg"><a href="#创建vg" class="headerlink" title="创建vg"></a>创建vg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vgcreate vg0 /dev/sdb1</span></span><br><span class="line">  Volume group <span class="string">"vg0"</span> successfully created</span><br><span class="line">[root@localhost ~]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  vg0      1   0   0 wz--n- 296.00m 296.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># vgdisplay vg0</span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vg0</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  1</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                0</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               296.00 MiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              74</span><br><span class="line">  Alloc PE / Size       0 / 0           <span class="comment">#已分配的PE数量</span></span><br><span class="line">  Free  PE / Size       74 / 296.00 MiB <span class="comment">#剩余的PE数量</span></span><br><span class="line">  VG UUID               3FH6og-yXLt-NaL3-uehk-9lrJ-c4TD-r0z6Sa</span><br></pre></td></tr></table></figure><h3 id="创建lv"><a href="#创建lv" class="headerlink" title="创建lv"></a>创建lv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lvcreate -L 100m -n lv0 vg0</span></span><br><span class="line">  Logical volume <span class="string">"lv0"</span> created.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv0  vg0    -wi<span class="_">-a</span>----- 100.00m  </span><br><span class="line">[root@localhost ~]<span class="comment"># lvdisplay /dev/vg0/lv0 </span></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg0/lv0</span><br><span class="line">  LV Name                lv0</span><br><span class="line">  VG Name                vg0</span><br><span class="line">  LV UUID                Plb1kl-JGcg-0UfR-W3Ue-tDBc-D5Tc-tj6X0n</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Creation host, time localhost.localdomain, 2019-05-16 02:02:27 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  <span class="comment"># open                 0</span></span><br><span class="line">  LV Size                100.00 MiB</span><br><span class="line">  Current LE             25</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently <span class="built_in">set</span> to     8192</span><br><span class="line">  Block device           253:2</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pvdisplay /dev/sdb1</span></span><br><span class="line">  --- Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb1</span><br><span class="line">  VG Name               vg0</span><br><span class="line">  PV Size               300.00 MiB / not usable 4.00 MiB</span><br><span class="line">  Allocatable           yes </span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              74</span><br><span class="line">  Free PE               49</span><br><span class="line">  Allocated PE          25    <span class="comment"># 可以看到已经有PE被分配出去了</span></span><br><span class="line">  PV UUID               8dqEi7-haMt-ciIM-ib2e-AUxp-f7ym-bCvlfw</span><br><span class="line">[root@localhost ~]<span class="comment"># vgdisplay vg0</span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vg0</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  2</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                1</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               296.00 MiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              74</span><br><span class="line">  Alloc PE / Size       25 / 100.00 MiB   <span class="comment"># 可以看到已经有PE被分配出去了</span></span><br><span class="line">  Free  PE / Size       49 / 196.00 MiB</span><br><span class="line">  VG UUID               3FH6og-yXLt-NaL3-uehk-9lrJ-c4TD-r0z6Sa</span><br></pre></td></tr></table></figure><p>创建LV时LV的大小有以下两种方式指定</p><ul><li>通过<code>-L</code>参数，表示物理大小</li><li>通过<code>-l</code>参数，使用相关VG/LV或PV大小的百分比来指定<ul><li>10%VG, 表示10%的VG总大小</li><li>20%FREE, 表示VG中剩余空间的20%</li><li>30%PVS, 表示PV集合中剩余空间的30%</li><li>该参数后面跟数值(非百分比)时，表示包含多少个PE大小。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lvremove /dev/vg0/lv0</span></span><br><span class="line">Do you really want to remove active logical volume vg0/lv0? [y/n]: y</span><br><span class="line">  Logical volume <span class="string">"lv0"</span> successfully removed</span><br><span class="line">[root@localhost ~]<span class="comment"># lvcreate -l 30%VG -n lv1 vg0</span></span><br><span class="line">  Logical volume <span class="string">"lv1"</span> created.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv1  vg0    -wi<span class="_">-a</span>----- 88.00m                                                    </span><br><span class="line">[root@localhost ~]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  centos   1   2   0 wz--n-  &lt;9.00g      0 </span><br><span class="line">  vg0      1   1   0 wz--n- 296.00m 208.00m</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkfs.ext3 /dev/vg0/lv1</span></span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=1024 (<span class="built_in">log</span>=0)</span><br><span class="line">Fragment size=1024 (<span class="built_in">log</span>=0)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">22528 inodes, 90112 blocks</span><br><span class="line">4505 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=1</span><br><span class="line">Maximum filesystem blocks=67371008</span><br><span class="line">11 block groups</span><br><span class="line">8192 blocks per group, 8192 fragments per group</span><br><span class="line">2048 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">        8193, 24577, 40961, 57345, 73729</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (4096 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># fdisk -l /dev/vg0/lv1 </span></span><br><span class="line"></span><br><span class="line">Disk /dev/vg0/lv1: 92 MB, 92274688 bytes, 180224 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /usr1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/vg0/lv1 /usr1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -ha</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg0-lv1       82M  1.6M   76M   2% /usr1</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><h3 id="扩容LV"><a href="#扩容LV" class="headerlink" title="扩容LV"></a>扩容LV</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv1  vg0    -wi-ao---- 88.00m                                                    </span><br><span class="line">[root@localhost ~]<span class="comment"># lvextend -L +100m /dev/vg0/lv1 </span></span><br><span class="line">  Size of logical volume vg0/lv1 changed from 88.00 MiB (22 extents) to 188.00 MiB (47 extents).</span><br><span class="line">  Logical volume vg0/lv1 successfully resized.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv1  vg0    -wi-ao---- 188.00m </span><br><span class="line">[root@localhost ~]<span class="comment"># df -ha</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg0-lv1       82M  1.6M   76M   2% /usr1    <span class="comment"># LV已经扩容但是文件系统大小还时原来大小</span></span><br><span class="line">[root@localhost ~]<span class="comment"># resize2fs /dev/vg0/lv1 </span></span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/vg0/lv1 is mounted on /usr1; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/vg0/lv1 is now 192512 blocks long.</span><br><span class="line">[root@localhost ~]<span class="comment"># df -ha</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg0-lv1      178M  1.6M  169M   1% /usr1    <span class="comment"># 已经扩容</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lvs |grep lv1</span></span><br><span class="line">  lv1  vg0    -wi-ao---- 188.00m                                                    </span><br><span class="line">[root@localhost ~]<span class="comment"># lvextend -l +50%FREE /dev/vg0/lv1 </span></span><br><span class="line">  Size of logical volume vg0/lv1 changed from 188.00 MiB (47 extents) to 244.00 MiB (61 extents).</span><br><span class="line">  Logical volume vg0/lv1 successfully resized.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvs |grep lv1</span></span><br><span class="line">  lv1  vg0    -wi-ao---- 244.00m                                                    </span><br><span class="line">[root@localhost ~]<span class="comment"># df -ha |grep lv1</span></span><br><span class="line">/dev/mapper/vg0-lv1      178M  1.6M  169M   1% /usr1</span><br><span class="line">[root@localhost ~]<span class="comment"># resize2fs /dev/mapper/vg0-lv1 </span></span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/mapper/vg0-lv1 is mounted on /usr1; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/mapper/vg0-lv1 is now 249856 blocks long.</span><br><span class="line">[root@localhost ~]<span class="comment"># df -ha |grep lv1</span></span><br><span class="line">/dev/mapper/vg0-lv1      233M  2.1M  220M   1% /usr1</span><br></pre></td></tr></table></figure><p>lvextend 中 <code>-L</code> 和 <code>-l</code> 参数中如果没有使用 <code>+</code> 号，则表示扩容到指定大小</p><h3 id="扩容VG"><a href="#扩容VG" class="headerlink" title="扩容VG"></a>扩容VG</h3><p>当VG中没有空闲资源时需要先扩容VG才能扩容LV</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pvs</span></span><br><span class="line">  PV         VG     Fmt  Attr PSize   PFree </span><br><span class="line">  /dev/sdb1  vg0    lvm2 a--  296.00m 52.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># pvcreate /dev/sdc1 </span></span><br><span class="line">  Physical volume <span class="string">"/dev/sdc1"</span> successfully created.</span><br><span class="line">[root@localhost ~]<span class="comment"># pvs</span></span><br><span class="line">  PV         VG     Fmt  Attr PSize   PFree</span><br><span class="line">  /dev/sdb1  vg0    lvm2 a--  296.00m  52.00m</span><br><span class="line">  /dev/sdc1         lvm2 ---  511.00m 511.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree </span></span><br><span class="line">  vg0      1   1   0 wz--n- 296.00m 52.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># vgextend vg0 /dev/sdc1 </span></span><br><span class="line">  Volume group <span class="string">"vg0"</span> successfully extended</span><br><span class="line">[root@localhost ~]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  vg0      2   1   0 wz--n- 804.00m 560.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv1  vg0    -wi<span class="_">-a</span>----- 244.00m</span><br><span class="line">[root@localhost ~]<span class="comment"># lvextend -l +100%FREE /dev/vg0/lv1 </span></span><br><span class="line">  Size of logical volume vg0/lv1 changed from 244.00 MiB (61 extents) to 804.00 MiB (201 extents).</span><br><span class="line">  Logical volume vg0/lv1 successfully resized.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv1  vg0    -wi<span class="_">-a</span>----- 804.00m</span><br></pre></td></tr></table></figure><h2 id="缩减容量"><a href="#缩减容量" class="headerlink" title="缩减容量"></a>缩减容量</h2><ul><li>先umount设备</li><li>缩减文件系统大小</li><li>缩减LV大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># umount -l /usr1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># resize2fs /dev/mapper/vg0-lv1 100M</span></span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Please run <span class="string">'e2fsck -f /dev/mapper/vg0-lv1'</span> first.</span><br><span class="line">[root@localhost ~]<span class="comment"># e2fsck -f /dev/mapper/vg0-lv1 </span></span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">/dev/mapper/vg0-lv1: 2369/206848 files (6.4% non-contiguous), 61211/823296 blocks</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line">[root@localhost ~]<span class="comment"># resize2fs /dev/mapper/vg0-lv1 100M</span></span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Resizing the filesystem on /dev/mapper/vg0-lv1 to 102400 (1k) blocks.</span><br><span class="line">The filesystem on /dev/mapper/vg0-lv1 is now 102400 blocks long.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvreduce -L 100M /dev/mapper/vg0-lv1 </span></span><br><span class="line">  WARNING: Reducing active logical volume to 100.00 MiB.</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce vg0/lv1? [y/n]: y</span><br><span class="line">  Size of logical volume vg0/lv1 changed from 804.00 MiB (201 extents) to 100.00 MiB (25 extents).</span><br><span class="line">  Logical volume vg0/lv1 successfully resized.</span><br><span class="line">[root@localhost ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv1  vg0    -wi<span class="_">-a</span>----- 100.00m  </span><br><span class="line">[root@localhost /]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  vg0      2   1   0 wz--n- 804.00m 704.00m</span><br><span class="line">[root@localhost /]<span class="comment"># pvs</span></span><br><span class="line">  PV         VG     Fmt  Attr PSize   PFree  </span><br><span class="line">  /dev/sdb1  vg0    lvm2 a--  296.00m 196.00m</span><br><span class="line">  /dev/sdc1  vg0    lvm2 a--  508.00m 508.00m</span><br></pre></td></tr></table></figure><h2 id="分区扩展"><a href="#分区扩展" class="headerlink" title="分区扩展"></a>分区扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@baoze:# pvs</span><br><span class="line">  PV         VG        Fmt  Attr PSize   PFree</span><br><span class="line">  /dev/sda3  ubuntu-vg lvm2 a--  &lt;28.00g    0 </span><br><span class="line">root@baoze:# lsblk </span><br><span class="line">NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">loop1                       7:1    0   62M  1 loop /snap/core20/1587</span><br><span class="line">loop2                       7:2    0 79.9M  1 loop /snap/lxd/22923</span><br><span class="line">loop3                       7:3    0 49.6M  1 loop /snap/snapd/17883</span><br><span class="line">loop4                       7:4    0 63.3M  1 loop /snap/core20/1778</span><br><span class="line">loop5                       7:5    0  103M  1 loop /snap/lxd/23541</span><br><span class="line">sda                         8:0    0   80G  0 disk        ###  当前sda总大小80G</span><br><span class="line">├─sda1                      8:1    0    1M  0 part </span><br><span class="line">├─sda2                      8:2    0    2G  0 part /boot</span><br><span class="line">└─sda3                      8:3    0   28G  0 part        ### 但是sd3只有28G</span><br><span class="line">  └─ubuntu--vg-ubuntu--lv 253:0    0   28G  0 lvm  /</span><br><span class="line">sr0                        11:0    1  1.4G  0 rom</span><br><span class="line"></span><br><span class="line">#### 把sda中空闲的区域扩展到sd3中</span><br><span class="line">root@baoze:# growpart /dev/sda 3</span><br><span class="line">CHANGED: partition=3 start=4198400 old: size=58714112 end=62912512 new: size=163573727 end=167772127</span><br><span class="line">root@baoze:# lsblk</span><br><span class="line">NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">loop1                       7:1    0   62M  1 loop /snap/core20/1587</span><br><span class="line">loop2                       7:2    0 79.9M  1 loop /snap/lxd/22923</span><br><span class="line">loop3                       7:3    0 49.6M  1 loop /snap/snapd/17883</span><br><span class="line">loop4                       7:4    0 63.3M  1 loop /snap/core20/1778</span><br><span class="line">loop5                       7:5    0  103M  1 loop /snap/lxd/23541</span><br><span class="line">sda                         8:0    0   80G  0 disk </span><br><span class="line">├─sda1                      8:1    0    1M  0 part </span><br><span class="line">├─sda2                      8:2    0    2G  0 part /boot</span><br><span class="line">└─sda3                      8:3    0   78G  0 part          ### 当前sd3中的空间已经扩展到78G</span><br><span class="line">  └─ubuntu--vg-ubuntu--lv 253:0    0   28G  0 lvm  /</span><br><span class="line">sr0                        11:0    1  1.4G  0 rom</span><br><span class="line">root@baoze:# pvs</span><br><span class="line">  PV         VG        Fmt  Attr PSize   PFree </span><br><span class="line">  /dev/sda3  ubuntu-vg lvm2 a--  &lt;78.00g 50.00g     ### pvs中也可以看到空闲的PE了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins使用总结</title>
      <link href="/2019/05/13/jenkins/jenkins/"/>
      <url>/2019/05/13/jenkins/jenkins/</url>
      
        <content type="html"><![CDATA[<h3 id="常用链接"><a href="#常用链接" class="headerlink" title="常用链接"></a>常用链接</h3><ul><li><a href="https://github.com/jenkinsci" target="_blank" rel="noopener">github</a></li><li><a href="https://jenkins.io/doc/pipeline/steps/" target="_blank" rel="noopener">pipeline steps reference</a></li><li><a href="https://jenkins.io/doc/pipeline/steps/workflow-scm-step/" target="_blank" rel="noopener">pipeline scm step(checkout)</a></li><li><a href="http://www.groovy-lang.org/documentation.html" target="_blank" rel="noopener">apache groovy doc</a></li><li><a href="https://github.com/SAP/jenkins-library" target="_blank" rel="noopener">SAP shared lib repo</a></li><li>Jenkins插件升级站点配置<ul><li><a href="https://updates.jenkins.io/update-center.json" target="_blank" rel="noopener">https://updates.jenkins.io/update-center.json</a> (默认)</li><li><a href="http://mirrors.huaweicloud.com/jenkins/updates/update-center.json" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/jenkins/updates/update-center.json</a></li></ul></li><li><a href="https://github.com/MovingBlocks/GroovyJenkins/blob/master/src/main/groovy/AddSSHNodeToJenkins.groovy" target="_blank" rel="noopener">groovy实现添加slave</a></li><li><a href="https://wiki.jenkins.io/" target="_blank" rel="noopener">官方wiki</a></li><li><a href="https://github.com/TYPO3-infrastructure/jenkins-pipeline-global-library-chefci" target="_blank" rel="noopener">pipeline_demo_sharedlib</a></li><li><a href="https://github.com/TYPO3-cookbooks/site-chefcitypo3org/blob/master/Jenkinsfile" target="_blank" rel="noopener">pipeline_demo_jenkinsfile</a></li><li><a href="https://github.com/cloudbees/jenkins-scripts" target="_blank" rel="noopener">cloudbees_jenkins_script_sample</a></li></ul><h3 id="官方pipeline示例"><a href="#官方pipeline示例" class="headerlink" title="官方pipeline示例"></a><a href="https://jenkins.io/doc/pipeline/examples/" target="_blank" rel="noopener">官方pipeline示例</a></h3><h3 id="并行任务配置"><a href="#并行任务配置" class="headerlink" title="并行任务配置"></a><a href="/2019/05/30/jenkins/jenkins-pipeline-parallel">并行任务配置</a></h3><h3 id="Jenkins-pipeline控制并行执行job个数"><a href="#Jenkins-pipeline控制并行执行job个数" class="headerlink" title="Jenkins pipeline控制并行执行job个数"></a><a href="http://www.lujun.org.cn/?p=4025" target="_blank" rel="noopener">Jenkins pipeline控制并行执行job个数</a></h3><h3 id="shared-lib"><a href="#shared-lib" class="headerlink" title="shared-lib"></a>shared-lib</h3><h3 id="pipeline代码调试"><a href="#pipeline代码调试" class="headerlink" title="pipeline代码调试"></a>pipeline代码调试</h3><h3 id="centos安装jenkins"><a href="#centos安装jenkins" class="headerlink" title="centos安装jenkins"></a><a href="/2019/07/16/centos/centos-jenkins-install">centos安装jenkins</a></h3><h3 id="Jenkins中使用Grab下载第三方Jar"><a href="#Jenkins中使用Grab下载第三方Jar" class="headerlink" title="Jenkins中使用Grab下载第三方Jar"></a><a href="/2019/07/16/groovy/jenkins-groovy-grape">Jenkins中使用Grab下载第三方Jar</a></h3><h3 id="Jenkins序列化"><a href="#Jenkins序列化" class="headerlink" title="Jenkins序列化"></a><a href="/2019/07/22/jenkins/jenkins-serialization">Jenkins序列化</a></h3><h3 id="Multijob不能调用pipeline任务"><a href="#Multijob不能调用pipeline任务" class="headerlink" title="Multijob不能调用pipeline任务"></a>Multijob不能调用pipeline任务</h3><p><a href="https://issues.jenkins-ci.org/browse/JENKINS-38825" target="_blank" rel="noopener">升级Multijob插件到1.32及以上</a></p><h3 id="slave中workspace出现-2"><a href="#slave中workspace出现-2" class="headerlink" title="slave中workspace出现@2"></a>slave中workspace出现@2</h3><p>slave的配置的executor的数量只有1个，但是某些情况下在任务日志日志中会发现slave的workspace出现了@2的情况。</p><p>Jenkins在slave上启动任务之前，会先检查当前应该使用的workspace是否处于lock状态，如果处于lock(lock的原因TODO)状态，jenkins会自动在workspace后面加上@x使用，x递增。</p><p>如果slave一直处于使用非期望的workspace目录(如执行器只有一个，期望使用指定的workspace)时，可以通过断链slave和master之间的连接然后<a href="/2019/11/23/jenkins/jenkins-ssh-slave#重连方法">重连解决</a>。</p><h3 id="admin密码丢失"><a href="#admin密码丢失" class="headerlink" title="admin密码丢失"></a>admin密码丢失</h3><ul><li>初始密码: <code>${jenkins_home}/secrets/initialAdminPassword</code></li><li><p>修改过密码后忘记</p><ul><li><p>将 <code>${jenkins_home}/config.xml</code> 文件中以下内容修改为false</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">useSecurity</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useSecurity</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>重启jenkins服务</p></li><li>系统管理 -&gt; 全局安全配置 中 启用安全</li><li>系统管理 -&gt; 管理用户 中 重置密码</li></ul></li></ul><h3 id="jenkins执行shell脚本时-etc-profile中环境变量不能访问"><a href="#jenkins执行shell脚本时-etc-profile中环境变量不能访问" class="headerlink" title="jenkins执行shell脚本时/etc/profile中环境变量不能访问"></a><a href="/2019/09/01/jenkins/jenkins-sh-read-env">jenkins执行shell脚本时/etc/profile中环境变量不能访问</a></h3><h3 id="获取pipeline中的Script-Path"><a href="#获取pipeline中的Script-Path" class="headerlink" title="获取pipeline中的Script Path"></a>获取pipeline中的Script Path</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> scriptPath = currentBuild.rawBuild.parent.definition.scriptPath</span><br></pre></td></tr></table></figure><h3 id="获取pipeline中stage和并行task中的分段日志"><a href="#获取pipeline中stage和并行task中的分段日志" class="headerlink" title="获取pipeline中stage和并行task中的分段日志"></a><a href="/2019/10/22/jenkins/jenkins-pipeline-stage-log">获取pipeline中stage和并行task中的分段日志</a></h3><h3 id="查看Jenkins中JAVA相关的环境变量信息"><a href="#查看Jenkins中JAVA相关的环境变量信息" class="headerlink" title="查看Jenkins中JAVA相关的环境变量信息"></a>查看Jenkins中JAVA相关的环境变量信息</h3><p>在<code>Manage Jenkins</code> -&gt; <code>Script Console</code> 中执行如下脚本</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperty(<span class="string">"permissive-script-security.enabled"</span>)</span><br></pre></td></tr></table></figure><h3 id="获取jenkins中安装的所有插件"><a href="#获取jenkins中安装的所有插件" class="headerlink" title="获取jenkins中安装的所有插件"></a>获取jenkins中安装的所有插件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Jenkins.instance.pluginManager.plugins.each &#123;</span><br><span class="line">  println(<span class="string">"$&#123;it.getDisplayName()&#125; --- $&#123;it.getVersion()&#125;"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据名称排序显示</span></span><br><span class="line">List&lt;String&gt; jenkinsPlugins = <span class="keyword">new</span> ArrayList&lt;String&gt;(Jenkins.instance.pluginManager.plugins)</span><br><span class="line">jenkinsPlugins.sort &#123; it.displayName &#125;.each &#123; plugin -&gt;</span><br><span class="line">  println(<span class="string">"$&#123;plugin.shortName&#125;:$&#123;plugin.version&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脚本式pipeline中failFast使用"><a href="#脚本式pipeline中failFast使用" class="headerlink" title="脚本式pipeline中failFast使用"></a><a href="/2019/11/02/jenkins/jenkins-script-pipeline-failfast">脚本式pipeline中failFast使用</a></h3><h3 id="清理Jenkins-Master中的所有Job的历史记录"><a href="#清理Jenkins-Master中的所有Job的历史记录" class="headerlink" title="清理Jenkins Master中的所有Job的历史记录"></a><a href="/2019/11/08/jenkins/jenkins-clear-jobs-history">清理Jenkins Master中的所有Job的历史记录</a></h3><h3 id="强制终止运行时间过长的构建记录"><a href="#强制终止运行时间过长的构建记录" class="headerlink" title="强制终止运行时间过长的构建记录"></a><a href="/2019/11/23/jenkins/jenkins-stop-longtime-builds">强制终止运行时间过长的构建记录</a></h3><h3 id="ssh-slave连接过程"><a href="#ssh-slave连接过程" class="headerlink" title="ssh slave连接过程"></a><a href="/2019/11/23/jenkins/jenkins-ssh-slave">ssh slave连接过程</a></h3><h3 id="slave磁盘空间配置"><a href="#slave磁盘空间配置" class="headerlink" title="slave磁盘空间配置"></a><a href="/2019/11/23/jenkins/jenkins-slave-space-config">slave磁盘空间配置</a></h3><h3 id><a href="#" class="headerlink" title="[]"></a>[]</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用总结</title>
      <link href="/2019/05/13/vscode-usage/"/>
      <url>/2019/05/13/vscode-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"workbench.colorTheme"</span>: <span class="string">"One Dark Pro"</span>,</span><br><span class="line">  <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">  <span class="attr">"editor.renderWhitespace"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"editor.renderControlCharacters"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"C_Cpp.clang_format_fallbackStyle"</span>: <span class="string">"Google"</span>,</span><br><span class="line">  <span class="attr">"clang-format.fallbackStyle"</span>: <span class="string">"Google"</span>,</span><br><span class="line">  <span class="attr">"[c]"</span>: &#123;</span><br><span class="line">      <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"xaver.clang-format"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"clang-format.executable"</span>: <span class="string">"C:\\Users\\xxx\\.vscode\\extensions\\ms-vscode.cpptools-0.26.0\\LLVM\\bin\\clang-format.exe"</span>,</span><br><span class="line">  <span class="attr">"files.exclude"</span>: &#123;</span><br><span class="line">    <span class="attr">"**/.git"</span>: <span class="literal">false</span>    // 默认为<span class="literal">true</span>，默认配置表示不显示.git文件</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>按键</th><th>说明</th></tr></thead><tbody><tr><td>shift+alt+F</td><td>格式化</td></tr><tr><td>shift+ctl+b</td><td>build</td></tr><tr><td>ctrl+x</td><td>删除当前行</td></tr><tr><td>shift+alt+⬇</td><td>拷贝当前行到下一行</td></tr><tr><td>shift+alt+⬆</td><td>拷贝当前行到上一行</td></tr><tr><td>shift+ctl+k</td><td>删除当前行</td></tr><tr><td>alt+⬆</td><td>移动当前行到上一行</td></tr><tr><td>alt+⬇</td><td>移动当前行到下一行</td></tr></tbody></table><h2 id="vscode调试c-c-程序"><a href="#vscode调试c-c-程序" class="headerlink" title="vscode调试c/c++程序"></a><a href="https://www.kancloud.cn/qinbao/git/706151" target="_blank" rel="noopener">vscode调试c/c++程序</a></h2><h2 id="VS-Code中更改C-C-代码格式样式"><a href="#VS-Code中更改C-C-代码格式样式" class="headerlink" title="VS Code中更改C/C++代码格式样式"></a><a href="https://www.jianshu.com/p/d0e99fec7a3d" target="_blank" rel="noopener">VS Code中更改C/C++代码格式样式</a></h2><h2 id="clang-foramt格式化选项介绍"><a href="#clang-foramt格式化选项介绍" class="headerlink" title="clang-foramt格式化选项介绍"></a><a href="https://blog.csdn.net/softimite_zifeng/article/details/78357898" target="_blank" rel="noopener">clang-foramt格式化选项介绍</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用总结</title>
      <link href="/2019/05/13/npm-usage/"/>
      <url>/2019/05/13/npm-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="npm使用淘宝镜像"><a href="#npm使用淘宝镜像" class="headerlink" title="npm使用淘宝镜像"></a>npm使用淘宝镜像</h2><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="永久设置"><a href="#永久设置" class="headerlink" title="永久设置"></a>永久设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>该方式等同于在<code>~/.npmrc</code>文件中添加<code>registry=https://registry.npm.taobao.org</code><br>可以通过<code>npm config get registry</code>确认是否生效</p><h3 id="使用cnpm"><a href="#使用cnpm" class="headerlink" title="使用cnpm"></a>使用cnpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>cnpm和npm用法完全一致，只是在执行命令时将npm改为cnpm</p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建blog</title>
      <link href="/2019/05/12/hexo-blog/"/>
      <url>/2019/05/12/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个快速、简洁且高效的博客框架。具体内容请参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网文档</a>。</p><p>主题Next修改参考<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>nodejs 12.* (hexo 3.8)</li><li>github个人仓库</li><li>git</li></ul><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 网站使用的语言，取值参考themes下面的languages目录中的配置</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># path和username要一致，且git中repo的命令必须为name.github.io</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:path/username.github.io.git</span></span><br></pre></td></tr></table></figure><h3 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h3><ul><li>hexo init [folder]<br>新建一个网站，如果未指定folder，则默认在当前位置创建</li><li>hexo new [layout] <title><br>新建文章，如果未指定layout，则使用_config.yml中的default_layout代替</title></li><li>hexo generate [option]<br>生成静态文件，可以简写为<code>hexo g</code>。<br>option:<ul><li>-d,–deploy 文件生成后立即部署</li><li>-w,–watch 监视文件变化</li></ul></li><li>hexo server<br>启动服务器。默认访问路径为 <a href="http://localhost:4000。可以简写为`hexo" target="_blank" rel="noopener">http://localhost:4000。可以简写为`hexo</a> s`</li><li>hexo deploy<br>部署网站。可以简写为<code>hexo d</code>。可以通过指定<code>-g</code>参数指定部署前先生成静态文件。</li><li>hexo clean<br>清除缓存文件(db.json)和已生成的静态文件(public/*)</li></ul><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><table><thead><tr><th>参数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>文章标题</td><td></td></tr><tr><td>data</td><td>创建时间</td><td></td></tr><tr><td>updated</td><td>更新时间</td><td></td></tr><tr><td>comments</td><td>开启评论</td><td>默认值:true</td></tr><tr><td>tags</td><td>标签(不适用于分页)</td><td>配置多个时，标签没有顺序和层次</td></tr><tr><td>categories</td><td>分类(不适用于分页)</td><td>配置多个时，分类具有顺序和层次</td></tr></tbody></table><h3 id="Next增加站内搜索"><a href="#Next增加站内搜索" class="headerlink" title="Next增加站内搜索"></a>Next增加站内搜索</h3><ol><li>安装插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ol start="2"><li>修改hexo配置</li></ol><p>在hexo目录下的<code>_config.yml</code>中增加以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ol start="3"><li>next主题增加搜索入口</li></ol><p>在<code>themes/next/_config.yml</code>文件中打开local_search</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
